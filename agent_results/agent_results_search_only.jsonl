{"example_id": "0", "output": "import torch\nfrom scipy.stats import norm\n\ndef log_ndtr(input_tensor: torch.Tensor) -> torch.Tensor:\n    \"\"\"Calculate the logarithm of the cumulative distribution function of the standard normal distribution.\"\"\"\n    return torch.tensor(norm.logcdf(input_tensor.numpy()))"}
{"example_id": "1", "output": "import torch\n\ndef gamma_ln(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.lgamma(input_tensor)"}
{"example_id": "2", "output": "import torch\ndef erf(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.erf(input_tensor)"}
{"example_id": "3", "output": "import torch\n\ndef erfc(input_tensor: torch.Tensor) -> torch.Tensor:\n    return 1 - torch.erf(input_tensor)"}
{"example_id": "4", "output": "import torch\n\ndef bessel_i0(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.i0(input_tensor)"}
{"example_id": "5", "output": "import torch\ndef bessel_i1(input_tensor: torch.Tensor) -> torch.Tensor:\n    # Check if input_tensor is a tensor\n    if not isinstance(input_tensor, torch.Tensor):\n        raise TypeError(\"input_tensor must be a torch.Tensor\")\n\n    # Calculate the modified Bessel function of the first kind, order 1\n    return torch.special.i1(input_tensor)"}
{"example_id": "6", "output": "import torch\ndef gamma_ln(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.lgamma(input_tensor)"}
{"example_id": "7", "output": "import torch\ndef erf(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.erf(input_tensor)"}
{"example_id": "8", "output": "import torch\ndef erfc(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.erfc(input_tensor)"}
{"example_id": "9", "output": "import torch\ndef bessel_i0(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.i0(input_tensor)"}
{"example_id": "10", "output": "import torch\ndef bessel_i1(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.i1(input_tensor)"}
{"example_id": "11", "output": "import torch\ndef invert_mask(tensor1: torch.Tensor, tensor2: torch.Tensor) -> torch.BoolTensor:\n    mask = ~(tensor1 < tensor2)\n    return mask"}
{"example_id": "12", "output": "import torch\ndef log_ndtr(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.log_ndtr(input_tensor)"}
{"example_id": "13", "output": "import torch\ndef invert_mask(tensor1: torch.Tensor, tensor2: torch.Tensor) -> torch.BoolTensor:\n    mask = ~(tensor1 < tensor2)\n    return mask"}
{"example_id": "14", "output": "import torch\ndef stft(audio_signal: torch.Tensor, n_fft: int) -> torch.Tensor:\n    \"\"\"Computes the Short-Time Fourier Transform (STFT) of the signal.\"\"\"\n    stft_complex = torch.stft(audio_signal, n_fft=n_fft, return_complex=True)\n    stft_real = torch.view_as_real(stft_complex)\n    return stft_real"}
{"example_id": "15", "output": "import torch\ndef stft(audio_signal: torch.Tensor, n_fft: int) -> torch.Tensor:\n    \"\"\"Computes the Short-Time Fourier Transform (STFT) of the signal.\"\"\"\n    stft_complex = torch.stft(audio_signal, n_fft=n_fft, return_complex=True)\n    stft_real = stft_complex.real\n    return stft_real"}
{"example_id": "16", "output": "import torch\ndef istft(spectrogram: torch.Tensor, signal: torch.Tensor, n_fft: int, hop_length: int, win_length: int, normalized=False) -> torch.Tensor:\n    \"\"\"Compute the Inverse Short-Time Fourier Transform (ISTFT) of a spectrogram using PyTorch.\n\n    Args:\n        spectrogram (torch.Tensor): The input spectrogram. Shape: (freq_bins, time_frames, 2).\n        signal (torch.Tensor): example of original signal\n        n_fft (int): The size of the Fourier transform.\n        hop_length (int): The hop length used in the STFT.\n        win_length (int): The window length used in the STFT.\n        normalized (bool, optional): Whether the STFT was normalized. Defaults to False.\n\n    Returns:\n        torch.Tensor: The reconstructed time-domain signal.\n    \"\"\"\n    window = torch.hann_window(win_length, device=spectrogram.device)\n    time_domain_signal = torch.istft(spectrogram, n_fft=n_fft, hop_length=hop_length, win_length=win_length, window=window, normalized=normalized, return_complex=False)\n    return time_domain_signal"}
{"example_id": "17", "output": "import torch\ndef istft(spectrogram: torch.Tensor, signal: torch.Tensor, n_fft: int, hop_length: int, win_length: int, normalized=False) -> torch.Tensor:\n    \"\"\"Compute the Inverse Short-Time Fourier Transform (ISTFT) of a spectrogram using PyTorch.\n\n    Args:\n        spectrogram (torch.Tensor): Input spectrogram with shape (freq_bins, time_frames, 2).\n        n_fft (int): Size of the Fourier transform window.\n        hop_length (int): Number of samples between successive frames.\n        win_length (int): Length of the window function. Defaults to `n_fft`.\n        normalized (bool): Whether the spectrogram is normalized. Defaults to False.\n\n    Returns:\n        torch.Tensor: The reconstructed time-domain signal.\n    \"\"\"\n    window = torch.hann_window(win_length, device=spectrogram.device)\n    time_domain_signal = torch.istft(spectrogram, n_fft=n_fft, hop_length=hop_length, win_length=win_length, window=window, normalized=normalized, return_complex=False)\n    return time_domain_signal"}
{"example_id": "18", "output": "import geopandas as gpd\nfrom shapely.geometry import Point, Polygon\n\ndef spatial_join(gdf1 : gpd.GeoDataFrame, gdf2 : gpd.GeoDataFrame) -> gpd.GeoDataFrame:\n    return gpd.sjoin(gdf1, gdf2, how=\"inner\", op='intersects')"}
{"example_id": "19", "output": "import geopandas as gpd\nfrom shapely.geometry import Point, Polygon\n\ndef spatial_join(gdf1 : gpd.GeoDataFrame, gdf2 : gpd.GeoDataFrame) -> gpd.GeoDataFrame:\n    return gpd.sjoin(gdf1, gdf2, how=\"inner\", op='intersects')"}
{"example_id": "20", "output": "import geopandas as gpd\nfrom shapely.geometry import box\n\ndef perform_union(gdf : gpd.GeoDataFrame) -> gpd.GeoSeries:\n    return gdf.unary_union"}
{"example_id": "21", "output": "import geopandas as gpd\nfrom shapely.geometry import box\n\ndef perform_union(gdf: gpd.GeoDataFrame) -> gpd.GeoSeries:\n    return gdf.unary_union"}
{"example_id": "22", "output": "import geopandas as gpd\nfrom shapely.geometry import Point\n\ndef create_geoseries(x: list[int], y: list[int]) -> gpd.GeoSeries:\n    points = [Point(x_coord, y_coord) for x_coord, y_coord in zip(x, y)]\n    return gpd.GeoSeries(points)"}
{"example_id": "23", "output": "import geopandas as gpd\nfrom shapely.geometry import Point\n\ndef create_geoseries(x: list[int], y: list[int]) -> gpd.GeoSeries:\n    points = [Point(xi, yi) for xi, yi in zip(x, y)]\n    return gpd.GeoSeries(points)"}
{"example_id": "24", "output": "import geopandas as gpd\nfrom shapely.geometry import Point, Polygon, box\n\ndef spatial_query(gdf:gpd.GeoDataFrame, other:gpd.GeoDataFrame) -> gpd.GeoDataFrame:\n    combined_geometry = other.unary_union\n    return gdf[gdf.intersects(combined_geometry)]"}
{"example_id": "25", "output": "import geopandas as gpd\nfrom shapely.geometry import Point, Polygon\n\ndef spatial_query(gdf:gpd.GeoDataFrame, other:gpd.GeoSeries) -> gpd.GeoDataFrame:\n    return gdf[gdf.geometry.contains(other.geometry[0])]"}
{"example_id": "26", "output": "import nltk\nimport io\nimport contextlib\n\ndef show_usage(obj:object) -> str:\n    with io.StringIO() as buf, contextlib.redirect_stdout(buf):\n        help(obj)\n        return buf.getvalue()"}
{"example_id": "27", "output": "import networkx as nx\ndef modularity_communities(G:nx.Graph) -> list:\n    return nx.community.greedy_modularity_communities(G, resolution=1, weight=None, best_n=5)"}
{"example_id": "28", "output": "import networkx as nx\ndef modularity_communities(G:nx.Graph) -> list:\n    return nx.community.greedy_modularity_communities(G)"}
{"example_id": "29", "output": "import networkx as nx\ndef bounding_distance(G:nx.Graph) -> int:\n    return nx.diameter(G)"}
{"example_id": "30", "output": "import networkx as nx\ndef bounding_distance(G:nx.Graph) -> int:\n    return nx.diameter(G)"}
{"example_id": "31", "output": "import networkx as nx\ndef naive_modularity_communities(G:nx.Graph) -> list:\n    return nx.community.greedy_modularity_communities(G)"}
{"example_id": "32", "output": "import networkx as nx\ndef naive_modularity_communities(G:nx.Graph) -> list:\n    return nx.community.greedy_modularity_communities(G)"}
{"example_id": "33", "output": "import networkx as nx\ndef get_nodes(G:nx.Graph) -> list:\n    return list(G.nodes)"}
{"example_id": "34", "output": "import networkx as nx\ndef get_first_edge(G:nx.Graph) -> tuple :\n    return next(iter(G.edges))"}
{"example_id": "35", "output": "import networkx as nx\ndef shortest_path(G:nx.Graph, source:int) -> list:\n    return nx.shortest_path(G, source=source)"}
{"example_id": "36", "output": "import gradio as gr\ndef render_quadratic_formula():\n    formula = r\"$x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}$\"\n    return formula\n\ninterface = gr.Interface(fn=render_quadratic_formula, inputs=[], outputs=\"text\")\n\ninterface.launch()"}
{"example_id": "37", "output": "import gradio as gr\n\ndef render_quadratic_formula():\n    formula = \"x = \\\\frac{-b \\\\pm \\\\sqrt{b^2 - 4ac}}{2a}\"\n    return formula\n\ninterface = gr.Chatbot()\ninterface.add_text(\"What is the quadratic formula?\")\ninterface.add_latex(render_quadratic_formula)\ninterface.launch()"}
{"example_id": "38", "output": "import gradio as gr\ndef display_image():\n    return \"https://image_placeholder.com/42\"\n\niface = gr.Interface(fn=display_image, inputs=None, outputs=gr.Image(interactive=False), allow_flagging=\"never\")\niface.launch()"}
{"example_id": "39", "output": "import gradio as gr\n\ndef display_image():\n    image_url = \"https://gradio-builds.s3.amazonaws.com/demo-files/mona-lisa.png\"\n    return gr.Image.update(value=image_url, visible=True), gr.Image.update(value=None, visible=False)\n\nimage_output = gr.Image(visible=True, label=\"Displayed Image\", interactive=False)\nimage_output_2 = gr.Image(visible=False)\n\niface = gr.Interface(\n    fn=display_image,\n    outputs=[image_output, image_output_2],\n    title=\"Image Display\",\n    description=\"Displays an image.\",\n)\n\niface.launch()"}
{"example_id": "40", "output": "import gradio as gr\n\ndef process_image(image):\n    return \"Processed\"\n\niface = gr.Interface(fn=process_image, inputs=gr.Image(), outputs=gr.Textbox())\niface.launch()"}
{"example_id": "41", "output": "import gradio as gr\n\ndef process_image(image):\n    return \"Processed\"\n\niface = gr.Interface(fn=process_image, inputs=\"image\", outputs=\"label\")\niface.launch()"}
{"example_id": "42", "output": "import gradio as gr\n\ndef get_selected_options(options):\n    return f\"Selected options: {options}\"\n\nselection_options = [\"angola\", \"pakistan\", \"canada\"]\n\niface = gr.Interface(get_selected_options, inputs = gr.CheckboxGroup(choices=selection_options), outputs=\"text\")\n\niface.launch()"}
{"example_id": "43", "output": "from sklearn.ensemble import GradientBoostingClassifier\nimport numpy as np\ndef get_n_features(clf: GradientBoostingClassifier) -> int:\n    X = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n    y = np.array([0, 1, 0, 1])\n    clf.fit(X, y)\n    return clf.n_features_in_"}
{"example_id": "44", "output": "from sklearn.ensemble import GradientBoostingClassifier\n# Initialize the classifier\ndef init_clf() -> GradientBoostingClassifier:\n    classifier = GradientBoostingClassifier(criterion=\"mse\")\n    return classifier"}
{"example_id": "45", "output": "from sklearn.cross_decomposition import CCA\nimport numpy as np\ndef get_coef_shape(cca_model: CCA, X: np.ndarray, Y: np.ndarray) -> tuple:\n    cca_model.fit(X, Y)\n    return cca_model.coef_.shape"}
{"example_id": "46", "output": "from sklearn.cross_decomposition import CCA\nimport numpy as np\ndef get_coef_shape(cca_model: CCA, X: np.ndarray, Y: np.ndarray) -> tuple:\n    cca_model.fit(X, Y)\n    return cca_model.coef_.shape"}
{"example_id": "47", "output": "from sklearn.datasets import make_sparse_coded_signal\ndef get_signal(n_samples: int, n_features: int, n_components: int, n_nonzero_coefs: int) -> tuple:\n    X, dictionary, code = make_sparse_coded_signal(n_samples=n_samples, n_components=n_components, n_features=n_features, n_nonzero_coefs=n_nonzero_coefs, random_state=0)\n    return X.T, dictionary, code"}
{"example_id": "48", "output": "from sklearn.datasets import load_digits\nfrom sklearn.utils import Bunch\nfrom sklearn.decomposition import FastICA\n\ndef apply_fast_ica(data: Bunch, n_components: int) -> FastICA:\n    transformer = FastICA(n_components=n_components, whiten='arbitrary-variance', random_state=0)\n    transformed_data = transformer.fit_transform(data.data)\n    return transformed_data\n\ndata = load_digits()\n\ntransformed_data = apply_fast_ica(data, n_components=20)"}
{"example_id": "49", "output": "from sklearn.datasets import load_digits\nfrom sklearn.decomposition import FastICA\nfrom sklearn.utils import Bunch\n\ndef apply_fast_ica(data: Bunch, n_components: int) -> FastICA:\n    transformer = FastICA(n_components=n_components, whiten=\"arbitrary-variance\", random_state=0)\n    transformed_data = transformer.fit_transform(data.data)\n    return transformer\n\ndigits = load_digits()\napply_fast_ica(digits, 2)"}
{"example_id": "50", "output": "from sklearn.impute import SimpleImputer\nimport numpy as np\ndef get_imputer(data: np.ndarray) -> SimpleImputer:\n    imputer = SimpleImputer(missing_values=np.nan, strategy=\"mean\")\n    imputer.fit(data)\n    return imputer"}
{"example_id": "51", "output": "from sklearn import metrics\n\ndef get_scorer_names() -> list:\n    return list(metrics.SCORERS.keys())"}
{"example_id": "52", "output": "from sklearn import metrics\n\ndef get_scorer_names() -> list:\n    return metrics.get_scorer_names()"}
{"example_id": "53", "output": "from sklearn.metrics.pairwise import manhattan_distances\nimport numpy as np\ndef get_pairwise_dist(X: np.ndarray,Y: np.ndarray) -> np.ndarray:\n    distances = manhattan_distances(X, Y, sum_over_features=False)\n    return distances"}
{"example_id": "54", "output": "from sklearn.metrics.pairwise import manhattan_distances\nimport numpy as np\ndef get_pairwise_dist(X: np.ndarray,Y: np.ndarray) -> np.ndarray:\n    return manhattan_distances(X, Y)"}
{"example_id": "55", "output": "from matplotlib.colors import *\nimport numpy as np\ncmap = {\n    \"blue\": [[1, 2, 2], [2, 2, 1]],\n    \"red\": [[0, 0, 0], [1, 0, 0]],\n    \"green\": [[0, 0, 0], [1, 0, 0]]\n}\n\ncmap_reversed = {}\nfor key, value in cmap.items():\n    cmap_reversed[key] = np.flip(value, axis=0).tolist()\n\nprint(cmap_reversed)"}
{"example_id": "56", "output": "import pandas as pd\ndef get_grouped_df(df: pd.DataFrame) -> pd.DataFrame:\n    return df.groupby('col1', dropna=False).sum()"}
{"example_id": "57", "output": "import pandas as pd\n\ndef get_grouped_df(df: pd.DataFrame) -> pd.DataFrame:\n    return df.groupby('col1', observed=False, dropna=False).size().reset_index(name='count')\n\n# Example usage\ndf = pd.DataFrame({'col1': [1, 1, 2, pd.NA, pd.NA], 'col2': ['A', 'B', 'C', 'D', 'E']})\n\nresult = get_grouped_df(df)\nprint(result)"}
{"example_id": "58", "output": "import pandas as pd\nimport numpy as np\ndef get_expected_value(df: pd.DataFrame) -> pd.Series:\n    df_copy = df.copy()\n    df_copy.iloc[0, 0] = 10\n    return df_copy.iloc[0]"}
{"example_id": "59", "output": "import pandas as pd\nimport numpy as np\ndef get_expected_value(df: pd.DataFrame) -> pd.Series:\n    df_copy = df.copy()\n    df_copy.iloc[0,0] = 10\n    return df_copy.iloc[0]"}
{"example_id": "60", "output": "import pandas as pd\nimport numpy as np\ndef get_slice(ser: pd.Series, start: int, end: int) -> pd.Series:\n    return ser.iloc[start:end]"}
{"example_id": "61", "output": "import pandas as pd\nimport numpy as np\ndef get_slice(ser: pd.Series, start: int, end: int) -> pd.Series:\n    return ser.iloc[start:end]"}
{"example_id": "62", "output": "import pandas as pd\n\ndef correct_type(index: pd.Index) -> str:\n    return index.dtype.name"}
{"example_id": "63", "output": "import pandas as pd\ndef combined(df1: pd.DataFrame, df2: pd.DataFrame, series1: pd.Series, series2: pd.Series) -> tuple:\n    combined_dfs = pd.concat([df1, df2])\n    combined_series = pd.concat([series1, series2])\n    return (combined_dfs, combined_series)"}
{"example_id": "64", "output": "import pandas as pd\ndef correct_type(index: pd.Index) -> str:\n    return index.dtype.name"}
{"example_id": "65", "output": "import pandas as pd\ndef combined(df1: pd.DataFrame, df2: pd.DataFrame, series1: pd.Series, series2: pd.Series) -> tuple:\n    combined_df = pd.concat([df1, df2], ignore_index=True)\n    combined_series = pd.concat([series1, series2], ignore_index=True)\n    return combined_df, combined_series"}
{"example_id": "66", "output": "import numpy as np\n\ndef apply_convolution_full(arr1 : np.ndarray, arr2 : np.ndarray) -> np.ndarray:\n    \"\"\"Calculates the convolution of two arrays with the mode set to full.\"\"\"\n    return np.convolve(arr1, arr2, mode=\"full\")"}
{"example_id": "67", "output": "import numpy as np\n\ndef apply_convolution_valid(arr1 : np.ndarray , arr2 : np.ndarray) -> np.ndarray:\n    return np.convolve(arr1, arr2, mode='valid')"}
{"example_id": "68", "output": "import numpy as np\n\ndef apply_correlate_full(arr1 : np.ndarray, arr2 : np.ndarray) -> np.ndarray:\n    return np.correlate(arr1, arr2, mode=\"full\")"}
{"example_id": "69", "output": "import numpy as np\n\ndef find_common_type(arr1:np.ndarray, arr2:np.ndarray) -> np.dtype:\n    return np.find_common_type([arr1.dtype, arr2.dtype], [])"}
{"example_id": "70", "output": "import numpy as np\n\ndef find_common_type(arr1:np.ndarray, arr2:np.ndarray) -> np.dtype:\n    return np.find_common_type([], [arr1.dtype, arr2.dtype])"}
{"example_id": "71", "output": "import numpy as np\n\ndef custom_round(arr:np.ndarray) -> np.ndarray:\n    return np.round(arr)"}
{"example_id": "72", "output": "import numpy as np\n\ndef custom_product(arr:np.ndarray) -> np.ndarray:\n    return np.prod(arr)"}
{"example_id": "73", "output": "import numpy as np\n\ndef custom_cumproduct(arr:np.ndarray) -> np.ndarray:\n    return np.cumprod(arr)"}
{"example_id": "74", "output": "import numpy as np\n\ndef custom_sometrue(arr:np.ndarray) -> np.ndarray:\n    return np.any(arr)"}
{"example_id": "75", "output": "import numpy as np\n\ndef custom_alltrue(arr:np.ndarray) -> np.ndarray:\n    return np.all(arr)"}
{"example_id": "76", "output": "import numpy as np\n\ndef custom_round(arr:np.ndarray) -> np.ndarray:\n    return np.round(arr)"}
{"example_id": "77", "output": "import numpy as np\n\ndef custom_product(arr:np.ndarray) -> np.ndarray:\n    return np.prod(arr)"}
{"example_id": "78", "output": "import numpy as np\n\ndef custom_cumproduct(arr:np.ndarray) -> np.ndarray:\n    return np.cumprod(arr)"}
{"example_id": "79", "output": "import numpy as np\n\ndef custom_anytrue(arr:np.ndarray) -> np.ndarray:\n    return np.any(arr)"}
{"example_id": "80", "output": "import numpy as np\n\ndef custom_alltrue(arr:np.ndarray) -> np.ndarray:\n    return np.all(arr)"}
{"example_id": "81", "output": "import numpy as np\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\n\ndef predict_start(model: LGBMClassifier, start_iter: int) -> np.ndarray:\n    num_iterations = model.booster_.current_iteration()\n    predictions = model.predict(model._Booster.data, num_iteration=min(start_iter, num_iterations), start_iteration=0)\n    return predictions"}
{"example_id": "82", "output": "import numpy as np\nimport lightgbm as lgb\nfrom sklearn.datasets import make_classification\n\nNUM_SAMPLES = 500\nNUM_FEATURES = 20\nINFORMATIVE_FEATURES = 2\nREDUNDANT_FEATURES = 10\nRANDOM_STATE = 42\nNUM_BOOST_ROUND = 100\nNFOLD = 5\nLEARNING_RATE = 0.05\nEARLY_STOPPING_ROUNDS = 10\nX, y = make_classification(n_samples=NUM_SAMPLES, n_features=NUM_FEATURES, n_informative=INFORMATIVE_FEATURES, n_redundant=REDUNDANT_FEATURES, random_state=RANDOM_STATE)\ntrain_data = lgb.Dataset(X, label=y)\n\nparams = {\n    'objective': 'binary',\n    'metric': 'binary_logloss',\n    'learning_rate': LEARNING_RATE,\n    'verbose': -1\n}\n\ncv_results = lgb.cv(\n    params=params,\n    train_set=train_data,\n    num_boost_round=NUM_BOOST_ROUND,\n    nfold=NFOLD,\n    early_stopping_rounds=EARLY_STOPPING_ROUNDS,\n    return_cvbooster=True\n)\n\nevaluation_history = cv_results['cvbooster'].boosters[0].get_evals_result()\nprint(evaluation_history)"}
{"example_id": "83", "output": "import lightgbm.compat as compat\ndef decode_string(string: bytes) -> str:\n    return string.decode()"}
{"example_id": "84", "output": "import numpy as np\nimport lightgbm as lgb\nfrom sklearn.datasets import make_classification\n\nNUM_SAMPLES = 500\nNUM_FEATURES = 20\nINFORMATIVE_FEATURES = 2\nREDUNDANT_FEATURES = 10\nRANDOM_STATE = 42\nNUM_BOOST_ROUND = 100\nNFOLD = 5\nLEARNING_RATE = 0.05\nEARLY_STOPPING_ROUNDS = 10\nX, y = make_classification(n_samples=NUM_SAMPLES, n_features=NUM_FEATURES, n_informative=INFORMATIVE_FEATURES, n_redundant=REDUNDANT_FEATURES, random_state=RANDOM_STATE)\ntrain_data = lgb.Dataset(X, label=y)\n\nparams = {\n    'objective': 'binary',\n    'metric': 'binary_logloss',\n    'learning_rate': LEARNING_RATE,\n    'verbose': -1\n}\n\ndef log_evaluation(env):\n    for i in range(len(env.evaluation_result_list)):\n        print(f\"Iteration {i+1}: {env.evaluation_result_list[i]}\")\n\ncv_results = lgb.cv(\n    params=params,\n    train_set=train_data,\n    num_boost_round=NUM_BOOST_ROUND,\n    nfold=NFOLD,\n    early_stopping_rounds=EARLY_STOPPING_ROUNDS,\n    callbacks=[lgb.log_evaluation(period=1)],\n)"}
{"example_id": "85", "output": "import lightgbm as lgb\nimport numpy as np\nimport ctypes\n\ndef convert_cint32_array_to_numpy(c_pointer: ctypes.POINTER, length: int) -> np.ndarray:\n    \"\"\"\n    Convert a ctypes pointer to a numpy array.\n    \n    Args:\n        c_pointer (c_array_type): A ctypes pointer to an array of integers.\n        length (int): The length of the array.\n        \n    Returns:\n        np.ndarray: A numpy array containing the elements of the ctypes array.\n    \"\"\"\n    # Create a NumPy array from the ctypes pointer\n    # Note: Assumes the pointer's underlying data is int32. If not, adjust the dtype accordingly.\n    numpy_array = np.ctypeslib.as_array(c_pointer, shape=(length,))\n    return numpy_array"}
{"example_id": "86", "output": "import lightgbm as lgb\nimport numpy as np\n\ndef get_params(dataset: lgb.Dataset) -> dict:\n    \"\"\"\n    Get the parameters of the dataset.\n    \n    Args:\n        dataset (lgb.Dataset): The dataset to get the parameters from.\n        \n    Returns:\n        dict: The parameters of the dataset.\n    \"\"\"\n    return dataset.get_params()"}
{"example_id": "87", "output": "import numpy as np\nimport json\nfrom lightgbm.compat import json_default_with_numpy\n\ndef dump_json(data: any) -> str:\n    \"\"\"\n    Dump data to JSON format.\n    \n    Args:\n        data (any): The data to dump.\n        \n    Returns:\n        str: The JSON representation of the data.\n    \"\"\"\n    return json.dumps(data, default=json_default_with_numpy)"}
{"example_id": "88", "output": "import ctypes\nimport lightgbm.basic as basic\n\ndef create_c_array(values: list, ctype: type) -> ctypes.Array:\n    \"\"\"\n    Create a ctypes array from a list of values.\n    Args:\n        values (list): A list of values to be converted to a ctypes array.\n        ctype (type): The ctypes type of the array elements.\n    Returns:\n        ctypes.Array: A ctypes array containing the values.\n    \"\"\"\n    arr = (ctype * len(values))(*values)\n    return arr"}
{"example_id": "89", "output": "import lightgbm as lgb\nimport ctypes\n\ndef c_str(python_string: str) -> ctypes.c_char_p:\n    \"\"\"\n    Convert a Python string to a ctypes c_char_p.\n    \n    Args:\n        python_string (str): The Python string to convert.\n        \n    Returns:\n        ctypes.c_char_p: The converted ctypes c_char_p.\n    \"\"\"\n    return ctypes.c_char_p(python_string.encode('utf-8'))"}
{"example_id": "90", "output": "import lightgbm as lgb\nimport numpy as np\n\ndef convert_from_sliced_object(sliced_data: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Convert a sliced object to a fixed object.\n    \n    Args:\n        sliced_data (np.ndarray): The sliced object to convert.\n        \n    Returns:\n        np.ndarray: The converted fixed object.\n    \"\"\"\n    return np.ascontiguousarray(sliced_data)"}
{"example_id": "91", "output": "import spacy\nfrom spacy.pipeline.span_ruler import SpanRuler\n\ndef get_labels(ruler: SpanRuler) -> tuple:\n    \"\"\"\n    Get the labels of the SpanRuler.\n    \n    Args:\n        ruler (SpanRuler): The SpanRuler to get the labels from.\n        \n    Returns:\n        tuple: The labels of the SpanRuler.\n    \"\"\"\n    return tuple(ruler.labels)"}
{"example_id": "92", "output": "import spacy\nfrom spacy.training import Example\nfrom spacy.training import augment\n\ndef create_whitespace_variant(nlp: spacy.Language, example: Example, whitespace: str, position: int) -> Example:\n    \"\"\"\n    Create a whitespace variant of the given example.\n    \n    Args:\n        nlp (Language): The spaCy language model.\n        example (Example): The example to augment.\n        whitespace (str): The whitespace to insert.\n        position (int): The position to insert the whitespace.\n        \n    Returns:\n        Example: The augmented example.\n    \"\"\"\n    doc = example.x\n    text = doc.text\n    if position < 0 or position >= len(text):\n      raise ValueError(\"Position must be between 0 and the length of the text.\")\n\n    variant_text = text[:position] + whitespace + text[position:]\n    variant_doc = nlp.make_doc(variant_text)\n    orig_example = example\n    variant_example = Example(variant_doc, orig_example.y)\n\n\n    return variant_example"}
{"example_id": "93", "output": "import spacy\nfrom spacy.pipeline.span_ruler import SpanRuler\n\n\ndef remove_pattern_by_id(ruler: SpanRuler, pattern_id: str) -> None:\n    \"\"\"\n    Remove a pattern from the SpanRuler by its ID.\n    \n    Args:\n        ruler (SpanRuler): The SpanRuler to remove the pattern from.\n        pattern_id (str): The ID of the pattern to remove.\n        \n    Returns:\n        None\n    \"\"\"\n    for i, pattern in enumerate(ruler.patterns):\n        if pattern.get(\"id\") == pattern_id:\n            del ruler.patterns[i]\n            return"}
{"example_id": "94", "output": "import nltk\nfrom nltk.stem import PorterStemmer\nfrom nltk.corpus import wordnet\n\ndef align_words_func(hypothesis, reference):\n    \"\"\"\n    Align words between hypothesis and reference sentences using METEOR algorithm.\n    \n    Args:\n        hypothesis (list): List of words in the hypothesis sentence.\n        reference (list): List of words in the reference sentence.\n        \n    Returns:\n        tuple: A tuple containing the aligned matches, unmatched hypothesis, and unmatched reference.\n    \"\"\"\n    stemmer = PorterStemmer()\n    \n    # Stem hypothesis and reference\n    stemmed_hypothesis = [stemmer.stem(word) for word in hypothesis]\n    stemmed_reference = [stemmer.stem(word) for word in reference]\n    \n    matches = []\n    unmatched_hypothesis = list(range(len(hypothesis)))\n    unmatched_reference = list(range(len(reference)))\n\n    # Exact matches\n    for i in range(len(hypothesis)):\n        for j in range(len(reference)):\n            if hypothesis[i] == reference[j]:\n                matches.append((i, j))\n                if i in unmatched_hypothesis:\n                    unmatched_hypothesis.remove(i)\n                if j in unmatched_reference:\n                    unmatched_reference.remove(j)\n                break # Move to the next hypothesis word once a match is found\n                \n    # Stemmed matches\n    for i in range(len(hypothesis)):\n      if i not in unmatched_hypothesis: # Skip words that were exactly matched\n        continue\n      for j in range(len(reference)):\n        if j not in unmatched_reference: # Skip words that were exactly matched\n          continue\n        if stemmed_hypothesis[i] == stemmed_reference[j]:\n            matches.append((i, j))\n            unmatched_hypothesis.remove(i)\n            unmatched_reference.remove(j)\n            break # Move to the next hypothesis word once a match is found\n            \n    # Synonym matches\n    for i in range(len(hypothesis)):\n      if i not in unmatched_hypothesis: # Skip words that were exactly or stem matched\n        continue\n      for j in range(len(reference)):\n        if j not in unmatched_reference: # Skip words that were exactly or stem matched\n          continue\n        synsets_hypothesis = wordnet.synsets(hypothesis[i])\n        synsets_reference = wordnet.synsets(reference[j])\n        if any(s1.name() == s2.name() for s1 in synsets_hypothesis for s2 in synsets_reference):  # Check for same synset name\n            matches.append((i, j))\n            unmatched_hypothesis.remove(i)\n            unmatched_reference.remove(j)\n            break  # Move to the next hypothesis word once a match is found\n            \n    return matches, unmatched_hypothesis, unmatched_reference"}
{"example_id": "95", "output": "import nltk\nnltk.download('wordnet')\nnltk.download('omw-1.4')\nfrom nltk.corpus import wordnet\n\ndef get_synset_examples(synset: str) -> list:\n    \"\"\"\n    Get examples for a given synset.\n    \n    Args:\n        synset (str): The synset to get examples for.\n        \n    Returns:\n        list: A list of examples for the synset.\n    \"\"\"\n    syn = wordnet.synset(synset)\n    return syn.examples()"}
{"example_id": "96", "output": "import nltk\nnltk.download('sinica_treebank')\nfrom nltk.tree import Tree\nfrom nltk.corpus import sinica_treebank\n\ndef parse_sinica_treebank_sentence(sentence: str) -> Tree:\n    \"\"\"\n    Parse a sentence from the Sinica Treebank.\n    \n    Args:\n        sentence (str): The sentence to parse.\n        \n    Returns:\n        Tree: The parsed tree.\n    \"\"\"\n    return Tree.fromstring(sentence)"}
{"example_id": "97", "output": "from nltk.lm.api import accumulate\nimport operator\n\ndef accumulate_functional(iterable, func):\n    \"\"\"\n    Accumulate the results of applying a function to an iterable.\n    \n    Args:\n        iterable (iterable): An iterable to accumulate.\n        func (function): A function to apply to the elements of the iterable.\n        \n    Returns:\n        list: A list of accumulated results.\n    \"\"\"\n    return list(\n        accumulate(iterable, func)\n    )"}
{"example_id": "98", "output": "import nltk.tokenize.destructive\n\ndef tokenize_sentence(sentence: str) -> list:\n    \"\"\"\n    Tokenize a sentence into words.\n    \n    Args:\n        sentence (str): The sentence to tokenize.\n        \n    Returns:\n        list: A list of tokens.\n    \"\"\"\n    tokens = []\n    for token in nltk.tokenize.destructive.NLTKWordTokenizer().span_tokenize(sentence):\n        tokens.append(sentence[token[0]:token[1]])\n    return tokens"}
{"example_id": "99", "output": "import django\nfrom django.conf import settings\nfrom django.utils import timezone\n\nsettings.configure()\n\ndef get_time_in_utc(year: int, month: int, day: int) -> timezone.datetime:\n    dt = timezone.datetime(year, month, day)\n    dt = timezone.make_aware(dt, timezone=timezone.utc)\n    return dt"}
{"example_id": "100", "output": "import django\nfrom django.conf import settings\nfrom django.utils import timezone\n\nsettings.configure()\n\ndef get_time_in_utc(year: int, month: int, day: int) -> timezone.datetime:\n    return timezone.make_aware(timezone.datetime(year, month, day), timezone.utc)"}
{"example_id": "101", "output": "from django.conf import settings\nfrom django.forms.models import BaseModelFormSet\nfrom django.forms.renderers import get_default_renderer\nfrom django.forms import Form\n\nsettings.configure()\ndef save_existing(formset: BaseModelFormSet, form : Form, obj:str) -> None:\n    instances = formset.save(commit=False)\n    for instance in instances:\n        # Do something with the instance, e.g. set a foreign key\n        # instance.foreign_key = obj\n        instance.save()"}
{"example_id": "102", "output": "from django.conf import settings\nfrom django.forms.models import BaseModelFormSet\nfrom django.forms.renderers import get_default_renderer\nfrom django.forms import Form\n\nsettings.configure()\ndef save_existing(formset: BaseModelFormSet, form : Form, instance:str) -> None:\n    for f in formset.forms:\n        if f.instance.id:\n            #update\n            f.save()\n        else:\n            #create\n            new_instance = f.save(commit = False)\n            # Link new_instance and instance based on problem context\n            new_instance.save()"}
{"example_id": "103", "output": "import django\nfrom django.conf import settings\nfrom django import forms\nfrom django.template import Template, Context\n\nsettings.configure(\n      TEMPLATES=[\n          {\n              'BACKEND': 'django.template.backends.django.DjangoTemplates',\n          },\n      ],\n  )\ndjango.setup()\n\ndef render_output(template_string):\n  form = SampleForm()\n  template = Template(template_string)\n  context = Context({'form': form})\n  rendered_output = template.render(context)\n  return rendered_output\n\n# target for html string\n# <form>\n#   <div>\n#     <label for='id_name'>Name:</label>\n\n# <div class='helptext' id='id_name_helptext'>Enter your name</div>\n\n# <input type='text' name='name' required aria-describedby='id_name_helptext' id='id_name'>\n#   </div>\n# </form>\n\nclass SampleForm(forms.Form):\n    name = forms.CharField(label='Name', help_text='Enter your name')\ndef get_template_string()->str:\n    return '''<form>\n  <div>\n    {{ form.name.label_tag }}\n\n{{ form.name.help_text }}\n\n{{ form.name }}\n  </div>\n</form>'''"}
{"example_id": "104", "output": "import django\nfrom django.conf import settings\nfrom django import forms\nfrom django.template import Template, Context\n\nsettings.configure(\n      TEMPLATES=[\n          {\n              'BACKEND': 'django.template.backends.django.DjangoTemplates',\n          },\n      ],\n  )\ndjango.setup()\n\ndef render_output(template_string):\n  form = SampleForm()\n  template = Template(template_string)\n  context = Context({'form': form})\n  rendered_output = template.render(context)\n  return rendered_output\n\n# target for html string\n# <form>\n#   <div>\n#     <label for='id_name'>Name:</label>\n\n# <div class='helptext' id='id_name_helptext'>Enter your name</div>\n\n# <input type='text' name='name' required aria-describedby='id_name_helptext' id='id_name'>\n#   </div>\n# </form>\n\nclass SampleForm(forms.Form):\n    name = forms.CharField(label='Name', help_text='Enter your name')\ndef get_template_string()->str:\n    return '''<form>\n  <div>\n    {{ form.name.label_tag }}\n\n{{ form.name.help_text|safe }}\n\n{{ form.name }}\n  </div>\n</form>'''"}
{"example_id": "105", "output": "import django\nfrom django.conf import settings\nfrom django.db import models, connection\nfrom django.db.models import F\n\nsettings.configure(\n    DATABASES={{'default': {{'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}}}},\n)\ndjango.setup()\n\n\ndef display_side_and_area(square):\n    return square.side, square.area\n\ndef create_square(side):\n    square = Square.objects.create(side=side)\n    square.refresh_from_db()\n    return square\n\nclass Square(models.Model):\n    class Meta:\n        app_label = 'myapp'\n    side = models.IntegerField()\n    area = models.IntegerField(editable=False)\n\n    def save(self, *args, **kwargs):\n        self.area = self.side * self.side\n        super().save(*args, **kwargs)"}
{"example_id": "106", "output": "import django\nfrom django.conf import settings\nfrom django.db import models, connection\nfrom django.db.models import F\n\nsettings.configure(\n    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},\n)\ndjango.setup()\n\n\ndef display_side_and_area(square):\n    return square.side, square.area\n\ndef create_square(side):\n    square = Square.objects.create(side=side)\n    square.refresh_from_db()\n    return square\n\nclass Square(models.Model):\n    class Meta:\n        app_label = 'myapp'\n    side = models.IntegerField()\n    area = models.IntegerField(editable=False)\n\n    def save(self, *args, **kwargs):\n        self.area = self.side * self.side\n        super().save(*args, **kwargs)"}
{"example_id": "107", "output": "import django\nfrom django.conf import settings\nfrom django.db import models\n\nsettings.configure()\ndjango.setup()\n\ncolor = models.TextChoices('Color', 'RED GREEN BLUE')\n\nclass MyModel(models.Model):\n    class Meta:\n        app_label = 'myapp'\n    color = models.CharField(max_length=5, choices=color.choices)"}
{"example_id": "108", "output": "import django\nfrom django.conf import settings\nfrom django.db import models\n\nsettings.configure()\ndjango.setup()\n\ncolor = models.TextChoices('Color', 'RED GREEN BLUE')\n\nclass MyModel(models.Model):\n    class Meta:\n        app_label = 'myapp'\n    color = models.CharField(max_length=5, choices=color.choices)"}
{"example_id": "109", "output": "from scipy.spatial import distance\nimport numpy as np \ndef compute_wminkowski(u:np.ndarray, v:np.ndarray, p:int, w:np.ndarray)->np.ndarray:\n    return distance.minkowski(u, v, p, w)"}
{"example_id": "110", "output": "from scipy.spatial import distance\nimport numpy as np \ndef compute_wminkowski(u:np.ndarray, v:np.ndarray, p:int, w:np.ndarray)->np.ndarray:\n    return distance.wminkowski(u, v, p, w)"}
{"example_id": "111", "output": "from scipy import linalg\nimport numpy as np\ndef compute_matrix_exponential(A: np.ndarray) -> np.ndarray:\n    return linalg.expm(A)"}
{"example_id": "112", "output": "from scipy import linalg\nimport numpy as np\ndef compute_matrix_exponential(A: np.ndarray) -> np.ndarray:\n    return linalg.expm(A)"}
{"example_id": "113", "output": "from scipy import stats\nimport numpy as np\ndef combine_pvalues(A: np.ndarray) -> tuple[float, float]:\n    return stats.combine_pvalues(A, method=\"pearson\", weights=None)"}
{"example_id": "114", "output": "from scipy import stats\nimport numpy as np\ndef combine_pvalues(A: np.ndarray) -> tuple[float, float]:\n    \"\"\"Combines the p values from various independent tests stored in a 1D array\n     using pearson method, make sure that higher values of the statistic now correspond to lower\n      p-values, non specified parameters should use the default value\"\"\"\n    statistic, pvalue = stats.combine_pvalues(A, method=\"pearson\")\n    return statistic, pvalue"}
{"example_id": "115", "output": "from scipy import sparse,linalg\nimport numpy as np \ndef compute_matrix_exponential(A:sparse.lil_matrix)->sparse.lil_matrix:\n    return linalg.expm(A)"}
{"example_id": "116", "output": "from scipy import sparse,linalg\nimport numpy as np \ndef compute_matrix_exponential(A: sparse.lil_matrix)->sparse.lil_matrix:\n    return sparse.lil_matrix(linalg.expm(A))"}
{"example_id": "117", "output": "from scipy import stats\nimport numpy as np\ndef compute_circular_variance(a: np.ndarray)-> float: \n    return stats.circvar(a)"}
{"example_id": "118", "output": "from scipy import stats\nimport numpy as np\ndef compute_circular_variance(a: np.ndarray)-> float:\n    return stats.circvar(a)"}
{"example_id": "119", "output": "from scipy.stats import rv_continuous\ndef compute_moment(dist : rv_continuous, n: int) -> float:\n    return dist.moment(n)"}
{"example_id": "120", "output": "from scipy.stats import rv_continuous\ndef compute_moment(dist : rv_continuous, n: int) -> float:\n    return dist.moment(n)"}
{"example_id": "121", "output": "from scipy.linalg import det\nimport numpy as np \ndef compute_determinant(A: np.ndarray) -> np.ndarray:\n    \"\"\"Computes the determinant of batched matrices (batched in the first dimention),\n    non specified parameters should use the default value.\n    \"\"\"\n    return det(A)"}
{"example_id": "122", "output": "from scipy.linalg import det\nimport numpy as np \ndef compute_determinant(A: np.ndarray) -> np.ndarray:\n    return det(A)"}
{"example_id": "123", "output": "from scipy.linalg import lu\nimport numpy as np \ndef compute_lu_decomposition(A: np.ndarray) -> tuple[np.ndarray,np.ndarray,np.ndarray]:\n    p, l, u = lu(A)\n    return p, l, u"}
{"example_id": "124", "output": "from scipy.linalg import lu\nimport numpy as np \ndef compute_lu_decomposition(A: np.ndarray) -> tuple[np.ndarray,np.ndarray,np.ndarray]:\n    p, l, u = lu(A)\n    return p, l, u"}
{"example_id": "125", "output": "import scipy.signal.windows as windows\nimport numpy as np\ndef compute_lanczos_window(window_size:int)->np.ndarray:\n    return windows.lanczos(window_size)"}
{"example_id": "126", "output": "import scipy.signal.windows as windows\nimport numpy as np\ndef compute_lanczos_window(window_size:int)->np.ndarray:\n    return windows.lanczos(window_size)"}
{"example_id": "127", "output": "from scipy.ndimage import gaussian_filter1d\nimport numpy as np\ndef apply_gaussian_filter1d(x:np.ndarray, radius:int, sigma:float)->np.ndarray:\n    return gaussian_filter1d(x, sigma, truncate=radius)"}
{"example_id": "128", "output": "from scipy.ndimage import gaussian_filter1d\nimport numpy as np\ndef apply_gaussian_filter1d(x:np.ndarray, radius:int, sigma:float)->np.ndarray:\n    \"\"\"Apply a 1D gaussian filter.\n\n    Args:\n        x (np.ndarray): The input array.\n        radius (int): Radius of the gaussian kernel.\n        sigma (float): Standard deviation of the gaussian kernel. \n\n    Returns:\n        np.ndarray: The filtered array.\n    \"\"\"\n    return gaussian_filter1d(x, sigma=sigma, truncate=radius)"}
{"example_id": "129", "output": "from scipy.ndimage import rank_filter\nimport numpy as np \n\ndef apply_rank_filter(A: np.ndarray,rank: int,size:int)->np.ndarray:\n    \"\"\"Applies a rank filter on batched images (batched in the first dimention),\n    non specified parameters should use the default value.\n\n    A: np.ndarray, The input array. Should be a 3D or 4D array for image batches.\n    rank: int, the rank parameter of rank_filter\n    size: int, the size parameter of rank_filter\n\n    \"\"\"\n    return rank_filter(A, rank=rank, size=size)"}
{"example_id": "130", "output": "from scipy.ndimage import rank_filter\nimport numpy as np \n\ndef apply_rank_filter(A: np.ndarray,rank: int,size:int)->np.ndarray:\n    return rank_filter(A, rank, size=size)"}
{"example_id": "131", "output": "from scipy.ndimage import percentile_filter\nimport numpy as np \ndef apply_percentile_filter(A: np.ndarray, percentile: int | float,size:int)->np.ndarray:\n    return percentile_filter(A, percentile=percentile, size=size)"}
{"example_id": "132", "output": "from scipy.ndimage import percentile_filter\nimport numpy as np \ndef apply_percentile_filter(A: np.ndarray, percentile: int | float,size:int)->np.ndarray:\n    return percentile_filter(A, percentile, size=size)"}
{"example_id": "133", "output": "from scipy.ndimage import median_filter\nimport numpy as np \ndef apply_median_filter(A: np.ndarray,size:int) -> np.ndarray:\n    return median_filter(A,size=size)"}
{"example_id": "134", "output": "from scipy.ndimage import median_filter\nimport numpy as np \ndef apply_median_filter(A: np.ndarray, size:int) -> np.ndarray:\n    return median_filter(A, size=size)"}
{"example_id": "135", "output": "from scipy.ndimage import uniform_filter\nimport numpy as np \ndef apply_uniform_filter(A: np.ndarray, size: int) -> np.ndarray:\n    return uniform_filter(A, size)"}
{"example_id": "136", "output": "from scipy.ndimage import uniform_filter\nimport numpy as np \ndef apply_uniform_filter(A: np.ndarray, size: int) -> np.ndarray:\n    output = np.zeros_like(A)\n    for i in range(A.shape[0]):\n        output[i] = uniform_filter(A[i], size=size)\n    return output"}
{"example_id": "137", "output": "from scipy.ndimage import minimum_filter\nimport numpy as np \ndef apply_minimum_filter(A: np.ndarray, size: int) -> np.ndarray:\n    return minimum_filter(A, size=size)"}
{"example_id": "138", "output": "from scipy.ndimage import minimum_filter\nimport numpy as np \ndef apply_minimum_filter(A: np.ndarray, size: int) -> np.ndarray:\n    return minimum_filter(A, size=size)"}
{"example_id": "139", "output": "from scipy.ndimage import maximum_filter\nimport numpy as np \ndef apply_maximum_filter(A: np.ndarray, size: int) -> np.ndarray:\n    return maximum_filter(A, size=size)"}
{"example_id": "140", "output": "from scipy.ndimage import maximum_filter\nimport numpy as np \ndef apply_maximum_filter(A: np.ndarray, size: int) -> np.ndarray:\n    return maximum_filter(A, size=size)"}
{"example_id": "141", "output": "from scipy.ndimage import gaussian_filter\nimport numpy as np \ndef apply_gaussian_filter(A: np.ndarray, sigma: float) -> np.ndarray:\n    \"\"\"Applies a gaussian filter on batched images (batched in the first dimention),\n    non specified parameters should use the default value\n    \"\"\"\n    B = np.copy(A)\n    for i in range(B.shape[0]):\n        B[i] = gaussian_filter(B[i], sigma=sigma)\n    return B"}
{"example_id": "142", "output": "from scipy.ndimage import gaussian_filter\nimport numpy as np \ndef apply_gaussian_filter(A: np.ndarray, sigma: float) -> np.ndarray:\n    \"\"\"Applies a gaussian filter on batched images (batched in the first dimention),\n    non specified parameters should use the default value\n    \"\"\"\n    output = np.empty_like(A)\n    for i in range(A.shape[0]):\n        output[i] = gaussian_filter(A[i], sigma=sigma)\n    return output"}
{"example_id": "143", "output": "import flask\n\napp = flask.Flask('test')\n\n@app.route('/data')\ndef data(num_set):\n    return flask.jsonify({'numbers': sorted(list(num_set))})\n\ndef eval(app, data_fn, num_set):\n    with app.test_request_context():\n        response = data_fn(num_set)\n        return response.get_data(as_text=False)\n\ndef app_set_up(app: flask.Flask) -> None: \n    pass"}
{"example_id": "144", "output": "import flask\n\napp = flask.Flask('test')\n\n@app.route('/data')\ndef data(num_set):\n    return flask.jsonify({'numbers': sorted(list(num_set))})\n\ndef eval(app, data_fn, num_set):\n    with app.test_request_context():\n        response = data_fn(num_set)\n        return response.get_data(as_text=True)\n\ndef app_set_up(app: flask.Flask) -> None:\n    pass"}
{"example_id": "145", "output": "from flask import Flask, send_file\nfrom io import BytesIO\n\napp1 = Flask(__name__)\n\ndef get_content_disp(app, download_fn):\n    with app.test_request_context():\n        response = download_fn()\n    content_disp = response.headers.get('Content-Disposition')\n    return content_disp\n\n@app1.route('/download')\ndef download():\n    data = BytesIO(b'Hello, World!')\n    attachment_filename = 'hello.txt'\n    return send_file(data, as_attachment=True, download_name=attachment_filename)"}
{"example_id": "146", "output": "from flask import Flask, send_file\nfrom io import BytesIO\n\napp1 = Flask(__name__)\n\ndef get_content_disp(app, download_fn):\n    with app.test_request_context():\n        response = download_fn()\n    content_disp = response.headers.get('Content-Disposition')\n    return content_disp\n\n@app1.route('/download')\ndef download():\n    data = BytesIO(b'Hello, World!')\n    attachment_filename = 'hello.txt'\n    return send_file(data, as_attachment=True, download_name=attachment_filename)"}
{"example_id": "147", "output": "import json\nimport tempfile\nfrom flask import Flask\n\nconfig_data = {{'DEBUG': True, 'SECRET_KEY': 'secret'}}\nwith tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix='.json') as tmp:\n    json.dump(config_data, tmp)\n    tmp.flush()\n    config_file = tmp.name\n\napp = Flask(__name__)\n\ndef load_config(config_file: str) -> None:\n    with open(config_file, 'r') as f:\n        app.config.from_file(f, load=json.load)"}
{"example_id": "148", "output": "import json\nimport tempfile\nfrom flask import Flask\n\nconfig_data = {{'DEBUG': True, 'SECRET_KEY': 'secret'}}\nwith tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix='.json') as tmp:\n    json.dump(config_data, tmp)\n    tmp.flush()\n    config_file = tmp.name\n\napp = Flask(__name__)\n\ndef load_config(config_file: str) -> None:\n    with open(config_file, 'r') as f:\n        app.config.from_file(f, load=json.load)\n\nload_config(config_file)"}
{"example_id": "149", "output": "import flask\nimport werkzeug\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef safe_join_fail_404(base_path: str, sub_path: str) -> str:\n    # Attempt to join the base path and sub path.\n    # If the joined path is outside the base path, raise a 404 error.\n    try:\n        joined_path = werkzeug.utils.safe_join(base_path, sub_path)\n    except werkzeug.exceptions.NotFound:\n        raise error404()\n\n    return joined_path"}
{"example_id": "150", "output": "import flask\nimport werkzeug\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef safe_join_fail_404(base_path: str, sub_path: str) -> str:\n    # Attempt to join the base path and sub path.\n    # If the joined path is outside the base path, raise a 404 error.\n    try:\n        safe_path = werkzeug.utils.safe_join(base_path, sub_path)\n    except werkzeug.exceptions.NotFound:\n        raise error404()\n\n    return safe_path"}
{"example_id": "151", "output": "import flask\nimport datetime\n\ndef convert_timedelta_to_seconds(td: datetime.timedelta) -> int:\n    return int(td.total_seconds())"}
{"example_id": "152", "output": "import flask\nimport datetime\n\ndef convert_timedelta_to_seconds(td: datetime.timedelta):\n    return td.total_seconds()"}
{"example_id": "153", "output": "import jinja2 \nfrom jinja2.runtime import Context\nfrom typing import Callable\n\ndef setup_environment(filtername: str, filter: Callable[[Context, str], str]) -> jinja2.Environment:\n    env = jinja2.Environment()\n    env.filters[filtername] = filter\n    return env\n\ndef solution() -> Callable[[Context, str], str]:\n    def greet(context: Context, name: str) -> str:\n        prefix = context.get('prefix', 'Hello')\n        return f\"{prefix} {name}\"\n    return greet"}
{"example_id": "154", "output": "import jinja2 \nfrom jinja2.runtime import Context\nfrom typing import Callable\n\ndef setup_environment(filtername: str,filter) -> jinja2.Environment:\n    env = jinja2.Environment()\n    env.filters[filtername] = filter\n    return env\n\ndef solution() -> Callable[[Context, str], str]:\n    def greet(context: Context, name: str) -> str:\n        prefix = context.get('prefix', 'Hello')\n        return f\"{prefix} {name}\"\n    return greet"}
{"example_id": "155", "output": "import re\nfrom jinja2 import Environment, evalcontextfilter\nfrom markupsafe import Markup, escape\nfrom jinja2.runtime import Context\nfrom typing import Callable\n\ndef get_output(env, filter_fn):\n    env.filters['nl2br'] = filter_fn\n    template = env.from_string('{{ text | nl2br }}')\n    output = template.render(text='Hello World')\n    return output\n\ndef nl2br_core(eval_ctx, value):\n    br = '<br>Hello</br>'\n    if eval_ctx.autoescape:\n        value = escape(value)\n        br = Markup(br)\n    result = re.sub(r'Hello', br, value)\n    return Markup(result) if eval_ctx.autoescape else result\n\ndef solution() -> Callable[[Context, str], str]:\n    @evalcontextfilter\n    def nl2br(eval_ctx, value):\n        return nl2br_core(eval_ctx, value)\n\n    return nl2br"}
{"example_id": "156", "output": "import re\nfrom jinja2 import Environment, pass_eval_context\nfrom markupsafe import Markup, escape\nfrom typing import Callable, Union\nfrom jinja2.runtime import EvalContext\n\ndef get_output(env, filter_fn):\n    env.filters['nl2br'] = filter_fn\n    template = env.from_string('{{ text | nl2br }}')\n    output = template.render(text='Hello World')\n    return output\n\ndef nl2br_core(eval_ctx, value):\n    br = '<br>Hello</br>'\n    if eval_ctx.autoescape:\n        value = escape(value)\n        br = Markup(br)\n    result = re.sub(r'Hello', br, value)\n    return Markup(result) if eval_ctx.autoescape else result\n\ndef solution() -> Callable[[EvalContext, str], Markup | str]:\n    return pass_eval_context(nl2br_core)"}
{"example_id": "157", "output": "import warnings\nfrom scipy.linalg import det\nimport numpy as np\nwarnings.filterwarnings('error')\n\ndef check_invertibility(matrices: np.ndarray) -> np.bool_:\n    try:\n        results = [det(matrix) != 0 for matrix in matrices]\n    except:\n        results = [False] * len(matrices)\n\n    return np.array(results)"}
{"example_id": "158", "output": "import warnings\nfrom scipy.linalg import det\nimport numpy as np\nwarnings.filterwarnings('error')\n\ndef check_invertibility(matrices : np.ndarray) -> np.bool_ :\n    try:\n        dets = det(matrices)\n    except:\n        return np.array(False)\n\n    is_invertible = np.abs(dets) > 1e-6\n    return np.all(is_invertible)"}
{"example_id": "159", "output": "import numpy as np\nfrom scipy.stats import hmean\n\ndef count_unique_hmean(data: np.ndarray) -> int:\n    # data shape: (n, m)\n    # n: number of arrays\n    # m: number of elements in each array \n    h_means = hmean(data, axis=1, nan_policy='omit')\n    unique_h_means = np.unique(h_means)\n    nan_count = np.count_nonzero(np.isnan(h_means))\n    return len(unique_h_means) + nan_count"}
{"example_id": "160", "output": "import numpy as np\nfrom scipy.stats import hmean\n\ndef count_unique_hmean(data: np.ndarray) -> int:\n    # data shape: (n, m)\n    # n: number of arrays\n    # m: number of elements in each array \n    h_means = hmean(data, axis=1)\n    unique_h_means = np.unique(h_means)\n    nan_count = np.count_nonzero(np.isnan(h_means))\n    return len(unique_h_means) + nan_count"}
{"example_id": "161", "output": "import numpy as np\nfrom scipy.signal import hilbert\n\ndef compute_hilbert_transform(a, b, dtype=np.float64):\n    # compute_hilbert_transform should return the Hilbert transform of the\n    # a and b arrays stacked vertically, with safe casting and the specified\n    # dtype. \n    # raise TypeError if needed\n    ab = np.vstack([a, b])\n    try:\n        ab = ab.astype(dtype, casting = \"safe\")\n    except TypeError:\n        raise TypeError(\"Cannot safely cast the input arrays to the specified dtype.\")\n\n    return hilbert(ab, dtype = dtype)  # Add explicit dtype for hilbert"}
{"example_id": "162", "output": "import numpy as np\nfrom scipy.signal import hilbert\n\ndef compute_hilbert_transform(a: np.ndarray, b: np.ndarray, dtype=np.float64) -> np.ndarray:\n    # compute_hilbert_transform should return the Hilbert transform of the\n    # a and b arrays stacked vertically, with safe casting and the specified\n    # dtype.\n    # raise TypeError if needed\n    stacked = np.vstack([a, b])\n    try:\n        stacked = stacked.astype(dtype)\n        return hilbert(stacked)\n    except TypeError:\n        raise"}
{"example_id": "163", "output": "import flask\nimport json\nimport numpy as np\napp = flask.Flask('test1')\n@app.route('/data')\ndef data(num_arr):\n    return flask.jsonify({'numbers': num_arr})\n\ndef eval(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=False)\n\nclass MyCustomJSONHandler(json.JSONEncoder):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            return obj.tolist()\n        return super().default(obj)\n\napp.json_encoder = MyCustomJSONHandler"}
{"example_id": "164", "output": "import flask\nimport numpy as np\n\napp = flask.Flask('test1')\n\n@app.route('/data')\ndef data():\n    num_arr = np.array([1, 2, np.nan, 2, np.nan, 3])\n    unique_values = []\n    for x in num_arr:\n        if np.isnan(x):\n            if np.isnan(x) not in (np.isnan(y) for y in unique_values):\n                unique_values.append(x)\n        elif x not in unique_values:\n            unique_values.append(x)\n    return flask.jsonify({'numbers': unique_values})\n\ndef eval_app(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn()\n        return response.get_data(as_text=True)\n\nclass MyCustomJSONHandler(flask.json.provider.DefaultJSONProvider):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            return obj.tolist()\n        return super().default(obj)\n\napp.json = MyCustomJSONHandler(app)"}
{"example_id": "165", "output": "import flask\nimport json\nimport numpy as np\nfrom numpy import fastCopyAndTranspose \napp = flask.Flask('test1')\n\n@app.route('/data')\ndef data():\n    num_arr = np.array([[1, 2], [3, 4]])\n    num_arr = fastCopyAndTranspose(num_arr)\n    num_arr = num_arr.flatten()\n    num_arr = num_arr.tolist()\n    return flask.jsonify({'numbers': num_arr})\n\ndef eval(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn()\n        return response.get_data(as_text=False)\n\nclass MyCustomJSONHandler(json.JSONEncoder):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            return obj.tolist()\n        return super().default(obj)"}
{"example_id": "166", "output": "import flask\nimport numpy as np\nimport warnings\nfrom numpy import fastCopyAndTranspose \nwarnings.filterwarnings('error')\n\napp = flask.Flask('test1')\n\n@app.route('/data')\ndef data(num_list):\n    return flask.jsonify({'numbers': num_list})\n\ndef eval_app(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=True)\n\nclass MyCustomJSONHandler(flask.json.provider.DefaultJSONProvider):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            transposed_arr = fastCopyAndTranspose(obj)\n            flattened_list = transposed_arr.flatten().tolist()\n            return flattened_list\n        return super().default(obj)\n\napp.json = MyCustomJSONHandler(app)"}
{"example_id": "167", "output": "import flask\nimport werkzeug\nimport numpy as np\nimport os\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef stack_and_save(arr_list: list[np.ndarray],base_path : str,sub_path : str, casting_policy: str, out_dtype: type) -> tuple[str, np.ndarray]:\n    # Attempt to join the base path and sub path.\n    # If the joined path is outside the base path, raise a 404 error.\n    joined_path = os.path.join(base_path, sub_path)\n    if not joined_path.startswith(base_path):\n        raise error404\n    \n    # stack the arrays in arr_list with the casting policy and the out_dtype.\n    # if the out_dtype is not compatible with the casting policy, raise a TypeError\n    # and out_dtype could be np.float32 or np.float64\n    # casting policy could be safe or unsafe\n    try:\n        if casting_policy == \"safe\":\n            stacked_array = np.stack(arr_list, dtype=out_dtype)\n        elif casting_policy == \"unsafe\":\n            stacked_array = np.stack(arr_list).astype(out_dtype)\n        else:\n            raise ValueError(\"Invalid casting policy.\")\n    except TypeError as e:\n        raise TypeError(\"Invalid casting policy and out_dtype combination.\") from e\n\n    # Return the joined path and the stacked array to be saved \n    return joined_path, stacked_array"}
{"example_id": "168", "output": "import flask\nimport werkzeug\nimport numpy as np\nimport os\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef stack_and_save(arr_list: list[np.ndarray],base_path : str,sub_path : str, casting_policy: str, out_dtype: type) -> tuple[str, np.ndarray]:\n    # Attempt to join the base path and sub path.\n    try:\n        joined_path = os.path.join(base_path, sub_path)\n        # If the joined path is outside the base path, raise a 404 error.\n        if not os.path.commonprefix([base_path, joined_path]).startswith(base_path):\n            raise error404\n    except ValueError as e:\n        raise error404 from e\n\n    # stack the arrays in arr_list with the casting policy and the out_dtype.\n    if casting_policy == \"safe\":\n        try:\n            stacked_array = np.stack(arr_list, dtype=out_dtype)\n        except TypeError as e:\n            raise TypeError(\"Cannot safely cast arrays to specified dtype\") from e\n    elif casting_policy == \"unsafe\":\n        stacked_array = np.stack(arr_list).astype(out_dtype)\n    else:\n        raise ValueError(\"Invalid casting policy. Must be 'safe' or 'unsafe'\")\n\n    return joined_path, stacked_array"}
{"example_id": "169", "output": "import flask\nimport numpy as np\nfrom scipy import linalg\n\napp = flask.Flask('test1')\n@app.route('/data')\ndef data(num_list):\n    return flask.jsonify({'numbers': num_list})\ndef eval_app(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=True)\n\nclass MyCustomJSONHandler(flask.json.provider.DefaultJSONProvider):\n    def default(self, obj):\n        if isinstance(obj, np.ndarray) and len(obj.shape)==3 and obj.shape[-1]==obj.shape[-2] : \n            dets = [linalg.det(m) for m in obj]\n            return np.array(dets).flatten().tolist()\n        return super().default(obj)\napp.json = MyCustomJSONHandler(app)"}
{"example_id": "170", "output": "import flask\nimport json\nimport numpy as np\nfrom scipy import linalg\n\napp = flask.Flask('test1')\n\n\n@app.route('/data')\ndef data(num_arr):\n    return flask.jsonify({'numbers': num_arr})\n\n\ndef eval(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=False)\n\n\nclass MyCustomJSONHandler(json.JSONEncoder):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray) and len(obj.shape) == 3 and obj.shape[-1] == obj.shape[-2]:\n            dets = [linalg.det(m) for m in obj]\n            return np.array(dets).flatten().tolist()\n        return super().default(obj)"}
{"example_id": "171", "output": "import flask\nimport numpy as np\nfrom scipy.stats import hmean\n\napp = flask.Flask('test1')\n\n@app.route('/data')\ndef data(num_list):\n    num_arr = np.array(num_list)\n    result = hmean(num_arr, axis=1, nan_policy='omit')\n    flattened_result = result.flatten().tolist()\n    return flask.jsonify({'numbers': flattened_result})\n\ndef eval_app(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=True)\n\nclass MyCustomJSONHandler(flask.json.provider.DefaultJSONProvider):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            return obj.tolist()\n        return super().default(obj)"}
{"example_id": "172", "output": "import flask\nimport json\nimport numpy as np\nfrom scipy.stats import hmean\n\napp = flask.Flask('test1')\n\n@app.route('/data')\ndef data():\n    num_arr = np.array([[[1, 2, 3, np.nan], [1, 2, np.nan, 4]], [[5, 6, 7, 8], [5, 6, 7, np.nan]]])\n    result = hmean(num_arr, axis=1, nan_policy='omit')\n    flat_list = result.flatten().tolist()\n    return flask.jsonify({'numbers': flat_list})\n\ndef eval(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn()\n        return response.get_data(as_text=False)\n\nclass MyCustomJSONHandler(json.JSONEncoder):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            return obj.tolist()\n        return json.JSONEncoder.default(self, obj)"}
{"example_id": "173", "output": "import flask\nimport werkzeug\nfrom scipy import linalg\nimport numpy as np\nimport os\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef save_exponential(A: np.ndarray, base_path: str, sub_path: str) -> tuple[str, np.ndarray]:\n    # Attempt to join the base path and sub path.\n    # If the joined path is outside the base path, raise a 404 error.\n    save_path = os.path.join(base_path, sub_path)\n    if not save_path.startswith(base_path):\n        raise error404\n\n    # compute the exponential of the batched matrices (m, m) in A (n,m,m)\n    exp_A = linalg.expm(A)\n    # return the save_path and the exponential of the matrices\n    return save_path, exp_A"}
{"example_id": "174", "output": "import flask\nimport werkzeug\nfrom scipy import linalg\nimport numpy as np\nimport os\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef save_exponential(A: np.ndarray, base_path: str, sub_path: str) -> tuple[str, np.ndarray]:\n    # Attempt to join the base path and sub path.\n    # If the joined path is outside the base path, raise a 404 error.\n    save_path = os.path.join(base_path, sub_path)\n    if not save_path.startswith(base_path):\n        raise error404\n\n    # compute the exponential of the batched matrices (m, m) in A (n,m,m)\n    exp_A = linalg.expm(A)\n    # return the save_path and the exponential of the matrices\n    return save_path, exp_A"}
{"example_id": "175", "output": "from typing import List\nfrom sympy.stats import Die, sample\nimport sympy.stats.rv \n\ndef custom_generateRandomSampleDice(dice: sympy.stats.rv.RandomSymbol, X: int) -> List[int]:\n    return sample(dice, size=X)"}
{"example_id": "176", "output": "import sympy\nfrom sympy.matrices.expressions.fourier import DFT\n\ndef custom_computeDFT(n: int) -> sympy.ImmutableDenseMatrix:\n    return DFT(n)"}
{"example_id": "177", "output": "from typing import Tuple\nfrom sympy import laplace_transform, symbols, eye\nimport sympy\n\ndef custom_laplace_transform(t: sympy.Symbol, z: sympy.Symbol) -> Tuple[sympy.Matrix, sympy.Expr, bool]:\n    matrix = eye(2)\n    transformed_matrix = sympy.Matrix([[laplace_transform(matrix[i,j], t, z) for j in range(matrix.cols)] for i in range(matrix.rows)])\n    return transformed_matrix"}
{"example_id": "178", "output": "import sympy.physics.quantum\nimport sympy\n\ndef custom_trace(n: int) -> sympy.physics.quantum.trace.Tr:\n    return sympy.physics.quantum.trace.Tr(n)"}
{"example_id": "179", "output": "import sympy\n\ndef custom_preorder_traversal(expr: sympy.Expr) -> sympy.core.basic.preorder_traversal:\n    return sympy.preorder_traversal(expr)"}
{"example_id": "180", "output": "from sympy.parsing.mathematica import parse_mathematica\nfrom sympy import Function, Max, Min\nimport sympy\n\ndef custom_parse_mathematica(expr : str) -> int:\n    parsed_expr = parse_mathematica(expr)\n    f = Function('F')\n    new_f = lambda *args: Max(*args) * Min(*args)\n    new_expr = parsed_expr.replace(f, new_f)\n    return new_expr"}
{"example_id": "181", "output": "from sympy.physics.mechanics import Body, PinJoint, ReferenceFrame\nimport sympy\n\ndef custom_pinJoint(parent: sympy.physics.mechanics.Body, child: sympy.physics.mechanics.Body) -> sympy.physics.mechanics.PinJoint:\n    # Define the location of the joint in each body's frame\n    parent_joint_location = parent.frame.x\n    child_joint_location = -child.frame.x\n\n    # Create the PinJoint\n    joint = PinJoint(parent.name + \"_\" + child.name, parent, parent_joint_location, child, child_joint_location)\n    return joint"}
{"example_id": "182", "output": "from sympy.physics.mechanics import Body, PinJoint\nimport sympy.physics.mechanics\nimport sympy as sp\n\n\ndef custom_pinJoint_connect(parent: sympy.physics.mechanics.Body, child: sympy.physics.mechanics.Body) -> sympy.physics.mechanics.PinJoint:\n    return PinJoint(parent, child, parent.masscenter + parent.frame.x, -child.frame.x + child.masscenter)"}
{"example_id": "183", "output": "from sympy import *\n\ndef custom_check_carmichael(n: int) -> bool:\n    if not isprime(n):\n        if pow(a, n - 1, n) == 1 for a in range(2, n):\n            return True\n    return False"}
{"example_id": "184", "output": "from sympy import divisor_sigma\n\ndef custom_function(n: int, k : int) -> int:\n    return divisor_sigma(n,k)"}
{"example_id": "185", "output": "from sympy import GF\nfrom sympy.polys.domains.finitefield import FiniteField\n\n\ndef custom_function(K: FiniteField, a: FiniteField) -> int:\n    return int(a.to_integer())"}
{"example_id": "186", "output": "from sympy import symbols\nfrom sympy.physics.mechanics import ReferenceFrame, inertia\nimport sympy.physics.vector\n\ndef custom_generateInertia(N: sympy.physics.vector.frame.ReferenceFrame, Ixx: sympy.Symbol, Iyy: sympy.Symbol, Izz: sympy.Symbol) -> sympy.physics.vector.dyadic.Dyadic:\n    return inertia(N, Ixx, Iyy, Izz)"}
{"example_id": "187", "output": "from sympy import *\nimport sympy\n\ndef custom_function(eq: sympy.Equality) -> sympy.Expr:\n    return eq.lhs - eq.rhs"}
{"example_id": "188", "output": "from sympy import symbols, Poly\nimport sympy\n\nx = symbols('x')\n\ndef custom_generatePolyList(poly: sympy.Poly) -> list[int]:\n    return poly.coeffs()"}
{"example_id": "189", "output": "from sympy import symbols\nfrom sympy.physics.mechanics import (\n    Particle, PinJoint, PrismaticJoint, RigidBody, KanesMethod)\nimport sympy\nimport sympy.physics.mechanics\n\ndef custom_motion(wall: sympy.physics.mechanics.RigidBody, slider: sympy.physics.mechanics.PrismaticJoint, pin: sympy.physics.mechanics.PinJoint) -> sympy.Matrix:\n    # Define generalized coordinates and speeds\n    q = sympy.Matrix(symbols('q1:4'))\n    u = sympy.Matrix(symbols('u1:4'))\n    # Create the KanesMethod object\n    kane = KanesMethod(wall.frame, q_ind=q, u_ind=u, kd_eqs=u.diff() - q.diff())\n    fr, frstar = kane.kanes_equations([], [])\n    # Solve for equations of motion\n    eom = kane.rhs(fr, frstar)\n    return eom"}
{"example_id": "190", "output": "from sympy.physics.mechanics import *\nimport sympy.physics.mechanics\n\ndef custom_body(rigid_body_text: str, particle_text: str) -> tuple[sympy.physics.mechanics.RigidBody, sympy.physics.mechanics.Particle]:\n    inertia = inertiaDyadic(symbols('Ixx Iyy Izz Ixy Iyz Ixz'), symbols('x y z'))\n    m = symbols('m')\n    rigid_body = RigidBody(rigid_body_text, symbols('x y z'), m, inertia, symbols('q'))\n    particle = Particle(particle_text, symbols('x y z'), m)\n    return rigid_body, particle"}
{"example_id": "191", "output": "from sympy import Indexed, Symbol\nimport sympy\nfrom typing import Set\n\ndef custom_symbol(index: Indexed) -> set[Symbol]:\n    return index.free_symbols"}
{"example_id": "192", "output": "from sympy import Matrix\nimport sympy\n\ndef custom_create_matrix(first: sympy.Matrix, second: sympy.Matrix) -> list[int]:\n    return Matrix([first, second])"}
{"example_id": "193", "output": "from sympy import Matrix\nimport sympy\n\ndef custom_function(matrix: sympy.Matrix) -> list[int]:\n    return list(matrix)"}
{"example_id": "194", "output": "from sympy import Matrix\nimport sympy\n\ndef custom_function(matrix: sympy.Matrix) -> dict:\n    if not isinstance(matrix, sympy.SparseMatrix):\n        matrix = sympy.SparseMatrix(matrix)\n    return matrix.todok()"}
{"example_id": "195", "output": "import sympy\n\ndef custom_bottom_up(expr: sympy.Expr, f: callable) -> sympy.Expr:\n    \"\"\"Applies a bottom-up traversal to expr with a lambda function on each node.\"\"\"\n    return expr.replace(\n        lambda x: not x.is_Atom,\n        lambda x: f(x)\n    )"}
{"example_id": "196", "output": "import sympy\n\n\ndef custom_use(expr: sympy.Expr) -> int:\n    return expr.doit()"}
{"example_id": "197", "output": "import sympy\n\ndef custom_is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = int(sympy.sqrt(n))\n    return sqrt_n * sqrt_n == n"}
{"example_id": "198", "output": "import sympy\n\ndef custom_is_prime(n: int) -> bool:\n    return sympy.isprime(n)"}
{"example_id": "199", "output": "import sympy\n\ndef custom_divides(n: int, p: int) -> bool:\n    return n % p == 0"}
{"example_id": "200", "output": "from sympy import Matrix, symbols, Array\nimport sympy\n\ndef custom_array_to_matrix(array: sympy.Array) -> sympy.Matrix:\n    if isinstance(array, sympy.Array):\n        return Matrix(array)\n    elif not isinstance(array, list):\n        raise TypeError(\"Input must be a sympy.Array or a list.\")\n    # Assuming array is a list of lists (matrix)\n    rows = len(array)\n    cols = len(array[0]) if rows > 0 else 0\n\n    if not all(len(row) == cols for row in array):\n        raise ValueError(\"All rows in the matrix must have the same length.\")\n\n    return Matrix(array)"}
{"example_id": "201", "output": "import sympy\n\ndef custom_jacobi_symbols(a: int, n: int) -> int:\n    return sympy.jacobi_symbol(a, n)"}
{"example_id": "202", "output": "import sympy\n\ndef custom_npartitions(n: int) -> int:\n    return sympy.ntheory.partitions.npartitions(n)"}
{"example_id": "203", "output": "import sympy\n\ndef custom_primefactors(n: int) -> int:\n    return len(sympy.primefactors(n))"}
{"example_id": "204", "output": "import sympy\n\ndef custom_prime_counting(n: int) -> int:\n    return sympy.primepi(n)"}
{"example_id": "205", "output": "import sympy\n\ndef custom_totient(n: int) -> int:\n    return sympy.totient(n)"}
{"example_id": "206", "output": "import sympy\n\ndef custom_mobius(n: int) -> int:\n    return sympy.mobius(n)"}
{"example_id": "207", "output": "import sympy\n\ndef custom_legendre(a: int, n: int) -> int:\n    return sympy.legendre_symbol(a, n)"}
{"example_id": "208", "output": "import seaborn as sns\nimport pandas as pd\nfrom matplotlib.axes import Axes\n\ndef custom_pointplot(data: pd.DataFrame) -> Axes:\n    ax = sns.pointplot(data=data, x=\"x\", y=\"y\", linestyles=\"\")\n    return ax"}
{"example_id": "209", "output": "import seaborn as sns\nimport pandas as pd\nfrom matplotlib.axes import Axes\n\ndef custom_pointplot(data: pd.DataFrame) -> Axes:\n    g = sns.pointplot(data=data, x=\"x\", y=\"y\", errwidth=2)\n    return g"}
{"example_id": "210", "output": "import seaborn as sns\nimport pandas as pd\nfrom matplotlib.axes import Axes\n\ndef custom_violinplot(data: pd.DataFrame) -> Axes:\n    ax = sns.violinplot(x=\"x\", y=\"y\", data=data, bw_adjust=1.5)\n    return ax"}
{"example_id": "211", "output": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\n\ndef custom_violinplot(data: pd.DataFrame) -> Axes:\n    ax = sns.violinplot(x=\"x\", y=\"y\", data=data, bw='scott')\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.title(\"Violin Plot of X and Y\")\n    return ax\n\n# Example usage:\ndata = pd.DataFrame({\"x\": [\"A\", \"A\", \"B\", \"B\", \"C\", \"C\"], \"y\": [1, 2, 3, 4, 5, 6]})\nax = custom_violinplot(data)\nplt.show()"}
{"example_id": "212", "output": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\n\n\ndef custom_barplot(data: pd.DataFrame) -> Axes:\n    ax = sns.barplot(x=\"x\", y=\"y\", data=data, errcolor=\"red\", errwidth=2)\n    return ax"}
{"example_id": "213", "output": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\n\n\ndef custom_boxenplot(data: pd.DataFrame, x: str, y: str) -> Axes:\n    \"\"\"Visualizes x and y from a Pandas DataFrame, making width exponential.\"\"\"\n    plt.figure()  # Create a new figure\n    g = sns.boxenplot(data=data, x=x, y=y, width=0.1)\n    width_transformation = 0.8\n    for i, box in enumerate(g.artists):  # Type: ignore\n        box.set_x(box.get_x() - width_transformation * (i))\n        box.set_width(box.get_width() + width_transformation * (i))\n\n    plt.show()\n    return g\n\n# Example usage\ndata = {'category': ['A', 'A', 'B', 'B', 'C', 'C'], 'value': [1, 2, 3, 4, 5, 6]}\ndf = pd.DataFrame(data)\n\ncustom_boxenplot(df, x='category', y='value')"}
{"example_id": "214", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.axes import Axes\n\n\ndef custom_set_axis_labels(data: pd.DataFrame) -> Axes:\n    ax = sns.scatterplot(x='x', y='y', data=data)\n    ax.set_xlabel(\"My X Label\")\n    ax.set_ylabel(\"My Y Label\")\n    return ax\n\n# Example usage:\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 4, 1, 3, 5]})\ncustom_set_axis_labels(df)\nplt.show()"}
{"example_id": "215", "output": "import numpy as np\n\n\ndef custom_iqr(data: np.ndarray) -> float:\n    q75, q25 = np.percentile(data, [75 ,25])\n    return q75 - q25"}
{"example_id": "216", "output": "import time\nimport mitmproxy.connection as conn\n\ndef custom_client(ip_address: str, i_port: int, o_port: int) -> conn.Client:\n    timestamp = time.time()\n    client = conn.Client(\n        peername=(ip_address, i_port),\n        sockname=(\"127.0.0.1\", o_port),\n        timestamp_start = timestamp,\n        timestamp_end = timestamp,\n        timestamp_tls_setup = timestamp\n    )\n    return client"}
{"example_id": "217", "output": "import mitmproxy.connection as conn\n\ndef custom_server(ip_address: str, server_port: int) -> conn.Server:\n    return conn.Server(address=(ip_address, server_port))"}
{"example_id": "218", "output": "import contextlib\n\nclass DummyServerConn:\n    def __init__(self, sockname):\n        self.sockname = sockname\n\nclass ConnectionLogger:\n    pass\n        \n\ndef solution() -> None:\n    def server_connected(server_conn):\n        print(f\"Server connected with local address {server_conn.sockname}\")\n\n    ConnectionLogger.server_connected = server_connected\n\n    # Example usage with DummyServerConn\n    dummy_conn = DummyServerConn(sockname=('127.0.0.1', 8080))\n    ConnectionLogger.server_connected(dummy_conn)"}
{"example_id": "219", "output": "import contextlib\n\nclass DummyServerConn:\n    def __init__(self, sockname):\n        self.sockname = sockname\n\nclass ConnectionLogger:\n    pass\n        \n\ndef solution() -> None:\n    def serverconnect(server_conn):\n        print(f\"Server connect to local address {server_conn.sockname}\")\n\n    ConnectionLogger.serverconnect = serverconnect\n\n    # Example usage with DummyServerConn\n    dummy_conn = DummyServerConn(('127.0.0.1', 8080))\n    ConnectionLogger.serverconnect(dummy_conn)"}
{"example_id": "220", "output": "import contextlib\n\nclass DummyServerConn:\n    def __init__(self, sockname):\n        self.sockname = sockname\n\nclass ConnectionLogger:\n    pass\n        \n\ndef solution() -> None:\n    def server_disconnected(server_conn):\n        print(f\"Server disconnected with local address {server_conn.sockname}\")\n\n    ConnectionLogger.server_disconnected = server_disconnected\n\n    # Example usage with DummyServerConn\n    conn_logger = ConnectionLogger()\n    dummy_conn = DummyServerConn(('127.0.0.1', 8080))\n    conn_logger.server_disconnected(dummy_conn)"}
{"example_id": "221", "output": "import contextlib\n\nclass DummyClientConn:\n    def __init__(self, peername):\n        self.peername = peername\n\nclass ConnectionLogger:\n    pass\n\ndef solution() -> None:\n    def clientconnected(client_conn):\n        print(f\"Client connected: {client_conn.peername}\")\n\n    ConnectionLogger.clientconnected = clientconnected\n\n    # Example usage:\n    conn_logger = ConnectionLogger()\n    dummy_conn = DummyClientConn((\"127.0.0.1\", 8080))\n    conn_logger.clientconnected(dummy_conn)\n\nsolution()"}
{"example_id": "222", "output": "import contextlib\n\nclass DummyClientConn:\n    def __init__(self, peername):\n        self.peername = peername\n\nclass ConnectionLogger:\n    pass\n\ndef solution() -> None:\n    def clientdisconnected(self, client_conn):\n        print(f\"Client disconnected: {client_conn.peername}\")\n\n    ConnectionLogger.clientdisconnected = clientdisconnected"}
{"example_id": "223", "output": "import contextlib\n\nclass DummyLogEntry:\n    def __init__(self, msg):\n        self.msg = msg\n\nclass MyAddon:\n    pass\n\ndef solution() -> None:\n    def log(self, entry: DummyLogEntry):\n        print(f\"{entry.msg}\")\n\n    MyAddon.log = log\n\n\nsolution()\n\n# Example usage:\nentry = DummyLogEntry(\"Hello, world!\")\naddon = MyAddon()\naddon.log(entry)"}
{"example_id": "224", "output": "import types\n\nclass DummyCert:\n    def __init__(self, hostname):\n        self.cert_pem = f\"Dummy certificate for {hostname}\"\n        self.key_pem = f\"Dummy key for {hostname}\"\n\nclass DummyCA:\n    def __init__(self, path):\n        self.path = path\n\n    def get_cert(self, hostname):\n        return DummyCert(hostname)\n\ncerts = types.ModuleType(\"certs\")\ncerts.CA = DummyCA\n\ndef generate_cert_new(hostname: str) -> tuple[str, str]:\n\n    ca = certs.CA(\"dummy/path\")\n    cert_obj = ca.get_cert(hostname)\n    return cert_obj.cert_pem, cert_obj.key_pem"}
{"example_id": "225", "output": "from mitmproxy.http import Headers\n\ndef custom_function(header_name: bytes, initial_value: bytes) -> Headers:\n    return Headers([(header_name, initial_value)])"}
{"example_id": "226", "output": "import pytest\n\n@pytest.hookimpl(tryfirst=False)\ndef pytest_runtest_call():\n    pass"}
{"example_id": "227", "output": "import pytest\n\n@pytest.hookimpl(hookwrapper=True)\ndef pytest_runtest_setup():\n    yield"}
{"example_id": "228", "output": "import pytest\nimport pathlib\n\n@pytest.hookimpl()\ndef pytest_ignore_collect(\n    path: pathlib.Path,\n):\n    pass"}
{"example_id": "229", "output": "import pytest\nimport pathlib\n\n@pytest.hookimpl()\ndef pytest_collect_file(\n    file_path: pathlib.Path\n):\n    pass"}
{"example_id": "230", "output": "import pytest\nimport pathlib\n\n@pytest.hookimpl()\ndef pytest_pycollect_makemodule(\n    path: pathlib.Path\n):\n    pass"}
{"example_id": "231", "output": "import pytest\nimport pathlib\n\n@pytest.hookimpl()\ndef pytest_report_header(\n    config_path: pathlib.Path,\n):\n    pass"}
{"example_id": "232", "output": "import pytest\nimport pathlib\n\n@pytest.hookimpl()\ndef pytest_report_collectionfinish(\n    config: pytest.Config,\n    items: list[pytest.Item],\n    startdir: pathlib.Path,\n) -> None:\n    pass"}
{"example_id": "233", "output": "import pytest\n\nclass CustomItem(pytest.Item):\n    def __init__(\n        self,\n        name,\n        parent,\n        *,\n        additional_arg,\n    ):\n        super().__init__(name, parent)\n        self.additional_arg = additional_arg"}
{"example_id": "234", "output": "import pytest\n\ndef foo(a, b):\n    return (10 * a - b + 7) // 3\n\n@pytest.mark.parametrize(\n    [\"a\", \"b\", \"result\"],\n    [\n        [1, 2, 5],\n        [2, 3, 8],\n        [5, 3, 18],\n    ],\n)\ndef test_foo(a: int, b: int, result: int) -> None:\n    assert foo(a, b) == result"}
{"example_id": "235", "output": "import pytest\n\n@pytest.fixture\ndef my_fixture():\n    return \"hello\"\n\ndef test_fixture(my_fixture):\n    assert my_fixture == \"hello\""}
{"example_id": "236", "output": "import pytest\n\n@pytest.mark.parametrize(\"input, expected\", [(2, 4)])\ndef test_square(input, expected):\n    assert input * input == expected"}
{"example_id": "237", "output": "from falcon import stream\n\nimport io\nclass DummyRequest:\n    def __init__(self, data: bytes):\n        self.stream = io.BytesIO(data)\n        self.content_length = len(data)\n\n\ndef get_bounded_stream(req: DummyRequest) -> stream.BoundedStream:\n    return stream.BoundedStream(req.stream, req.content_length)"}
{"example_id": "238", "output": "import falcon\n\n\ndef custom_body(resp: falcon.Response, info: str) -> falcon.Response:\n    resp.text = info\n    return resp"}
{"example_id": "239", "output": "import falcon\nfrom falcon import HTTPStatus\n\n\ndef custom_body(status: falcon.HTTPStatus, info:str) -> falcon.HTTPStatus:\n    status.text = info\n    return status"}
{"example_id": "240", "output": "from falcon import Response\n\ndef custom_body_length(resp: Response, info):\n    resp.content_length = len(info)\n    return resp"}
{"example_id": "241", "output": "from falcon import Response\nimport falcon\n\ndef custom_data(resp: falcon.Response, info: str) -> str:\n    resp.data = info.encode('utf-8')\n    return resp.data.decode('utf-8')"}
{"example_id": "242", "output": "import falcon\nfrom falcon import HTTPError\n\n\ndef custom_http_error(title: str, description: str) -> bytes:\n    raise HTTPError(status=falcon.HTTP_400, title=title, description=description)"}
{"example_id": "243", "output": "from typing import Dict, Any\nimport falcon.testing as testing\n\ndef custom_environ(info: str) -> Dict[str, Any]:\n    env = testing.create_environ(root_path=info)\n    return env"}
{"example_id": "244", "output": "from falcon.stream import BoundedStream\n\ndef custom_writable(bstream: BoundedStream) -> bool:\n    return bstream.writable"}
{"example_id": "245", "output": "import falcon.app_helpers as app_helpers\n\nclass ExampleMiddleware:\n    def process_request(self, req, resp):\n        pass\n\ndef custom_middleware_variable() -> list[ExampleMiddleware]:\n    return [ExampleMiddleware()]"}
{"example_id": "246", "output": "from typing import Dict, Any\nimport falcon.testing as testing\n\ndef custom_environ(v: str) -> Dict[str, Any]:\n    env = testing.create_environ()\n    env['SERVER_PROTOCOL'] = 'HTTP/1.1'\n    return env"}
{"example_id": "247", "output": "from falcon import Response\nimport falcon\n\ndef custom_append_link(resp: falcon.Response, link: str, rel: str) -> falcon.Response:\n    resp.append_link(link, rel)\n    return resp"}
{"example_id": "248", "output": "import falcon\n\ndef custom_falcons() -> falcon.App:\n    app = falcon.App()\n    return app"}
{"example_id": "249", "output": "from falcon import Response\nimport falcon\n\n\ndef custom_link(resp: Response, link_rel: str, link_href: str) -> falcon.Response:\n    resp.append_header('Link', f'<{link_href}>; rel=\"{link_rel}\"')\n    return resp"}
{"example_id": "250", "output": "import json\nfrom falcon import Request\nfrom falcon.testing import create_environ\n\ndef custom_media(req: Request) -> dict[str, str]:\n    return req.get_media()"}
{"example_id": "251", "output": "from typing import NoReturn\nimport falcon \n\n\ndef raise_too_large_error(error_message: str) -> NoReturn:\n    raise falcon.HTTPRequestEntityTooLarge(title=\"Request Entity Too Large\", description=error_message)"}
{"example_id": "252", "output": "from falcon.uri import parse_query_string\n\n\ndef custom_parse_query(qs : str) -> dict:\n    return parse_query_string(qs, keep_blank_qs_values=True)"}
{"example_id": "253", "output": "from falcon import Request\nimport json\n\ndef custom_get_param(req: Request):\n    foo_param = req.get_param('foo')\n    if foo_param:\n        try:\n            return json.loads(foo_param)\n        except json.JSONDecodeError:\n            return None\n    return None"}
{"example_id": "254", "output": "import falcon\nimport logging\nfrom typing import Any, Dict\n\ndef handle_error(req: falcon.Request, resp: falcon.Response, ex: Exception, params: Dict[str, Any]) -> None:\n    req_path = req.path\n    description = ex.__class__.__name__ + ': ' + str(ex)\n    error_details = {\n        'message': 'An internal server error occurred',\n        'description': description,\n        'path': req_path,\n        'params': params\n    }\n\n    resp.media = error_details\n    resp.status = falcon.HTTP_500"}
{"example_id": "255", "output": "from falcon import Request\n\ndef custom_get_dpr(req: Request) -> int:\n    dpr = req.get_param_as_int(\"dpr\", min=0, max=3)\n    return dpr"}
{"example_id": "256", "output": "from falcon import Request\nfrom falcon.util.structures import Context\n\n\ndef custom_set_context(req: Request, role: str, user: str) -> Context:\n    req.context[\"role\"] = role\n    req.context[\"user\"] = user\n    return req.context"}
{"example_id": "257", "output": "class CustomRouter:\n    def __init__(self):\n        self.routes = {}\n\n        \ndef solution() -> None:\n    from falcon.routing import map_http_methods\n\n    def add_route(\n        self,\n        uri_template: str,\n        resource: object,\n        **kwargs,\n    ) -> dict:\n        method_map = map_http_methods(resource, uri_template, **kwargs)\n        self.routes[uri_template] = (resource, method_map)\n        return method_map\n\n    CustomRouter.add_route = add_route"}
{"example_id": "258", "output": "import asyncio\nimport os\nimport signal\nfrom typing import Callable\n\ndef custom_add_callback_from_signal(callback: Callable[[], None], signum: int) -> None:\n    loop = asyncio.get_event_loop()\n    loop.add_signal_handler(signum, callback)"}
{"example_id": "259", "output": "import tornado.wsgi\nimport tornado.httpserver\nimport tornado.ioloop\nimport tornado.httpclient\nimport concurrent.futures\nimport socket\n\nfrom typing import Callable, Dict, List, Any, Iterable\n\nWSGIAppType = Callable[\n    [Dict[str, Any], Callable[[str, List[tuple[str, str]]], None]],\n    Iterable[bytes]\n]\n\n# A simple WSGI application that returns \"Hello World\"\ndef simple_wsgi_app(environ, start_response):\n    status = \"200 OK\"\n    headers = [(\"Content-Type\", \"text/plain\")]\n    start_response(status, headers)\n    return [b\"Hello World\"]\n\ndef find_free_port():\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n        sock.bind((\"\", 0))\n        return sock.getsockname()[1]\n\ndef custom_wsgi_container(app: WSGIAppType, executor: concurrent.futures.Executor) -> tornado.wsgi.WSGIContainer:\n    return tornado.wsgi.WSGIContainer(app, executor=executor)"}
{"example_id": "260", "output": "import tornado.ioloop\nimport tornado.web\nimport tornado.httpserver\nimport tornado.websocket\nimport tornado.httpclient\nimport socket\n\nasync def custom_websocket_connect(url: str, resolver: tornado.netutil.Resolver) -> tornado.websocket.WebSocketClientConnection:\n    return await tornado.websocket.websocket_connect(url, resolver=resolver)"}
{"example_id": "261", "output": "import tornado.web\nimport tornado.ioloop\nimport tornado.httpserver\nimport tornado.httpclient\nimport socket\nimport unittest\n\nCOOKIE_SECRET = \"MY_SECRET_KEY\"\n\nclass GetCookieHandler(tornado.web.RequestHandler):\n    def get(self) -> None:\n        cookie_value = self.get_signed_cookie(\"mycookie\", secret=COOKIE_SECRET)\n        self.write(cookie_value)\n\nclass TestSignedCookie(unittest.TestCase):\n    def setUp(self):\n        self.app = tornado.web.Application([(r\"/\", GetCookieHandler)], cookie_secret=COOKIE_SECRET)\n        self.server = tornado.httpserver.HTTPServer(self.app)\n        sock, port = tornado.testing.bind_unused_port()\n        self.server.add_sockets([sock])\n        self.port = port\n        self.client = tornado.httpclient.AsyncHTTPClient()\n\n    def tearDown(self):\n        self.server.stop()\n        self.io_loop.close()\n\n    def test_signed_cookie(self):\n        # Create a signed cookie\n        test_value = \"test_cookie_value\"\n        signed_cookie = self.app.settings['cookie_secret'].sign(b\"mycookie=\" + test_value.encode())\n\n        # Make a request with the cookie and check the response\n        url = f\"http://localhost:{self.port}/\"\n        headers = {\"Cookie\": f\"mycookie={signed_cookie.decode()}\"}\n\n        response = self.client.fetch(url, headers=headers, raise_error=False)\n        self.assertEqual(response.code, 200)\n        self.assertEqual(response.body.decode(), test_value)\n\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"example_id": "262", "output": "import tornado.web\nimport tornado.ioloop\nimport tornado.httpserver\nimport tornado.httpclient\nimport socket\nimport unittest\n\nCOOKIE_SECRET = \"MY_SECRET_KEY\"\n\nclass SetCookieHandler(tornado.web.RequestHandler):\n    def get(self) -> None:\n        self.set_signed_cookie(\"mycookie\", \"testvalue\", secret=COOKIE_SECRET)\n        self.finish()\n\nclass TestSetCookie(unittest.TestCase):\n    def setUp(self):\n        self.app = tornado.web.Application([(r\"/\", SetCookieHandler)], cookie_secret=COOKIE_SECRET)\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)\n        sock.bind((\"127.0.0.1\", 0))\n        self.port = sock.getsockname()[1]\n        sock.close()\n        self.server = tornado.httpserver.HTTPServer(self.app)\n        self.server.listen(self.port)\n        self.client = tornado.httpclient.AsyncHTTPClient()\n\n    def tearDown(self):\n        self.server.stop()\n        self.client.close()\n\n    async def test_cookie(self):\n        response = await self.client.fetch(f\"http://localhost:{self.port}/\")\n        self.assertEqual(response.code, 200)\n        self.assertIn(\"Set-Cookie\", response.headers)\n        cookie_header = response.headers.get(\"Set-Cookie\")\n        self.assertIn(\"mycookie=testvalue\", cookie_header)  # Check both name and value are present\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"example_id": "263", "output": "import asyncio\nimport tornado.auth\nimport asyncio\n\nclass DummyAuth(tornado.auth.OAuth2Mixin):\n    async def async_get_user_info(self, access_token: str) -> dict[str, str]:\n        return {\"user_info\": \"dummy\", \"access_token\": access_token}"}
{"example_id": "264", "output": "import tornado.httputil\n\nclass DummyConnection:\n    def __init__(self):\n        self.buffer = []\n\n    def write(self, chunk):\n        self.buffer.append(chunk)\n\nreq = tornado.httputil.HTTPServerRequest(method=\"GET\", uri=\"/\")\nreq.connection = DummyConnection()\n\ndef custom_write(request: tornado.httputil.HTTPServerRequest, text: str) -> list[str]:\n    request.connection.write(text)\n    return request.connection.buffer"}
{"example_id": "265", "output": "import tornado.ioloop\n\ndef custom_get_ioloop() -> tornado.ioloop.IOLoop:\n    return tornado.ioloop.IOLoop.current()"}
{"example_id": "266", "output": "import plotly.graph_objects as go\n\n\ndef custom_fig(x_data: list[str], y_data: list[int]) -> go.Figure:\n    fig = go.Figure(data=[go.Bar(x=x_data, y=y_data)])\n    return fig"}
{"example_id": "267", "output": "import plotly.graph_objects as go\n\ndef custom_fig(fig: go.Figure) -> go.Figure:\n    fig.add_annotation(\n        x=0.5,\n        y=0.5,\n        xref=\"paper\",\n        yref=\"paper\",\n        text=\"Example Annotation\",\n        showarrow=False\n    )\n    return fig"}
{"example_id": "268", "output": "import plotly.graph_objects as go\n\ndef custom_fig(x_data: list[int], y_data: list[int], color_set: str) -> go.Figure:\n    fig = go.Figure(data=go.Scatter(\n        x=x_data,\n        y=y_data,\n        error_y=dict(\n            type='data',\n            array=[1, 2, 3],  # Replace with your actual error values\n            color=color_set,\n            thickness=1.5,\n            width=3\n        ),\n        mode='markers',\n    ))\n    return fig"}
{"example_id": "269", "output": "import plotly.graph_objects as go\n\ndef custom_fig(fig: go.Figure) -> go.Figure:\n    fig.update_layout(scene_camera_eye=dict(x=1.25, y=1.25, z=1.25))\n    return fig"}
{"example_id": "270", "output": "import plotly\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\ndef custom_make_subplots(rows: int, cols: int) -> go.Figure:\n    fig = make_subplots(rows=rows, cols=cols)\n    return fig"}
{"example_id": "271", "output": "import plotly\nimport plotly.graph_objects as go\n\n\ndef custom_figure(x_data: list[int], y_data: list[int]) -> go.Figure:\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=x_data, y=y_data, mode=\"markers\"))\n    return fig"}
{"example_id": "272", "output": "import plotly\ndef custom_chart_studio_usage() -> bool:\n    try:\n        plotly.offline.init_notebook_mode()\n        fig = {'data': [{'y': [1, 2, 1]}], 'layout': {'title': 'Offline Plotly Chart'}}\n        plotly.offline.iplot(fig)\n        return True\n    except Exception as e:\n        print(f\"Error: {e}\")\n        return False"}
{"example_id": "273", "output": "import plotly\n\ndef custom_api_usage() -> str:\n    return plotly.offline.offline.__name__"}
{"example_id": "274", "output": "import plotly.graph_objs as go\n\ndef custom_scatter(custom_color: str) -> go.Figure:\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=[0], y=[0], mode='markers', marker=dict(color=custom_color)))\n    return fig"}
{"example_id": "275", "output": "import numpy as np\nimport librosa\nfrom scipy.spatial.distance import cdist\n\ndef compute_dtw(X: np.ndarray, Y: np.ndarray) -> np.ndarray:\n    C = cdist(X.T, Y.T)\n    D = np.zeros((C.shape[0] + 1, C.shape[1] + 1))\n    D[1:, 0] = np.inf\n    D[0, 1:] = np.inf\n\n    for i in range(C.shape[0]):\n        for j in range(C.shape[1]):\n            D[i + 1, j + 1] = C[i, j] + min(D[i, j + 1], D[i + 1, j], D[i, j])\n\n    return D[1:, 1:]"}
{"example_id": "276", "output": "import numpy as np\nimport librosa\nfrom scipy.spatial.distance import cdist\n\ndef compute_dtw(X: np.ndarray, Y: np.ndarray) -> np.ndarray:\n    # Compute the cost matrix between X and Y\n    C = cdist(X.T, Y.T)\n\n    # Initialize the accumulated cost matrix D\n    D = np.zeros((C.shape[0] + 1, C.shape[1] + 1))\n    D[1:, 0] = np.inf\n    D[0, 1:] = np.inf\n\n    # Compute the accumulated cost matrix\n    for i in range(1, D.shape[0]):\n        for j in range(1, D.shape[1]):\n            D[i, j] = C[i - 1, j - 1] + min(D[i - 1, j], D[i, j - 1], D[i - 1, j - 1])\n\n    return D"}
{"example_id": "277", "output": "import librosa\nimport numpy as np\n\ndef compute_rms(y: np.ndarray) -> np.float32:\n    S, phase = librosa.magphase(librosa.stft(y))\n    rms = librosa.feature.rms(S=S)\n    return rms"}
{"example_id": "278", "output": "import librosa\nimport numpy as np\n\ndef compute_rms(y: np.ndarray) -> np.float32:\n    rms = np.sqrt(np.mean(y**2))\n    return  np.float32(rms)"}
{"example_id": "279", "output": "import librosa\nimport numpy as np\n\ndef compute_fill_diagonal(mut_x: np.ndarray, radius: float) -> np.ndarray:\n    length = mut_x.shape[0]\n    width = mut_x.shape[1]\n    band_rad = int(np.round(radius * min(length, width)))\n    for i in range(length):\n        for j in range(width):\n            if abs(i - j) > band_rad:\n                mut_x[i, j] = 0\n    return mut_x"}
{"example_id": "280", "output": "import librosa\nimport numpy as np\n\ndef compute_fill_diagonal(mut_x: np.ndarray, radius: float) -> np.ndarray:\n    width = int(mut_x.shape[1] * radius + 1)\n    for i in range(mut_x.shape[0]):\n        for j in range(max(0, i - width + 1), min(mut_x.shape[1], i + width)):\n            if i != j:\n                mut_x[i, j] = 0\n\n    return mut_x"}
{"example_id": "281", "output": "import librosa\nimport numpy as np\nfrom typing import Tuple\n\ndef compute_extraction(y: np.ndarray, sr: int) -> Tuple[np.ndarray, bool]:\n    melspectrogram = librosa.feature.melspectrogram(y=y, sr=sr)\n    is_float64 = melspectrogram.dtype == np.float64\n    return melspectrogram, is_float64"}
{"example_id": "282", "output": "import librosa\nimport numpy as np\nfrom typing import Tuple\n\ndef compute_extraction(y: np.ndarray, sr: int) -> Tuple[np.ndarray, bool]:\n    melspectrogram = librosa.feature.melspectrogram(y=y, sr=sr)\n    is_float32 = melspectrogram.dtype == np.float32\n    return melspectrogram, is_float32"}
{"example_id": "283", "output": "import librosa\nimport numpy as np\nimport soundfile as sf \n\n\n# Save the stream in variable stream. Save each stream block with the array stream_blocks\ndef compute_stream(y, sr, n_fft, hop_length):\n    stream_blocks = []\n    block_size = hop_length * 2\n    for i in range(0, len(y), block_size):\n        block = y[i:i + block_size]\n        if len(block) < block_size:\n            block = np.pad(block, (0, block_size - len(block)), 'constant')\n        stream_blocks.append(librosa.stft(block, n_fft=n_fft, hop_length=hop_length))\n    return stream_blocks"}
{"example_id": "284", "output": "import librosa\nimport numpy as np\n\n# Save the stream in variable stream. Save each stream block with the array stream_blocks\ndef compute_stream(y, sr, n_fft, hop_length):\n    stream = librosa.stream(y, block_length=1, frame_length=n_fft, hop_length=hop_length)\n    stream_blocks = []\n    for y_block in stream:\n        stream_blocks.append(y_block)\n\n    return stream, stream_blocks"}
{"example_id": "285", "output": "import librosa\nimport numpy as np\nfrom librosa import istft, stft\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_griffinlim(y: np.ndarray, sr: int, S: np.ndarray, random_state: int, n_iter: int, hop_length: Optional[int], win_length: Optional[int], window: str, center: bool, dtype: DTypeLike, length: Optional[int], pad_mode: str, n_fft: int) -> np.ndarray:\n    \"\"\"\n    Compute waveform from a linear scale magnitude spectrogram using the Griffin-Lim transformation.\n\n    Parameters:\n    y: Audio timeseries.\n    sr: Sampling rate.\n    S: short-time Fourier transform magnitude matrix.\n    random_state: Random state for the random number generator.\n    n_iter: Number of iterations.\n    hop_length: Hop length.\n    win_length: Window length.\n    window: Window function.\n    center: If True, the signal y is padded so that frame t is centered at y[t * hop_length]. If False, then frame t begins at y[t * hop_length].\n    dtype: Data type of the output.\n    length: Length of the output signal.\n    pad_mode: Padding mode.\n    n_fft: FFT size.\n\n    Returns:\n        The Griffin-Lim waveform.        \n    \"\"\"\n    rng = np.random.RandomState(seed=random_state)\n\n    if hop_length is None:\n        hop_length = n_fft // 4\n\n    if win_length is None:\n        win_length = n_fft\n\n    angles = np.exp(2j * np.pi * rng.rand(*S.shape))\n    y = istft(S * angles, hop_length=hop_length, win_length=win_length, window=window, center=center, dtype=dtype, length=length)\n\n    for i in range(n_iter):\n        angles = np.exp(1j * np.angle(stft(y, n_fft=n_fft, hop_length=hop_length, win_length=win_length, window=window, center=center, pad_mode=pad_mode)))\n        y = istft(S * angles, hop_length=hop_length, win_length=win_length, window=window, center=center, dtype=dtype, length=length)\n\n    return y"}
{"example_id": "286", "output": "import librosa\nimport numpy as np\nfrom librosa import istft, stft\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_griffinlim(y: np.ndarray, sr: int, S: np.ndarray, random_state: int, n_iter: int, hop_length: Optional[int], win_length: Optional[int], window: str, center: bool, dtype: DTypeLike, length: Optional[int], pad_mode: str, n_fft: int) -> np.ndarray:\n    rng = np.random.RandomState(seed=random_state)\n\n    if hop_length is None:\n        hop_length = n_fft // 4\n\n    angles = np.exp(2j * np.pi * rng.rand(*S.shape))\n\n    if win_length is None:\n        win_length = n_fft\n\n    y = istft(S * angles, hop_length=hop_length, win_length=win_length, window=window, center=center, dtype=dtype, length=length)\n\n    for i in range(n_iter - 1):\n        angles = np.exp(1j * np.angle(stft(y, n_fft=n_fft, hop_length=hop_length, win_length=win_length, window=window, center=center, pad_mode=pad_mode)))\n        y = istft(S * angles, hop_length=hop_length, win_length=win_length, window=window, center=center, dtype=dtype, length=length)\n\n    return y"}
{"example_id": "287", "output": "import librosa\nimport numpy as np\n\ndef compute_lpc_coef(y: np.ndarray, sr: int, order: int) -> np.ndarray:\n    \"\"\"\n    Compute the Linear Prediction Coefficients of an audio signal.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        order: Order of the linear filter.\n\n    Returns:\n        LP prediction error coefficients, i.e. filter denominator polynomial.\n    \"\"\"\n    \n    A = librosa.lpc(y, order)\n    return A"}
{"example_id": "288", "output": "import librosa\nimport numpy as np\n\ndef compute_lpc_coef(y: np.ndarray, sr: int, order: int) -> np.ndarray:\n    \"\"\"\n    Compute the Linear Prediction Coefficients of an audio signal.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        order: Order of the linear filter.\n\n    Returns:\n        LP prediction error coefficients, i.e. filter denominator polynomial.\n    \"\"\"\n    A = librosa.core.lpc(y, order)\n    return A"}
{"example_id": "289", "output": "import librosa\nimport numpy as np\nfrom librosa.core.spectrum import stft\n\ndef compute_fourier_tempogram(oenv: np.ndarray, sr: int, hop_length: int) -> np.ndarray:\n    \"\"\"\n    Compute the Fourier tempogram: the short-time Fourier transform of the onset strength envelope.\n\n    Parameters:\n       oenv: The onset strength envelope.\n       sr: The sampling rate of the audio signal in Hertz.\n       hop_length: The number of samples between successive frames.\n\n    Returns:\n       The computed Fourier tempogram.\n    \"\"\"\n    return stft(oenv, hop_length=hop_length)"}
{"example_id": "290", "output": "import librosa\nimport numpy as np\n\ndef compute_fourier_tempogram(oenv: np.ndarray, sr: int, hop_length: int) -> np.ndarray:\n    \"\"\"\n    Compute the Fourier tempogram: the short-time Fourier transform of the onset strength envelope.\n\n    Parameters:\n       oenv: The onset strength envelope.\n       sr: The sampling rate of the audio signal in Hertz.\n       hop_length: The number of samples between successive frames.\n\n    Returns:\n       The computed Fourier tempogram.\n    \"\"\"\n    # librosa.feature.fourier_tempogram() requires librosa>=0.8, which is not available here.\n    # This function computes a simple Fourier tempogram for demonstration.\n    n_fft = 2048  # Adjust FFT size as needed\n    return np.abs(librosa.stft(oenv, n_fft=n_fft, hop_length=hop_length))"}
{"example_id": "291", "output": "import librosa\nimport numpy as np\nfrom librosa.core.spectrum import stft, istft\nfrom typing import Optional\n\n\ndef compute_plp(\n    y: np.ndarray,\n    sr: int,\n    hop_length: int,\n    win_length: int,\n    tempo_min: Optional[float],\n    tempo_max: Optional[float],\n    onset_env: np.ndarray\n) -> np.ndarray:\n    \"\"\"\n    Compute the Predominant Local Pulse (PLP) of an audio signal.\n    \n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        hop_length: The number of samples between successive frames.\n        win_length: The length (in samples) of the analysis window.\n        tempo_min: The minimum tempo (in BPM) for consideration.\n        tempo_max: The maximum tempo (in BPM) for consideration.\n        onset_env: The onset envelope of the audio signal.\n        \n    Returns:\n        The computed PLP (Predominant Local Pulse) values.\n    \"\"\"\n    onset_bt = librosa.beat.beat_track(onset_envelope=onset_env, sr=sr, hop_length=hop_length)\n    return onset_bt"}
{"example_id": "292", "output": "import librosa\nimport numpy as np\nfrom librosa.core.spectrum import stft, istft\nfrom typing import Optional\n\n\ndef compute_plp(\n    y: np.ndarray,\n    sr: int,\n    hop_length: int,\n    win_length: int,\n    tempo_min: Optional[float],\n    tempo_max: Optional[float],\n    onset_env: np.ndarray\n) -> np.ndarray:\n    \"\"\"\n    Compute the Predominant Local Pulse (PLP) of an audio signal.\n    \n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        hop_length: The number of samples between successive frames.\n        win_length: The length (in samples) of the analysis window.\n        tempo_min: The minimum tempo (in BPM) for consideration.\n        tempo_max: The maximum tempo (in BPM) for consideration.\n        onset_env: The onset envelope of the audio signal.\n        \n    Returns:\n        The computed PLP (Predominant Local Pulse) values.\n    \"\"\"\n    onset_frames = librosa.util.peak_pick(onset_env, pre_max=3, post_max=3, pre_avg=3, post_avg=3, delta=0.5, wait=10)\n    \n    pulse = librosa.beat.plp(y=y, sr=sr, onset_envelope=onset_env, hop_length=hop_length, win_length=win_length, tempo_min=tempo_min, tempo_max=tempo_max)\n    \n    return pulse"}
{"example_id": "293", "output": "import librosa\nimport numpy as np\n\ndef compute_times_like(y: np.ndarray, sr: int, hop_length: int, D: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute the times vector of a spectrogram.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        hop_length: The number of samples between successive frames.\n        D: The spectrogram.\n\n    Returns:\n        The computed times vector.\n    \"\"\"\n    n_frames = D.shape[1]\n    times = librosa.frames_to_time(np.arange(n_frames), sr=sr, hop_length=hop_length)\n    return times"}
{"example_id": "294", "output": "import librosa\nimport numpy as np\n\ndef compute_times_like(y: np.ndarray, sr: int, hop_length: int, D: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute the times vector of a spectrogram.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        hop_length: The number of samples between successive frames.\n        D: The spectrogram.\n\n    Returns:\n        The computed times vector.\n    \"\"\"\n    n_frames = D.shape[1]\n    times = librosa.frames_to_time(np.arange(n_frames), sr=sr, hop_length=hop_length)\n    return times"}
{"example_id": "295", "output": "import librosa\nimport numpy as np\n\ndef compute_samples_like(y: np.ndarray, sr: int, D: np.ndarray, hop_length: int) -> np.ndarray:\n    \"\"\"\n    Compute the samples vector of a spectrogram.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        D: The spectrogram.\n    \n    Returns:\n        The computed samples vector.\n    \"\"\"\n    n_frames = D.shape[1]\n    samples = librosa.frames_to_samples(np.arange(n_frames), hop_length=hop_length)\n    return samples"}
{"example_id": "296", "output": "import librosa\nimport numpy as np\n\ndef compute_samples_like(y: np.ndarray, sr: int, D: np.ndarray, hop_length: int) -> np.ndarray:\n    \"\"\"\n    Compute the samples vector of a spectrogram.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        D: The spectrogram.\n    \n    Returns:\n        The computed samples vector.\n    \"\"\"\n    \n    n_frames = D.shape[1]\n    samples = librosa.frames_to_samples(np.arange(n_frames), hop_length=hop_length)\n    return samples"}
{"example_id": "297", "output": "import librosa\nimport numpy as np\n\ndef compute_tone(frequency: int, sr: int, length: int) -> np.ndarray:\n    \"\"\"\n    Constructs a pure tone (cosine) signal at a given frequency.\n\n    Parameters:\n        frequency: The frequency of the tone in Hz.\n        sr: The sampling rate of the signal in Hz.\n        length: The length of the signal in samples.\n\n    Returns:\n        np.ndarray: The pure tone signal.\n    \"\"\"\n    times = np.arange(length) / sr\n    tone = np.cos(2 * np.pi * frequency * times)\n    return tone"}
{"example_id": "298", "output": "import librosa\nimport numpy as np\n\ndef compute_tone(frequency: int, sr: int, length: int) -> np.ndarray:\n    \"\"\"\n    Constructs a pure tone (cosine) signal at a given frequency.\n\n    Parameters:\n        frequency: The frequency of the tone in Hz.\n        sr: The sampling rate of the signal in Hz.\n        length: The length of the signal in samples.\n\n    Returns:\n        np.ndarray: The pure tone signal.\n    \"\"\"\n    time = np.arange(length) / sr\n    tone = np.cos(2 * np.pi * frequency * time)\n    return tone"}
{"example_id": "299", "output": "import librosa\nimport numpy as np\n\ndef compute_chirp(fmin: int, fmax: int, duration: int, sr: int, linear: bool) -> np.ndarray:\n    \"\"\"\n    Constructs a \u201cchirp\u201d or \u201csine-sweep\u201d signal. The chirp sweeps from frequency fmin to fmax (in Hz).\n\n    Parameters:\n        fmin: The minimum frequency of the chirp in Hz.\n        fmax: The maximum frequency of the chirp in Hz.\n        duration: The duration of the chirp in seconds.\n        sr: The sampling rate of the signal in Hz.\n\n    Returns:\n        np.ndarray: The chirp signal.\n    \"\"\"\n    # librosa.chirp requires librosa >= 0.7.0\n    # For librosa 0.6.0, we need to construct the chirp manually\n    t = np.linspace(0, duration, int(duration * sr), endpoint=False)\n    if linear:\n        f_t = fmin + (fmax - fmin) / duration * t\n    else:  # exponential\n        f_t = fmin * (fmax / fmin) ** (t / duration)\n\n    chirp = np.sin(2 * np.pi * np.cumsum(f_t / sr))\n    return chirp"}
{"example_id": "300", "output": "import librosa\nimport numpy as np\n\ndef compute_chirp(fmin: int, fmax: int, duration: int, sr: int, linear: bool) -> np.ndarray:\n    \"\"\"\n    Constructs a \u201cchirp\u201d or \u201csine-sweep\u201d signal. The chirp sweeps from frequency fmin to fmax (in Hz).\n\n    Parameters:\n        fmin: The minimum frequency of the chirp in Hz.\n        fmax: The maximum frequency of the chirp in Hz.\n        duration: The duration of the chirp in seconds.\n        sr: The sampling rate of the signal in Hz.\n\n    Returns:\n        np.ndarray: The chirp signal.\n    \"\"\"\n    if linear:\n        return librosa.chirp(fmin, fmax, sr=sr, duration=duration, linear=True)\n    return librosa.chirp(fmin, fmax, sr=sr, duration=duration)"}
{"example_id": "301", "output": "import librosa\nimport numpy as np\n\ndef compute_shear(E: np.ndarray, factor: int, axis: int) -> np.ndarray:\n    S = np.identity(E.shape[axis])\n    S = S + factor * np.eye(E.shape[axis], k=1-axis)\n    if axis == 0:\n        E = np.dot(S, E)\n    else:\n        E = np.dot(E, S)\n    return E"}
{"example_id": "302", "output": "import librosa\nimport numpy as np\n\ndef compute_shear(E: np.ndarray, factor: int, axis: int) -> np.ndarray:\n    S = np.identity(E.shape[0])\n    S = S + factor * np.eye(E.shape[0], k=axis)\n    if axis == 1:\n        return E @ S\n    else:\n        return S @ E"}
{"example_id": "303", "output": "import librosa\nimport numpy as np\n\ndef compute_localmin(x: np.ndarray, axis: int) -> np.ndarray:\n    is_min = np.zeros_like(x, dtype=bool)\n    if axis == 0:\n        for i in range(1, x.shape[0] - 1):\n            is_min[i] = np.all(x[i] < x[i - 1]) and np.all(x[i] < x[i + 1])\n    elif axis == 1:\n        for j in range(1, x.shape[1] - 1):\n            is_min[:,j] = np.all(x[:,j] < x[:,j-1]) and np.all(x[:,j] < x[:,j+1])\n    return is_min"}
{"example_id": "304", "output": "import librosa\nimport numpy as np\n\ndef compute_localmin(x: np.ndarray, axis: int) -> np.ndarray:\n    is_min = np.zeros_like(x, dtype=bool)\n    if axis == 0:\n        for i in range(1, x.shape[0] - 1):\n            is_min[i] = np.all(x[i] < x[i - 1]) and np.all(x[i] < x[i + 1])\n    elif axis == 1:\n        for i in range(1, x.shape[1] - 1):\n            is_min[:, i] = np.all(x[:, i] < x[:, i - 1]) and np.all(x[:, i] < x[:, i + 1])\n\n    return is_min"}
{"example_id": "305", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Optional\n\ndef compute_yin(sr: int, fmin: int, fmax: int, duration: float, period: float, phi: float, method: str, y: np.ndarray, frame_length: int, center: bool, pad_mode: str, win_length: Optional[int], hop_length: Optional[int], trough_threshold: float) -> np.ndarray:\n    \"\"\"\n    Calculates the fundamental frequency (F0) estimation using the YIN algorithm.\n\n    Parameters:\n        sr: The sampling rate of the audio signal in Hertz.\n        fmin: The minimum frequency to consider in Hz.\n        fmax: The maximum frequency to consider in Hz.\n        duration: The duration of the audio signal in seconds.\n        period: The period of the fundamental frequency in seconds.\n        phi: The phase of the fundamental frequency in radians.\n        method: Interpolation method.\n        y: The audio signal.\n        frame_length: The length of the frame in samples.\n        center: If True, the signal y is padded so that frame t is centered at y[t * hop_length].\n        pad_mode: Padding mode.\n        win_length: Window length.\n        hop_length: Hop length.\n        trough_threshold: Absolute threshold for peak estimation.\n\n    Returns:\n        The estimated fundamental frequency in Hz.\n    \"\"\"\n    f0, _, _ = librosa.yin(y, fmin=fmin, fmax=fmax, sr=sr, frame_length=frame_length, center=center, pad_mode=pad_mode, win_length=win_length, hop_length=hop_length, trough_threshold=trough_threshold)\n    return f0"}
{"example_id": "306", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Optional\n\ndef compute_yin(sr: int, fmin: int, fmax: int, duration: float, period: float, phi: float, method: str, y: np.ndarray, frame_length: int, center: bool, pad_mode: str, win_length: Optional[int], hop_length: Optional[int], trough_threshold: float) -> np.ndarray:\n    \"\"\"\n    Calculates the fundamental frequency (F0) estimation using the YIN algorithm.\n\n    Parameters:\n        sr: The sampling rate of the audio signal in Hertz.\n        fmin: The minimum frequency to consider in Hz.\n        fmax: The maximum frequency to consider in Hz.\n        duration: The duration of the audio signal in seconds.\n        period: The period of the fundamental frequency in seconds.\n        phi: The phase of the fundamental frequency in radians.\n        method: Interpolation method.\n        y: The audio signal.\n        frame_length: The length of the frame in samples.\n        center: If True, the signal y is padded so that frame t is centered at y[t * hop_length].\n        pad_mode: Padding mode.\n        win_length: Window length.\n        hop_length: Hop length.\n        trough_threshold: Absolute threshold for peak estimation.\n\n    Returns:\n        The estimated fundamental frequency in Hz.\n    \"\"\"\n    f0, _, _ = librosa.yin(y, fmin=fmin, fmax=fmax, sr=sr, frame_length=frame_length, win_length=win_length, hop_length=hop_length, trough_threshold=trough_threshold)\n    return f0"}
{"example_id": "307", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union, Optional, Tuple\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_pyin(freq: int, sr: int, y: np.ndarray, fmin: int, fmax: int, frame_length: int, center: bool, pad_mode: str, win_length: Optional[int], hop_length: Optional[int], n_thresholds: int, beta_parameters: Tuple[int], boltzmann_parameter: int, resolution: float, max_transition_rate: float, switch_prob: float, no_trough_prob: float, fill_na: DTypeLike) -> np.ndarray:\n    \"\"\"\n    Calculates the fundamental frequency estimation using probabilistic YIN.\n\n    Parameters:\n        freq: The frequency of the fundamental frequency in Hz.\n        sr: The sampling rate of the audio signal in Hertz.\n        y: The audio signal.\n        fmin: The minimum frequency to consider in Hz.\n        fmax: The maximum frequency to consider in Hz.\n        frame_length: The length of the frame in samples.\n        center: If True, the signal y is padded so that frame t is centered at y[t * hop_length].\n        pad_mode: Padding mode.\n        win_length: Window length.\n        hop_length: Hop length.\n        n_thresholds: Number of thresholds.\n        beta_parameters: Beta parameters.\n        boltzmann_parameter: Boltzmann parameter.\n        resolution: Resolution.\n        max_transition_rate: Maximum transition rate.\n        switch_prob: Switch probability.\n        no_trough_prob: No trough probability.\n        fill_na: Fill NA value.\n\n    Returns:\n        Time series of fundamental frequencies in Hertz.\n    \"\"\"\n    f0, voiced_flag, voiced_probs = librosa.pyin(y, fmin=fmin, fmax=fmax, sr=sr, frame_length=frame_length, center=center, pad_mode=pad_mode, win_length=win_length, hop_length=hop_length, n_thresholds=n_thresholds, beta_parameters=beta_parameters, boltzmann_parameter=boltzmann_parameter, resolution=resolution, max_transition_rate=max_transition_rate, switch_prob=switch_prob, no_trough_prob=no_trough_prob, fill_na=fill_na)\n    return f0"}
{"example_id": "308", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union, Optional, Tuple\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_pyin(freq: int, sr: int, y: int, fmin: int, fmax: int, frame_length: int, center: bool, pad_mode: str, win_length: Optional[int], hop_length: Optional[int], n_thresholds: int, beta_parameters: Tuple[int], boltzmann_parameter: int, resolution: float, max_transition_rate: float, switch_prob: float, no_trough_prob: float, fill_na: DTypeLike) -> np.ndarray:\n    \"\"\"\n    Calculates the fundamental frequency estimation using probabilistic YIN.\n\n    Parameters:\n        freq: The frequency of the fundamental frequency in Hz.\n        sr: The sampling rate of the audio signal in Hertz.\n        y: The audio signal.\n        fmin: The minimum frequency to consider in Hz.\n        fmax: The maximum frequency to consider in Hz.\n        frame_length: The length of the frame in samples.\n        center: If True, the signal y is padded so that frame t is centered at y[t * hop_length].\n        pad_mode: Padding mode.\n        win_length: Window length.\n        hop_length: Hop length.\n        n_thresholds: Number of thresholds.\n        beta_parameters: Beta parameters.\n        boltzmann_parameter: Boltzmann parameter.\n        resolution: Resolution.\n        max_transition_rate: Maximum transition rate.\n        switch_prob: Switch probability.\n        no_trough_prob: No trough probability.\n        fill_na: Fill NA value.\n\n    Returns:\n        Time series of fundamental frequencies in Hertz.\n    \"\"\"\n    f0, voiced_flag, voiced_probs = librosa.pyin(y, fmin=fmin, fmax=fmax, sr=sr, frame_length=frame_length, center=center, pad_mode=pad_mode, win_length=win_length, hop_length=hop_length, n_thresholds=n_thresholds, beta_parameters=beta_parameters, boltzmann_parameter=boltzmann_parameter, resolution=resolution, max_transition_rate=max_transition_rate, switch_prob=switch_prob, no_trough_prob=no_trough_prob, fill_na=fill_na)\n    return f0"}
{"example_id": "309", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union\n\nDTypeLike = Union[np.dtype, type]\n\n\ndef compute_vqt(y: np.ndarray, sr: int, hop_length: int, fmin: int, n_bins: int, gamma: int, bins_per_octave: int, tuning: float, filter_scale: int, norm: 1, sparsity: float, window: str, scale: bool, pad_mode: str, res_type: str, dtype: DTypeLike) -> np.ndarray:\n    C = librosa.vqt(y, sr=sr, hop_length=hop_length, fmin=fmin, n_bins=n_bins, gamma=gamma, bins_per_octave=bins_per_octave, tuning=tuning, filter_scale=filter_scale, norm=norm, sparsity=sparsity, window=window, scale=scale, pad_mode=pad_mode, res_type=res_type, dtype=dtype)\n    return C"}
{"example_id": "310", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\n\ndef compute_vqt(y: np.ndarray, sr: int) -> np.ndarray:\n    C = librosa.vqt(y, sr=sr)\n    return C"}
{"example_id": "311", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_griffinlim_cqt(y: np.ndarray, sr: int, C, n_iter: int, hop_length: int, fmin: int, bins_per_octave: int, tuning: float, filter_scale: 1, norm: int, sparsity: float, window: str, scale: bool, pad_mode: str, res_type: str, dtype: DTypeLike, length: Optional[int], momentum: float, init: Optional[str]) -> np.ndarray:\n    rng = np.random.RandomState(seed=0)\n\n    if init == 'random':\n        if length is None:\n            length = len(y)\n        x = rng.randn(length) + 1j * rng.randn(length)\n    elif init is None:\n        x = np.zeros(length, dtype=dtype)\n        x[:C.shape[1]] = 1.0\n    else:\n        x = librosa.istft(init, hop_length=hop_length, dtype=dtype)\n\n    n = len(x)\n    angles = np.empty(C.shape, dtype=complex)\n    rebuilt = np.empty_like(C)\n\n    for _ in range(n_iter):\n        rebuilt = librosa.cqt(x, sr=sr, hop_length=hop_length, fmin=fmin, n_bins=C.shape[0], bins_per_octave=bins_per_octave, tuning=tuning, filter_scale=filter_scale, norm=norm, sparsity=sparsity, window=window, scale=scale, pad_mode=pad_mode, res_type=res_type)\n        angles[:] = rebuilt\n        angles[:] /= np.abs(angles) + 1e-16\n        x = librosa.icqt(C * angles, sr=sr, hop_length=hop_length, fmin=fmin, bins_per_octave=bins_per_octave, tuning=tuning, filter_scale=filter_scale, norm=norm, sparsity=sparsity, window=window, scale=scale, res_type=res_type)\n\n    return x"}
{"example_id": "312", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_griffinlim_cqt(y: np.ndarray, sr: int, C, n_iter: int, hop_length: int, fmin: int, bins_per_octave: int, tuning: float, filter_scale: 1, norm: int, sparsity: float, window: str, scale: bool, pad_mode: str, res_type: str, dtype: DTypeLike, length: Optional[int], momentum: float, init: Optional[str]) -> np.ndarray:\n    rng = np.random.RandomState(seed=0)\n\n    if init == 'random':\n        # Seed the random number generator\n        angles = rng.uniform(0, 2 * np.pi, size=C.shape)\n        # Flip the phases randomly\n        angles = np.pi * rng.randint(0, 2, angles.shape)\n        phase = np.exp(1.j * angles)\n        y = C * phase\n    elif init is None:\n        y = C\n    for _ in range(n_iter):\n        # Invert to time domain\n        y = librosa.istft(y, hop_length=hop_length, win_length=2048, window='hann', center=True, length=length)\n        # Calculate magnitude spectrogram\n        C_new = librosa.cqt(y, sr=sr, hop_length=hop_length, fmin=fmin, n_bins=C.shape[0], bins_per_octave=bins_per_octave, tuning=tuning, filter_scale=filter_scale, norm=norm, sparsity=sparsity, window=window, scale=scale, pad_mode=pad_mode, res_type=res_type, dtype=dtype)\n        # Apply phase from previous iteration\n        phase = np.exp(1.j * np.angle(C_new))\n        y = C * phase\n\n    y = librosa.istft(y, hop_length=hop_length, win_length=2048, window='hann', center=True, length=length)\n    return y"}
{"example_id": "313", "output": "import librosa\nimport numpy as np\nimport scipy\nimport scipy.optimize\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\n\ndef compute_mel_to_audio(y: np.ndarray, sr: int, S: np.ndarray, M: np.ndarray, n_fft: int, hop_length: Optional[int], win_length: Optional[int], window: str, center: bool, pad_mode: str, power: float, n_iter: int, length: Optional[int], dtype: DTypeLike) -> np.ndarray:\n    np.random.seed(seed=0)\n    n_mels = M.shape[0]\n    # Find initial STFT magnitude from mel spectrogram\n    S_mel = librosa.feature.mel_to_stft(M, sr=sr, n_fft=n_fft, power=power)\n    # Invert Griffin Lim\n    y_inv = librosa.istft(S_mel)\n    for i in range(n_iter):\n        S_i = librosa.stft(y_inv, n_fft=n_fft)\n        y_inv = librosa.istft(S_i)\n\n    return y_inv"}
{"example_id": "314", "output": "import librosa\nimport numpy as np\nimport scipy\nimport scipy.optimize\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\n\ndef compute_mel_to_audio(y: np.ndarray, sr: int, S: np.ndarray, M: np.ndarray, n_fft: int, hop_length: Optional[int], win_length: Optional[int], window: str, center: bool, pad_mode: str, power: float, n_iter: int, length: Optional[int], dtype: DTypeLike) -> np.ndarray:\n    np.random.seed(seed=0)\n    S = librosa.feature.inverse.mel_to_stft(M, sr=sr, n_fft=n_fft, power=power, hop_length=hop_length, win_length=win_length, window=window, center=center, pad_mode=pad_mode)\n    y = librosa.griffinlim(S, n_iter=n_iter, hop_length=hop_length, win_length=win_length, window=window, center=center, pad_mode=pad_mode, length=length, dtype=dtype)\n    return y"}
{"example_id": "315", "output": "import librosa\nimport numpy as np\nimport scipy\n\ndef compute_mfcc_to_mel(mfcc: np.ndarray, n_mels: int=128, dct_type: int=2, norm: str='ortho', ref: float=1.0) -> np.ndarray:\n    \"\"\"\n    Invert Mel-frequency cepstral coefficients to approximate a Mel power spectrogram.\n\n    Parameters:\n        mfcc (np.ndarray): Mel-frequency cepstral coefficients.\n        n_mels (int): Number of Mel bands to generate.\n        dct_type (int): Type of DCT to use.\n        norm (str): Normalization to use.\n        ref: Reference power for (inverse) decibel calculation\n\n    Returns:\n        An approximate Mel power spectrum recovered from mfcc.        \n    \"\"\"\n    np.random.seed(seed=0)\n    n_mfcc = mfcc.shape[0]\n    dctm = librosa.filters.dct(n_mfcc, n_mels, dct_type)\n\n    if norm == 'ortho':\n        dctm = dctm * np.sqrt(2.0 / n_mels)\n        dctm[0,:] = dctm[0,:] * np.sqrt(0.5)\n\n    mel_spec = np.dot(dctm.T, mfcc)\n    return mel_spec"}
{"example_id": "316", "output": "import librosa\nimport numpy as np\nimport scipy\n\ndef compute_mfcc_to_mel(mfcc: np.ndarray, n_mels: int=128, dct_type: int=2, norm: str='ortho', ref: float=1.0) -> np.ndarray:\n    \"\"\"\n    Invert Mel-frequency cepstral coefficients to approximate a Mel power spectrogram.\n\n    Parameters:\n        mfcc (np.ndarray): Mel-frequency cepstral coefficients.\n        n_mels (int): Number of Mel bands to generate.\n        dct_type (int): Type of DCT to use.\n        norm (str): Normalization to use.\n        ref: Reference power for (inverse) decibel calculation\n\n    Returns:\n        An approximate Mel power spectrum recovered from mfcc.        \n    \"\"\"\n    np.random.seed(seed=0)\n    n_mfcc = mfcc.shape[0]\n    dctm = librosa.filters.dct(n_mfcc, n_mels, type=dct_type, norm=norm)\n    mel_spec = np.dot(dctm.T, mfcc)\n    return mel_spec"}
{"example_id": "317", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    # Ensure images are in RGBA format\n    img1 = img1.convert(\"RGBA\")\n    img2 = img2.convert(\"RGBA\")\n\n    # Resize images to the same size if necessary\n    if img1.size != img2.size:\n        img2 = img2.resize(img1.size)\n\n    # Blend images using the overlay algorithm\n    blended_image = ImageChops.overlay(img1, img2)\n\n    return blended_image"}
{"example_id": "318", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    # Ensure images are in RGBA format\n    img1 = img1.convert(\"RGBA\")\n    img2 = img2.convert(\"RGBA\")\n\n    # Blend images using the soft light algorithm\n    blended_image = ImageChops.soft_light(img1, img2)\n\n    return blended_image"}
{"example_id": "319", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    img1 = np.array(img1)\n    img2 = np.array(img2)\n\n    # Hard Light Algorithm from https://en.wikipedia.org/wiki/Blend_modes\n    blended_img = np.zeros_like(img2, dtype=np.uint8)\n\n    # implementation\n    for i in range(0, len(img1)):\n        for j in range(0, len(img1[0])):\n            if img2[i][j][0] < 128:\n                blended_img[i][j] = 2 * img1[i][j] * img2[i][j] / 255\n            else:\n                blended_img[i][j] = 255 - 2 * (255 - img1[i][j]) * (255 - img2[i][j]) / 255\n    \n    return Image.fromarray(blended_img)"}
{"example_id": "320", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    img1 = np.array(img1)\n    img2 = np.array(img2)\n    \n    blended_img = ImageChops.overlay(Image.fromarray(img1), Image.fromarray(img2))\n    return blended_img"}
{"example_id": "321", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    # Ensure images are in RGBA format\n    img1 = img1.convert(\"RGBA\")\n    img2 = img2.convert(\"RGBA\")\n\n    # Blend images using the soft light algorithm\n    blended_image = ImageChops.soft_light(img1, img2)\n\n    return blended_image"}
{"example_id": "322", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    # Ensure images are in RGBA format\n    img1 = img1.convert(\"RGBA\")\n    img2 = img2.convert(\"RGBA\")\n\n    # Blend images using hard light algorithm\n    blended_image = ImageChops.hard_light(img1, img2)\n\n    return blended_image"}
{"example_id": "323", "output": "from tqdm import tqdm\n\ndef infinite():\n    i = 0\n    while True:\n        yield i\n        i += 1\n        if i == 1000:\n          return\n\n# Define the total in sol_dict['total'] and use it.\nsol_dict = {\"total\":1000}\nfor i in tqdm(infinite(), total=sol_dict['total']):\n    pass"}
{"example_id": "324", "output": "from tqdm import tqdm\n\ndef infinite():\n    i = 0\n    while True:\n        yield i\n        i += 1\n        if i == 1000:\n            return\n\n# Define the total in sol_dict['total'] and use it.\nsol_dict = {\"total\": 1000}\nfor i in tqdm(infinite(), total=sol_dict[\"total\"]):\n    pass"}
{"example_id": "325", "output": "import kymatio\nimport torch\nfrom kymatio import Scattering2D\nfrom kymatio.scattering2d.frontend.torch_frontend import ScatteringTorch2D\nfrom typing import Tuple\n\ndef compute_scattering(a: torch.Tensor) -> Tuple[torch.Tensor, ScatteringTorch2D]:\n    scattering = ScatteringTorch2D(J=2, shape=a.shape[-2:])\n    result = scattering(a)\n    return result, scattering"}
{"example_id": "326", "output": "import matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.figure import Figure\nfrom matplotlib.axes import Axes\n\ndef modify(fig: Figure, ax: Axes) -> None:\n    ax.set_xticks([])\n    ax.set_yticks([])"}
{"example_id": "327", "output": "import matplotlib.pyplot as plt\nfrom matplotlib.figure import Figure\nfrom matplotlib.axes import Axes\n\ndef modify(fig: Figure, ax: Axes) -> None:\n    ax.tick_params(axis='both', which='both', length=0, labelbottom=False, labelleft=False)"}
{"example_id": "328", "output": "import matplotlib.pyplot as plt\nfrom matplotlib.figure import Figure\nfrom matplotlib.axes import Axes\n\ndef modify(fig: Figure, ax: Axes) -> None:\n    ax.tick_params(axis='both', which='both', bottom=False, top=False, left=False, right=False, labelbottom=False, labelleft=False)"}
{"example_id": "329", "output": "import matplotlib.pyplot as plt\n\ndef use_seaborn() -> None:\n    plt.style.use(\"seaborn\")\n    plt.plot([1, 2, 3, 4], [5, 6, 7, 8])\n    plt.show()"}
{"example_id": "330", "output": "import matplotlib.pyplot as plt\n\ndef use_seaborn() -> None:\n    plt.style.use(\"seaborn\")\n    plt.plot([1, 2, 3, 4], [5, 6, 7, 8])\n    plt.show()"}
