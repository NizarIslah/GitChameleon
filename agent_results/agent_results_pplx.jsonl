{"example_id": "0", "output": "import torch\nimport torch.special\ndef log_ndtr(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.log_ndtr(input_tensor)"}
{"example_id": "1", "output": "import torch\ndef gamma_ln(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.lgamma(input_tensor)"}
{"example_id": "2", "output": "import torch\ndef erf(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.erf(input_tensor)"}
{"example_id": "3", "output": "import torch\ndef erfc(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.erfc(input_tensor)"}
{"example_id": "4", "output": "import torch\ndef bessel_i0(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.i0(input_tensor)"}
{"example_id": "5", "output": "import torch\n\nclass ModifiedBesselFn(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, inp, nu):\n        ctx._nu = nu\n        ctx.save_for_backward(inp)\n        return torch.from_numpy(scipy.special.iv(nu, inp.detach().numpy()))\n\n    @staticmethod\n    def backward(ctx, grad_out):\n        inp, = ctx.saved_tensors\n        nu = ctx._nu\n        return 0.5 * grad_out * (ModifiedBesselFn.apply(inp, nu - 1.0) + \n                               ModifiedBesselFn.apply(inp, nu + 1.0)), None\n\nmodified_bessel = ModifiedBesselFn.apply\n\ndef bessel_i1(input_tensor: torch.Tensor) -> torch.Tensor:\n    return modified_bessel(input_tensor, 1.0)"}
{"example_id": "6", "output": "import torch\ndef gamma_ln(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.log(torch.abs(torch.special.gamma(input_tensor)))"}
{"example_id": "7", "output": "import torch\ndef erf(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.erf(input_tensor)"}
{"example_id": "8", "output": "import torch\nfrom scipy import special as sp\n\ndef erfc(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.tensor(sp.erfc(input_tensor.numpy()))"}
{"example_id": "9", "output": "import torch\ndef bessel_i0(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.i0(input_tensor)"}
{"example_id": "10", "output": "import torch\ndef bessel_i1(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.i1(input_tensor)"}
{"example_id": "11", "output": "import torch\ndef invert_mask(tensor1: torch.Tensor, tensor2: torch.Tensor) -> torch.BoolTensor:\n    mask = tensor1 < tensor2\n    return ~mask"}
{"example_id": "12", "output": "import torch\nimport math\ndef log_ndtr(input_tensor: torch.Tensor) -> torch.Tensor:\n    log_2 = math.log(2)\n    return torch.where(input_tensor < 0,\n        torch.log(0.5 * torch.erfc(-input_tensor / math.sqrt(2))) - log_2,\n        torch.log(0.5 * (1 + torch.erf(input_tensor / math.sqrt(2))))\n    )"}
{"example_id": "13", "output": "import torch\ndef invert_mask(tensor1: torch.Tensor, tensor2: torch.Tensor) -> torch.BoolTensor:\n    mask = ~torch.lt(tensor1, tensor2)\n    return mask"}
{"example_id": "14", "output": "import torch\n\ndef stft(audio_signal: torch.Tensor, n_fft: int) -> torch.Tensor:\n    \"\"\"Compute the Short-Time Fourier Transform (STFT) of a 1D audio signal and return the magnitude spectrogram.\n\n    Parameters:\n    - audio_signal: Input audio signal as a 1D tensor.\n    - n_fft: Length of the FFT window.\n\n    Returns:\n    - Magnitude spectrogram of the input signal.\n    \"\"\"\n    stft_output = torch.stft(audio_signal, n_fft, return_complex=True)\n    magnitude_spectrogram = torch.abs(stft_output)\n    return magnitude_spectrogram"}
{"example_id": "15", "output": "import torch\ndef stft(audio_signal: torch.Tensor, n_fft: int) -> torch.Tensor:\n    win_length = n_fft\n    window = torch.hann_window(win_length)\n    if len(audio_signal.shape) > 1:\n        audio_signal = audio_signal.squeeze()\n    stft_complex = torch.stft(audio_signal, n_fft=n_fft, hop_length=n_fft // 2, win_length=win_length, window=window, center=True, pad_mode='reflect', return_complex=True)\n    stft_magnitude = torch.abs(stft_complex)\n    return stft_magnitude"}
{"example_id": "16", "output": "import torch\ndef istft(spectrogram: torch.Tensor, n_fft: int, hop_length: int, win_length: int, normalized=False) -> torch.Tensor:\n    \"\"\"Computes the Inverse Short-Time Fourier Transform (ISTFT) of a spectrogram using PyTorch's torch.istft function.\n\n    Args:\n        spectrogram: 3D tensor of shape (frequency_bins, time_frames, 2)\n                     representing the spectrogram with real and imaginary parts.\n        n_fft: Size of the Fourier transform window.\n        hop_length: Number of samples between successive frames.\n        win_length: Length of the STFT window.\n        normalized: Whether the STFT was normalized.\n\n    Returns:\n        A 1D tensor representing the time-domain signal.\n    \"\"\"\n    if spectrogram.ndim == 3 and spectrogram.shape[-1] == 2:\n        spectrogram = torch.view_as_complex(spectrogram.permute(2, 0, 1))\n\n    signal = torch.istft(spectrogram, n_fft=n_fft, hop_length=hop_length, win_length=win_length, normalized=normalized)\n    return signal"}
{"example_id": "17", "output": "import torch\ndef istft(spectrogram: torch.Tensor, n_fft: int, hop_length: int, win_length: int, normalized=False) -> torch.Tensor:\n    \"\"\"Compute the Inverse Short-Time Fourier Transform (ISTFT) of a spectrogram using PyTorch's torch.istft function.\n\n    Args:\n        spectrogram (torch.Tensor): Input spectrogram with dimensions (frequency_bins, time_frames, 2).\n        n_fft (int): Size of Fourier transform window.\n        hop_length (int): Number of samples between successive frames.\n        win_length (int): Length of the STFT window. Defaults to n_fft if None.\n        normalized (bool, optional): Whether the STFT was normalized. Defaults to False.\n\n    Returns:\n        torch.Tensor: The reconstructed signal.\n    \"\"\"\n    real = spectrogram[:, :, 0]\n    imag = spectrogram[:, :, 1]\n    complex_specgram = torch.complex(real, imag)\n\n    istft_output = torch.istft(\n        complex_specgram,\n        n_fft=n_fft,\n        hop_length=hop_length,\n        win_length=win_length,\n        normalized=normalized\n    )\n\n    return istft_output"}
{"example_id": "18", "output": "import geopandas as gpd\nfrom shapely.geometry import Point, Polygon\n\ndef spatial_join(gdf1 : gpd.GeoDataFrame, gdf2 : gpd.GeoDataFrame) -> gpd.GeoDataFrame:\n    return gpd.sjoin(gdf1, gdf2, how=\"inner\", predicate=\"intersects\")"}
{"example_id": "19", "output": "import geopandas as gpd\nfrom shapely.geometry import Point, Polygon\n\ndef spatial_join(gdf1 : gpd.GeoDataFrame, gdf2 : gpd.GeoDataFrame) -> gpd.GeoDataFrame:\n    gdf1 = gdf1.to_crs(gdf2.crs)\n    return gpd.sjoin(gdf1, gdf2, how=\"inner\", predicate=\"intersects\")"}
{"example_id": "20", "output": "import geopandas as gpd\nfrom shapely.geometry import box\n\ndef perform_union(gdf : gpd.GeoDataFrame) -> gpd.GeoSeries:\n    return gdf.geometry.unary_union"}
{"example_id": "21", "output": "import geopandas as gpd\nfrom shapely.geometry import box\n\ndef perform_union(gdf: gpd.GeoDataFrame) -> gpd.GeoSeries:\n    return gdf.geometry.unary_union"}
{"example_id": "22", "output": "import geopandas as gpd\nfrom shapely.geometry import Point\ndef create_geoseries(x: list[int], y: list[int]) -> gpd.GeoSeries:\n    geometry = gpd.GeoSeries([Point(i, j) for i, j in zip(x,y)])\n    return geometry"}
{"example_id": "23", "output": "import geopandas as gpd\nfrom shapely.geometry import Point\ndef create_geoseries(x:list[int], y:list[int]) -> gpd.GeoSeries:\n    points = [Point(xi, yi) for xi, yi in zip(x,y)]\n    geoseries = gpd.GeoSeries(points, crs=4326)\n    return geoseries"}
{"example_id": "24", "output": "import geopandas as gpd\nfrom shapely.geometry import Point, Polygon, box\n\ndef spatial_query(gdf:gpd.GeoDataFrame, other:gpd.GeoDataFrame) -> gpd.GeoDataFrame:\n    combined_geometry = other.unary_union\n    return gdf[gdf.intersects(combined_geometry)]"}
{"example_id": "25", "output": "import geopandas as gpd\nfrom shapely.geometry import Point, Polygon\n\ndef spatial_query(gdf:gpd.GeoDataFrame, other:gpd.GeoSeries) -> gpd.GeoDataFrame:\n    if gdf.crs != other.crs:\n        gdf = gdf.to_crs(other.crs)\n    return gpd.sjoin(gdf, other, how='inner', op='intersects')"}
{"example_id": "26", "output": "import nltk\nimport io\nimport contextlib\n\ndef show_usage(obj:object) -> str:\n    with io.StringIO() as buf, contextlib.redirect_stdout(buf):\n        help(obj)\n        return buf.getvalue()"}
{"example_id": "27", "output": "import networkx as nx\ndef modularity_communities(G:nx.Graph) -> list:\n    return list(nx.community.greedy_modularity_communities(G))"}
{"example_id": "28", "output": "import networkx as nx\ndef modularity_communities(G:nx.Graph) -> list:\n    return list(nx.community.greedy_modularity_communities(G))"}
{"example_id": "29", "output": "import networkx as nx\nfrom itertools import combinations\ndef bounding_distance(G:nx.Graph) -> int:\n    max_len = 0\n    for u, v in combinations(G.nodes, 2):\n        try:\n            path = nx.shortest_path(G, source=u, target=v)\n            path_len = len(path) - 1  # Subtract 1 to get edge count\n            if path_len > max_len:\n                max_len = path_len\n        except nx.NetworkXNoPath:\n            continue  # No path exists between these nodes\n    return max_len"}
{"example_id": "30", "output": "import networkx as nx\ndef bounding_distance(G:nx.Graph) -> int:\n    return nx.algorithms.distance_measures.diameter(G)"}
{"example_id": "31", "output": "import networkx as nx\nfrom networkx.algorithms.community.modularity_max import naive_greedy_modularity_communities\ndef naive_modularity_communities(G:nx.Graph) -> list:\n    return naive_greedy_modularity_communities(G)"}
{"example_id": "32", "output": "import networkx as nx\ndef naive_modularity_communities(G:nx.Graph) -> list:\n    return list(nx.community.greedy_modularity_communities(G))"}
{"example_id": "33", "output": "import networkx as nx\ndef get_nodes(G:nx.Graph) -> list:\n   return list(G.nodes())"}
{"example_id": "34", "output": "import networkx as nx\ndef get_first_edge(G:nx.Graph) -> tuple :\n    return next(iter(G.edges()))"}
{"example_id": "35", "output": "import networkx as nx\ndef shortest_path(G:nx.Graph, source:int) -> list:\n    lengths, predecessors = nx.single_source_bellman_ford(G, source=source, weight='weight')\n    return lengths, predecessors"}
{"example_id": "36", "output": "import gradio as gr\n\ndef render_quadratic_formula():\n    formula = \"$$\"\n    formula += \"x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\"\n    formula += \"$$\"\n    return formula\n\ninterface = gr.Interface(fn=render_quadratic_formula, inputs=[], outputs=\"text\")\n\ninterface.launch()"}
{"example_id": "37", "output": "import gradio as gr\ndef render_quadratic_formula():\n    formula = \"$$\"\n    formula += \"x = \\\\frac{-b \\\\pm \\\\sqrt{b^2 - 4ac}}{2a}\"\n    formula += \"$$\"\n    return formula\n\ninterface = gr.Chatbot()\nwith gr.Blocks() as demo:\n    msg = gr.Textbox(\"Enter LaTeX\")\n    chatbot = gr.Chatbot()\n    msg.submit(render_quadratic_formula, outputs=chatbot)\n\ndemo.launch()"}
{"example_id": "38", "output": "import gradio as gr\n\ndef display_image():\n    # Placeholder image URL, replace with your actual image path if needed\n    image_url = \"https://gradio.app/assets/img/logo.png\"\n    return image_url\n\niface = gr.Interface(fn=display_image, outputs=gr.Image(type=\"filepath\"), allow_flagging=\"never\")\niface.launch()"}
{"example_id": "39", "output": "import gradio as gr\nfrom PIL import Image\nimport numpy as np\n\ndef display_image():\n    # Replace with your actual image path\n    img_path = \"path/to/your/image.jpg\"\n    img = Image.open(img_path)\n    img_array = np.array(img)\n    return img_array\n\niface = gr.Interface(fn=display_image, inputs=None, outputs=gr.Image())\n\nif __name__ == \"__main__\":\n    iface.launch()"}
{"example_id": "40", "output": "import gradio as gr\n\ndef process_image(image):\n    return \"The input image has been converted to grayscale.\"\n\niface = gr.Interface(\n    fn=process_image,\n    inputs=gr.Image(shape=(200, 200)),\n    outputs=gr.Textbox(label=\"Image Description\")\n)\n\nif __name__ == \"__main__\":\n    iface.launch()"}
{"example_id": "41", "output": "import gradio as gr\nfrom PIL import Image\nimport numpy as np\n\ndef process_image(image):\n    img = Image.fromarray(image)\n    width, height = img.size\n    return \"wide\" if width > height else \"tall\"\n\niface = gr.Interface(fn=process_image, inputs=gr.Image(), outputs=gr.Label())"}
{"example_id": "42", "output": "import gradio as gr\n\ndef get_selected_options(options):\n    return f\"Selected options: {options}\"\n\nselection_options = [\"angola\", \"pakistan\", \"canada\"]\n\niface = gr.Interface(get_selected_options, inputs = gr.CheckboxGroup(choices=selection_options), outputs = \"text\")\n\niface.launch()"}
{"example_id": "43", "output": "from sklearn.ensemble import GradientBoostingClassifier\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef get_n_features(clf: GradientBoostingClassifier) -> int:\n    X = np.random.rand(100, 5)\n    y = np.random.randint(2, size=100)\n    X_train, _, y_train, _ = train_test_split(X, y, test_size=0.2, random_state=0)\n    clf.fit(X_train, y_train)\n    return clf.n_features_in_"}
{"example_id": "44", "output": "from sklearn.ensemble import GradientBoostingClassifier\n# Initialize the classifier\ndef init_clf() -> GradientBoostingClassifier:\n    classifier = GradientBoostingClassifier(criterion='squared_error')\n    return classifier"}
{"example_id": "45", "output": "from sklearn.cross_decomposition import CCA\nimport numpy as np\ndef get_coef_shape(cca_model: CCA, X: np.ndarray, Y: np.ndarray) -> tuple:\n    cca_model.fit(X, Y)\n    return cca_model.coef_.shape"}
{"example_id": "46", "output": "from sklearn.cross_decomposition import CCA\nimport numpy as np\ndef get_coef_shape(cca_model: CCA, X: np.ndarray, Y: np.ndarray) -> tuple:\n    cca_model.fit(X, Y)\n    return cca_model.coef_.shape"}
{"example_id": "47", "output": "from sklearn.datasets import make_sparse_coded_signal\ndef get_signal(n_samples: int, n_features: int, n_components: int, n_nonzero_coefs: int) -> tuple:\n    X, dictionary, codes = make_sparse_coded_signal(n_samples=n_samples, n_components=n_components, n_features=n_features, n_nonzero_coefs=n_nonzero_coefs, random_state=0)\n    return X.T, dictionary, codes"}
{"example_id": "48", "output": "from sklearn.datasets import load_digits\nfrom sklearn.utils import Bunch\nfrom sklearn.decomposition import FastICA\n\ndef apply_fast_ica(data: Bunch, n_components: int) -> FastICA:\n    ica = FastICA(n_components=n_components, whiten='arbitrary-variance', random_state=0)\n    transformed_data = ica.fit_transform(data.data)\n    return transformed_data\n\ndata = load_digits()\n\ntransformed_data = apply_fast_ica(data, n_components=20)"}
{"example_id": "49", "output": "from sklearn.datasets import load_digits\nfrom sklearn.decomposition import FastICA\nfrom sklearn.utils import Bunch\n\ndef apply_fast_ica(data: Bunch, n_components: int) -> FastICA:\n    ica = FastICA(n_components=n_components, whiten='arbitrary-variance')\n    transformed_data = ica.fit_transform(data.data)\n    return transformed_data\n\ndigits = load_digits()\n\ntransformed_data = apply_fast_ica(digits, n_components=20)"}
{"example_id": "50", "output": "from sklearn.impute import SimpleImputer\nimport numpy as np\ndef get_imputer(data: np.ndarray) -> SimpleImputer:\n    imputer = SimpleImputer(missing_values=np.nan, strategy=\"mean\")\n    imputer.fit(data)\n    return imputer"}
{"example_id": "51", "output": "from sklearn import metrics\ndef get_scorer_names() -> list:\n    return metrics.get_scorer_names()"}
{"example_id": "52", "output": "from sklearn import metrics\ndef get_scorer_names() -> list:\n    return metrics.get_scorer_names()"}
{"example_id": "53", "output": "from sklearn.metrics.pairwise import manhattan_distances\nimport numpy as np\ndef get_pairwise_dist(X: np.ndarray,Y: np.ndarray) -> np.ndarray:\n    distances = manhattan_distances(X, Y, sum_over_features=False)\n    return distances"}
{"example_id": "54", "output": "from sklearn.metrics.pairwise import manhattan_distances\nimport numpy as np\ndef get_pairwise_dist(X: np.ndarray,Y: np.ndarray) -> np.ndarray:\n    return manhattan_distances(X, Y)"}
{"example_id": "55", "output": "from matplotlib.colors import LinearSegmentedColormap\nimport numpy as np\ncmap = {{\n    \"blue\": [[1, 2, 2], [2, 2, 1]],\n    \"red\": [[0, 0, 0], [1, 0, 0]],\n    \"green\": [[0, 0, 0], [1, 0, 0]]\n}}\n\ncmap_reversed = {{key: LinearSegmentedColormap.from_list(key, np.array(cmap[key][::-1])) for key in cmap}}"}
{"example_id": "56", "output": "import pandas as pd\ndef get_grouped_df(df: pd.DataFrame) -> pd.DataFrame:\n    categories = df['category'].unique()\n    df['category'] = pd.Categorical(df['category'], categories=categories)\n    return df.groupby(by=\"category\", dropna=False).sum()"}
{"example_id": "57", "output": "import pandas as pd\n\ndef get_grouped_df(df: pd.DataFrame) -> pd.DataFrame:\n    return df.groupby(by=list(df.columns), dropna=False, observed=False).size().reset_index(name='count')"}
{"example_id": "58", "output": "import pandas as pd\nimport numpy as np\ndef get_expected_value(df: pd.DataFrame) -> pd.Series:\n    try:\n        df_copy = df.copy()\n        df_copy.iloc[:, 0] = np.arange(len(df))\n        return df_copy.iloc[:, 0]\n    except:\n        return pd.Series(np.arange(len(df)))"}
{"example_id": "59", "output": "import pandas as pd\nimport numpy as np\ndef get_expected_value(df: pd.DataFrame) -> pd.Series:\n    df = df.reset_index(drop=True)\n    df.iloc[0, 0] = 10\n    return df.iloc[0]"}
{"example_id": "60", "output": "import pandas as pd\nimport numpy as np\ndef get_slice(ser: pd.Series, start: int, end: int) -> pd.Series:\n    return ser[start:end]"}
{"example_id": "61", "output": "import pandas as pd\nimport numpy as np\ndef get_slice(ser: pd.Series, start: int, end: int) -> pd.Series:\n    return ser.iloc[start:end]"}
{"example_id": "62", "output": "import pandas as pd\ndef correct_type(index: pd.Index) -> str:\n    return index.dtype"}
{"example_id": "63", "output": "import pandas as pd\ndef combined(df1: pd.DataFrame, df2: pd.DataFrame, series1: pd.Series, series2: pd.Series) -> tuple:\n    combined_dfs = pd.concat([df1, df2], ignore_index=True)\n    combined_series = pd.concat([series1, series2], ignore_index=True)\n    return (combined_dfs, combined_series)"}
{"example_id": "64", "output": "import pandas as pd\ndef correct_type(index: pd.Index) -> str:\n    return str(index.dtype)"}
{"example_id": "65", "output": "import pandas as pd\ndef combined(df1: pd.DataFrame, df2: pd.DataFrame, series1: pd.Series, series2: pd.Series) -> tuple:\n    df_combined = pd.concat([df1, df2], ignore_index=True)\n    series_combined = pd.concat([series1, series2], ignore_index=True)\n    return df_combined, series_combined"}
{"example_id": "66", "output": "import numpy as np\n\ndef apply_convolution_full(arr1 : np.ndarray, arr2 : np.ndarray) -> np.ndarray:\n    return np.convolve(arr1, arr2, mode='full')"}
{"example_id": "67", "output": "import numpy as np\n\ndef apply_convolution_valid(arr1 : np.ndarray , arr2 : np.ndarray) -> np.ndarray:\n    return np.convolve(arr1, arr2, mode='valid')"}
{"example_id": "68", "output": "import numpy as np\n\ndef apply_correlate_full(arr1 : np.ndarray, arr2 : np.ndarray) -> np.ndarray:\n    return np.correlate(arr1, arr2, mode='full')"}
{"example_id": "69", "output": "import numpy as np\n\ndef find_common_type(arr1:np.ndarray, arr2:np.ndarray) -> np.dtype:\n    if arr1.dtype == arr2.dtype:\n        return arr1.dtype\n    return np.promote_types(arr1.dtype, arr2.dtype)"}
{"example_id": "70", "output": "import numpy as np\n\ndef find_common_type(arr1:np.ndarray, arr2:np.ndarray) -> np.dtype:\n    return arr1.dtype if arr1.dtype == arr2.dtype else None"}
{"example_id": "71", "output": "import numpy as np\n\ndef custom_round(arr:np.ndarray) -> np.ndarray:\n    return np.round(arr)"}
{"example_id": "72", "output": "import numpy as np\n\ndef custom_product(arr:np.ndarray) -> np.ndarray:\n    return np.prod(arr)"}
{"example_id": "73", "output": "import numpy as np\n\ndef custom_cumproduct(arr:np.ndarray) -> np.ndarray:\n    return np.cumprod(arr)"}
{"example_id": "74", "output": "import numpy as np\n\ndef custom_sometrue(arr:np.ndarray) -> np.ndarray:\n    return np.any(arr)"}
{"example_id": "75", "output": "import numpy as np\n\ndef custom_alltrue(arr:np.ndarray) -> np.ndarray:\n    return np.all(arr)"}
{"example_id": "76", "output": "import numpy as np\n\ndef custom_round(arr:np.ndarray) -> np.ndarray:\n    return np.round(arr)"}
{"example_id": "77", "output": "import numpy as np\n\ndef custom_product(arr:np.ndarray) -> np.ndarray:\n    return np.prod(arr)"}
{"example_id": "78", "output": "import numpy as np\n\ndef custom_cumproduct(arr:np.ndarray) -> np.ndarray:\n    return np.cumprod(arr)"}
{"example_id": "79", "output": "import numpy as np\n\ndef custom_anytrue(arr:np.ndarray) -> np.ndarray:\n    return np.any(arr)"}
{"example_id": "80", "output": "import numpy as np\n\ndef custom_alltrue(arr:np.ndarray) -> np.ndarray:\n    return np.all(arr)"}
{"example_id": "81", "output": "import numpy as np\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\n\ndef predict_start(model: LGBMClassifier, start_iter: int) -> np.ndarray:\n    num_iterations = model.booster_.current_iteration()\n    predictions = model.predict(model.data, start_iteration=start_iter)\n    return predictions"}
{"example_id": "82", "output": "import numpy as np\nimport lightgbm as lgb\nfrom sklearn.datasets import make_classification\n\nNUM_SAMPLES = 500\nNUM_FEATURES = 20\nINFORMATIVE_FEATURES = 2\nREDUNDANT_FEATURES = 10\nRANDOM_STATE = 42\nNUM_BOOST_ROUND = 100\nNFOLD = 5\nLEARNING_RATE = 0.05\nEARLY_STOPPING_ROUNDS = 10\nX, y = make_classification(n_samples=NUM_SAMPLES, n_features=NUM_FEATURES, n_informative=INFORMATIVE_FEATURES, n_redundant=REDUNDANT_FEATURES, random_state=RANDOM_STATE)\ntrain_data = lgb.Dataset(X, label=y)\n\nparams = {{\n    'objective': 'binary',\n    'metric': 'binary_logloss',\n    'learning_rate': LEARNING_RATE,\n    'verbose': -1\n}}\n\ncv_results = lgb.cv(\n    params=params,\n    train_set=train_data,\n    num_boost_round=NUM_BOOST_ROUND,\n    nfold=NFOLD,\n    early_stopping_rounds=EARLY_STOPPING_ROUNDS,\n    return_cvbooster=True\n)\n\nprint(cv_results)"}
{"example_id": "83", "output": "import lightgbm.compat as compat\ndef decode_string(string: bytes) -> str:\n    return string.decode(\"utf-8\")"}
{"example_id": "84", "output": "import numpy as np\nimport lightgbm as lgb\nfrom sklearn.datasets import make_classification\n\nNUM_SAMPLES = 500\nNUM_FEATURES = 20\nINFORMATIVE_FEATURES = 2\nREDUNDANT_FEATURES = 10\nRANDOM_STATE = 42\nNUM_BOOST_ROUND = 100\nNFOLD = 5\nLEARNING_RATE = 0.05\nEARLY_STOPPING_ROUNDS = 10\nX, y = make_classification(n_samples=NUM_SAMPLES, n_features=NUM_FEATURES, n_informative=INFORMATIVE_FEATURES, n_redundant=REDUNDANT_FEATURES, random_state=RANDOM_STATE)\ntrain_data = lgb.Dataset(X, label=y)\n\nparams = {{\n    'objective': 'binary',\n    'metric': 'binary_logloss',\n    'learning_rate': LEARNING_RATE,\n    'verbose': -1\n}}\n\ncv_results = lgb.cv(\n    params=params,\n    train_set=train_data,\n    num_boost_round=NUM_BOOST_ROUND,\n    nfold=NFOLD,\n    early_stopping_rounds=EARLY_STOPPING_ROUNDS,\n    eval_train_metric=True,\n    callbacks=[lgb.log_evaluation(1)]\n)"}
{"example_id": "85", "output": "import lightgbm as lgb\nimport numpy as np\nimport ctypes\n\ndef convert_cint32_array_to_numpy(c_pointer: ctypes.POINTER(ctypes.c_int32), length: int) -> np.ndarray:\n    \"\"\"\n    Convert a ctypes pointer to a numpy array.\n    \n    Args:\n        c_pointer (c_array_type): A ctypes pointer to an array of integers.\n        length (int): The length of the array.\n        \n    Returns:\n        np.ndarray: A numpy array containing the elements of the ctypes array.\n    \"\"\"\n    return np.fromiter(c_pointer, dtype=np.int32, count=length)"}
{"example_id": "86", "output": "import lightgbm as lgb\nimport numpy as np\n\ndef get_params(dataset: lgb.Dataset) -> dict:\n    \"\"\"\n    Get the parameters of the dataset.\n    \n    Args:\n        dataset (lgb.Dataset): The dataset to get the parameters from.\n        \n    Returns:\n        dict: The parameters of the dataset.\n    \"\"\"\n    return dataset.params"}
{"example_id": "87", "output": "import numpy as np\nimport json\nfrom lightgbm.compat import json_default_with_numpy\n\ndef dump_json(data: any) -> str:\n    \"\"\"\n    Dump data to JSON format.\n    \n    Args:\n        data (any): The data to dump.\n        \n    Returns:\n        str: The JSON representation of the data.\n    \"\"\"\n    return json.dumps(data, default=json_default_with_numpy)"}
{"example_id": "88", "output": "import ctypes\nimport lightgbm.basic as basic\n\ndef create_c_array(values: list, ctype: type) -> ctypes.Array:\n    \"\"\"\n    Create a ctypes array from a list of values.\n    Args:\n        values (list): A list of values to be converted to a ctypes array.\n        ctype (type): The ctypes type of the array elements.\n    Returns:\n        ctypes.Array: A ctypes array containing the values.\n    \"\"\"\n    return basic.c_array(ctype, values)"}
{"example_id": "89", "output": "import lightgbm as lgb\nimport ctypes\n\ndef c_str(python_string: str) -> ctypes.c_char_p:\n    \"\"\"\n    Convert a Python string to a ctypes c_char_p.\n    \n    Args:\n        python_string (str): The Python string to convert.\n        \n    Returns:\n        ctypes.c_char_p: The converted ctypes c_char_p.\n    \"\"\"\n    return ctypes.c_char_p(python_string.encode('utf-8'))"}
{"example_id": "90", "output": "import lightgbm as lgb\nimport numpy as np\n\ndef convert_from_sliced_object(sliced_data: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Convert a sliced object to a fixed object.\n    \n    Args:\n        sliced_data (np.ndarray): The sliced object to convert.\n        \n    Returns:\n        np.ndarray: The converted fixed object.\n    \"\"\"\n    return sliced_data.copy()"}
{"example_id": "91", "output": "import spacy\nfrom spacy.pipeline.span_ruler import SpanRuler\n\ndef get_labels(ruler: SpanRuler) -> tuple:\n    \"\"\"\n    Get the labels of the SpanRuler.\n    \n    Args:\n        ruler (SpanRuler): The SpanRuler to get the labels from.\n        \n    Returns:\n        tuple: The labels of the SpanRuler.\n    \"\"\"\n    labels = set()\n    for pattern in ruler.patterns:\n        if \"label\" in pattern:\n            labels.add(pattern[\"label\"])\n    return tuple(labels)"}
{"example_id": "92", "output": "import spacy\nfrom spacy.training import Example\nfrom spacy.training import augment\n\ndef create_whitespace_variant(nlp: spacy.Language, example: Example, whitespace: str, position: int) -> Example:\n    \"\"\"\n    Create a whitespace variant of the given example.\n    \n    Args:\n        nlp (Language): The spaCy language model.\n        example (Example): The example to augment.\n        whitespace (str): The whitespace to insert.\n        position (int): The position to insert the whitespace.\n        \n    Returns:\n        Example: The augmented example.\n    \"\"\"\n    doc = nlp(example.text)\n    if position < 0 or position >= len(doc):\n      raise ValueError(f\"Position {position} is out of bounds.\")\n\n    modified_text = \"\"\n    for i, token in enumerate(doc):\n        modified_text += token.text\n        if i == position:\n            modified_text += whitespace\n            \n    # Create a new Doc object from the modified text\n    new_doc = nlp.make_doc(modified_text)\n\n    # Create new entities for the modified Doc\n    new_entities = []\n    for start, end, label in example.get_aligned(\"ENT_IOB\", as_string=True):\n        start_char = sum(len(token) + len(token.whitespace_) for token in doc[:start])\n\n        # Adjust start based on added whitespace\n        if position < start:\n            start_char += len(whitespace)\n        end_char = start_char + len(doc.char_span(start, end).text)\n        span = new_doc.char_span(start_char, end_char, label=label)\n        if span is not None:\n            new_entities.append(span)\n\n    # Set the entities of the new Doc\n    new_doc.set_ents(new_entities)\n\n\n    reference = nlp.make_doc(example.reference.text)\n    return Example(new_doc, reference)"}
{"example_id": "93", "output": "import spacy\nfrom spacy.pipeline.span_ruler import SpanRuler\n\n\ndef remove_pattern_by_id(ruler: SpanRuler, pattern_id: str) -> None:\n    \"\"\"\n    Remove a pattern from the SpanRuler by its ID.\n    \n    Args:\n        ruler (SpanRuler): The SpanRuler to remove the pattern from.\n        pattern_id (str): The ID of the pattern to remove.\n        \n    Returns:\n        None\n    \"\"\"\n    ruler.remove_by_id(pattern_id)"}
{"example_id": "94", "output": "import nltk\nfrom nltk.stem import PorterStemmer\nfrom nltk.corpus import wordnet\nfrom nltk.translate.meteor_score import single_meteor_score\n\ndef align_words_func(hypothesis, reference):\n    \"\"\"\n    Align words between hypothesis and reference sentences.\n    \n    Args:\n        hypothesis (list): List of words in the hypothesis sentence.\n        reference (list): List of words in the reference sentence.\n        \n    Returns:\n        tuple: A tuple containing the aligned matches, unmatched hypothesis, and unmatched reference.\n    \"\"\"\n    hypothesis = hypothesis if isinstance(hypothesis, list) else hypothesis.split()\n    reference = reference if isinstance(reference, list) else reference.split()\n    score = single_meteor_score(reference, hypothesis)\n    return score"}
{"example_id": "95", "output": "import nltk\nnltk.download('wordnet')\nnltk.download('omw-1.4')\nfrom nltk.corpus import wordnet\n\ndef get_synset_examples(synset: str) -> list:\n    \"\"\"\n    Get examples for a given synset.\n    \n    Args:\n        synset (str): The synset to get examples for.\n        \n    Returns:\n        list: A list of examples for the synset.\n    \"\"\"\n    return wordnet.synset(synset).examples()"}
{"example_id": "96", "output": "import nltk\nnltk.download('sinica_treebank')\nfrom nltk.tree import Tree\nfrom nltk.corpus import sinica_treebank\n\ndef parse_sinica_treebank_sentence(sentence: str) -> Tree:\n    \"\"\"\n    Parse a sentence from the Sinica Treebank.\n    \n    Args:\n        sentence (str): The sentence to parse.\n        \n    Returns:\n        Tree: The parsed tree.\n    \"\"\"\n    return Tree.fromstring(sentence)"}
{"example_id": "97", "output": "from nltk.lm.api import accumulate\nimport operator\n\ndef accumulate_functional(iterable, func):\n    \"\"\"\n    Accumulate the results of applying a function to an iterable.\n    \n    Args:\n        iterable (iterable): An iterable to accumulate.\n        func (function): A function to apply to the elements of the iterable.\n        \n    Returns:\n        list: A list of accumulated results.\n    \"\"\"\n    return list(accumulate(iterable, func))"}
{"example_id": "98", "output": "import nltk.tokenize.destructive\n\n\ndef tokenize_sentence(sentence: str) -> list:\n    \"\"\"\n    Tokenize a sentence into words.\n    \n    Args:\n        sentence (str): The sentence to tokenize.\n        \n    Returns:\n        list: A list of tokens.\n    \"\"\"\n    return nltk.tokenize.word_tokenize(sentence)"}
{"example_id": "99", "output": "import datetime\nimport django\nfrom django.conf import settings\nfrom django.utils import timezone\n\nsettings.configure()\n\ndef get_time_in_utc(year: int, month: int, day: int) -> timezone.datetime:\n    naive_datetime = datetime.datetime(year, month, day)\n    aware_datetime = timezone.make_aware(naive_datetime)\n    utc_datetime = aware_datetime.astimezone(timezone.utc)\n    return utc_datetime"}
{"example_id": "100", "output": "import django\nfrom django.conf import settings\nfrom django.utils import timezone\n\nsettings.configure()\n\ndef get_time_in_utc(year: int, month: int, day: int) -> timezone.datetime:\n    return timezone.datetime(year, month, day, tzinfo=timezone.utc)"}
{"example_id": "101", "output": "from django.conf import settings\nfrom django.forms.models import BaseModelFormSet\nfrom django.forms import Form\n\nsettings.configure()\ndef save_existing(formset: BaseModelFormSet, form : Form, obj:str) -> None:\n    if formset.is_valid():\n        instances = formset.save()"}
{"example_id": "102", "output": "from django.conf import settings\nfrom django.forms.models import BaseModelFormSet\nfrom django.forms import Form\n\nsettings.configure()\ndef save_existing(formset: BaseModelFormSet, form : Form, instance:str) -> None:\n    if formset.is_valid():\n        instances = formset.save()"}
{"example_id": "103", "output": "import django\nfrom django.conf import settings\nfrom django import forms\nfrom django.template import Template, Context\n\nsettings.configure(\n      TEMPLATES=[\n          {\n              'BACKEND': 'django.template.backends.django.DjangoTemplates',\n          },\n      ],\n  )\ndjango.setup()\n\ndef render_output(template_string):\n  form = SampleForm()\n  template = Template(template_string)\n  context = Context({'form': form})\n  rendered_output = template.render(context)\n  return rendered_output\n\n# target for html string\n# <form>\n#   <div>\n#     <label for='id_name'>Name:</label>\n\n# <div class='helptext' id='id_name_helptext'>Enter your name</div>\n\n# <input type='text' name='name' required aria-describedby='id_name_helptext' id='id_name'>\n#   </div>\n# </form>\n\nclass SampleForm(forms.Form):\n    name = forms.CharField(label='Name', help_text='Enter your name')\ndef get_template_string()->str:\n    return '''<form>\n  <div>\n    {{ form.name.label_tag }}\n\n    {{ form.name.help_text|safe }}\n\n    {{ form.name }}\n  </div>\n</form>'''"}
{"example_id": "104", "output": "import django\nfrom django.conf import settings\nfrom django import forms\nfrom django.template import Template, Context\n\nsettings.configure(\n      TEMPLATES=[\n          {\n              'BACKEND': 'django.template.backends.django.DjangoTemplates',\n          },\n      ],\n  )\ndjango.setup()\n\ndef render_output(template_string):\n  form = SampleForm()\n  template = Template(template_string)\n  context = Context({'form': form})\n  rendered_output = template.render(context)\n  return rendered_output\n\n# target for html string\n# <form>\n#   <div>\n#     <label for='id_name'>Name:</label>\n\n# <div class='helptext' id='id_name_helptext'>Enter your name</div>\n\n# <input type='text' name='name' required aria-describedby='id_name_helptext' id='id_name'>\n#   </div>\n# </form>\n\nclass SampleForm(forms.Form):\n    name = forms.CharField(label='Name', help_text='Enter your name')\ndef get_template_string()->str:\n    return '''<form>\n  <div>\n    {{ form.name.label_tag }}\n\n<div class='helptext' id='{{ form.name.id_for_label }}_helptext'>{{ form.name.help_text }}</div>\n\n{{ form.name }}\n  </div>\n</form>'''"}
{"example_id": "105", "output": "import django\nfrom django.conf import settings\nfrom django.db import models, connection\nfrom django.db.models import F\n\nsettings.configure(\n    DATABASES={{'default': {{'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}}}},\n)\ndjango.setup()\n\n\ndef display_side_and_area(square):\n    return square.side, square.area\n\ndef create_square(side):\n    square = Square.objects.create(side=side)\n    square.refresh_from_db()\n    return square\n\nclass Square(models.Model):\n    class Meta:\n        app_label = 'myapp'\n    side = models.IntegerField()\n    area = models.IntegerField(editable=False)\n\n    def save(self, *args, **kwargs):\n        self.area = self.side * self.side\n        super().save(*args, **kwargs)"}
{"example_id": "106", "output": "import django\nfrom django.conf import settings\nfrom django.db import models, connection\nfrom django.db.models import F\n\nsettings.configure(\n    DATABASES={{'default': {{'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}}}},\n)\ndjango.setup()\n\n\ndef display_side_and_area(square):\n    return square.side, square.area\n\ndef create_square(side):\n    square = Square.objects.create(side=side)\n    square.refresh_from_db()\n    return square\n\nclass Square(models.Model):\n    class Meta:\n        app_label = 'myapp'\n    side = models.IntegerField()\n    area = models.IntegerField(editable=False)\n\n    def save(self, *args, **kwargs):\n        self.area = self.side**2\n        super().save(*args, **kwargs)"}
{"example_id": "107", "output": "import django\nfrom django.conf import settings\nfrom django.db import models\n\nsettings.configure()\ndjango.setup()\n\ncolor = models.TextChoices('Color', 'RED GREEN BLUE')\n\nclass MyModel(models.Model):\n    class Meta:\n        app_label = 'myapp'\n    color = models.CharField(max_length=5, choices=color.choices)"}
{"example_id": "108", "output": "import django\nfrom django.conf import settings\nfrom django.db import models\n\nsettings.configure()\ndjango.setup()\n\nclass Color(models.TextChoices):\n    RED = \"RED\", \"Red\"\n    GREEN = \"GREEN\", \"Green\"\n    BLUE = \"BLUE\", \"Blue\"\n\nclass MyModel(models.Model):\n    class Meta:\n        app_label = 'myapp'\n    color = models.CharField(max_length=5, choices=Color.choices, default=Color.RED)"}
{"example_id": "109", "output": "from scipy.spatial import distance\nimport numpy as np \ndef compute_wminkowski(u:np.ndarray, v:np.ndarray, p:int, w:np.ndarray)->np.ndarray:\n    return np.power(np.sum(w * np.abs(u - v)**p), 1/p)"}
{"example_id": "110", "output": "from scipy.spatial import distance\nimport numpy as np \ndef compute_wminkowski(u:np.ndarray, v:np.ndarray, p:int, w:np.ndarray)->np.ndarray:\n    return np.sum(w * np.abs(u - v)**p)**(1/p)"}
{"example_id": "111", "output": "from scipy import linalg\nimport numpy as np\ndef compute_matrix_exponential(A: np.ndarray) -> np.ndarray:\n    batch_size = A.shape[0]\n    batch_exponentials = np.zeros_like(A)\n    for i in range(batch_size):\n        # Extract a matrix from the batch\n        matrix = A[i]\n        # Compute the exponential of the matrix using scipy.linalg.expm\n        exponential = linalg.expm(matrix)\n        # Store the result back in the batch_exponentials array\n        batch_exponentials[i] = exponential\n    return batch_exponentials"}
{"example_id": "112", "output": "from scipy import linalg\nimport numpy as np\ndef compute_matrix_exponential(A: np.ndarray) -> np.ndarray:\n    exponentials = []\n    for matrix in A:\n        exp_matrix = linalg.expm(matrix)\n        exponentials.append(exp_matrix)\n    result = np.stack(exponentials)\n    return result"}
{"example_id": "113", "output": "from scipy import stats\nimport numpy as np\ndef combine_pvalues(A: np.ndarray) -> tuple[float, float]:\n    statistic, pvalue = stats.combine_pvalues(A, method=\"pearson\")\n    return statistic, pvalue"}
{"example_id": "114", "output": "from scipy import stats\nimport numpy as np\ndef combine_pvalues(A: np.ndarray) -> tuple[float, float]:\n    statistic, pvalue = stats.combine_pvalues(A, method=\"pearson\")\n    return statistic, pvalue"}
{"example_id": "115", "output": "from scipy import sparse,linalg\nimport numpy as np \ndef compute_matrix_exponential(A:sparse.lil_matrix)->sparse.lil_matrix:\n    return sparse.csc_matrix(linalg.expm(A))"}
{"example_id": "116", "output": "from scipy import sparse,linalg\nimport numpy as np\n\ndef compute_matrix_exponential(A: sparse.lil_matrix)->sparse.lil_matrix:\n    return linalg.expm(A)"}
{"example_id": "117", "output": "from scipy import stats\nimport numpy as np\ndef compute_circular_variance(a: np.ndarray)-> float: \n    return stats.circvar(a)"}
{"example_id": "118", "output": "from scipy import stats\nimport numpy as np\ndef compute_circular_variance(a: np.ndarray)-> float:\n    return stats.circvar(a)"}
{"example_id": "119", "output": "import numpy as np\nfrom scipy.stats import rv_continuous, norm\n\ndef compute_moment(dist: rv_continuous, n: int) -> float:\n    \"\"\"\n    Compute the n-th moment of a distribution.\n\n    Parameters:\n    - dist: Instance of scipy.stats.rv_continuous\n    - n: Order of the moment\n\n    Returns:\n    - The n-th moment of the distribution\n    \"\"\"\n    # Use the moment function to compute the n-th moment directly\n    moment = dist.moment(n)\n    \n    # If moment returns an array, take the first element as the result.\n    # However, typically for a single moment, it should return a scalar.\n    if isinstance(moment, np.ndarray):\n        return moment[0]\n    else:\n        return moment\n\n# Example usage:\n# Define a distribution, for example, a normal distribution\ndist = norm(loc=0, scale=1)\n\n# Compute the second moment (variance plus the square of the mean)\nsecond_moment = compute_moment(dist, 2)\nprint(f\"Second moment of the distribution: {second_moment}\")"}
{"example_id": "120", "output": "from scipy.stats import rv_continuous\ndef compute_moment(dist : rv_continuous, n: int) -> float:\n    return dist.moment(n)"}
{"example_id": "121", "output": "from scipy.linalg import det\nimport numpy as np \ndef compute_determinant(A: np.ndarray) -> np.ndarray:\n    return np.array([det(matrix) for matrix in A])"}
{"example_id": "122", "output": "from scipy.linalg import det\nimport numpy as np \ndef compute_determinant(A: np.ndarray) -> np.ndarray:\n    determinants = []\n    for i in range(A.shape[0]):\n        determinants.append(det(A[i]))\n    return np.array(determinants)"}
{"example_id": "123", "output": "from scipy.linalg import lu\nimport numpy as np \ndef compute_lu_decomposition(A: np.ndarray) -> tuple[np.ndarray,np.ndarray,np.ndarray]:\n    p_list, l_list, u_list = [], [], []\n    for matrix in A:\n        p, l, u = lu(matrix)\n        p_list.append(p)\n        l_list.append(l)\n        u_list.append(u)\n    return np.stack(p_list), np.stack(l_list), np.stack(u_list)"}
{"example_id": "124", "output": "from scipy.linalg import lu\nimport numpy as np \ndef compute_lu_decomposition(A: np.ndarray) -> tuple[np.ndarray,np.ndarray,np.ndarray]:\n    p, l, u = lu(A)\n    return p, l, u"}
{"example_id": "125", "output": "import scipy.signal.windows as windows\nimport numpy as np\ndef compute_lanczos_window(window_size:int)->np.ndarray:\n    return windows.lanczos(window_size)"}
{"example_id": "126", "output": "import scipy.signal.windows as windows\nimport numpy as np\n\ndef compute_lanczos_window(window_size: int) -> np.ndarray:\n    return windows.lanczos(window_size)"}
{"example_id": "127", "output": "from scipy.ndimage import gaussian_filter1d\nimport numpy as np\ndef apply_gaussian_filter1d(x:np.ndarray, radius:int, sigma:float)->np.ndarray:\n    return gaussian_filter1d(x, sigma=sigma)"}
{"example_id": "128", "output": "from scipy.ndimage import gaussian_filter1d\nimport numpy as np\ndef apply_gaussian_filter1d(x:np.ndarray, radius:int, sigma:float)->np.ndarray:\n    return gaussian_filter1d(x, sigma, radius)"}
{"example_id": "129", "output": "from scipy.ndimage import rank_filter\nimport numpy as np \n\ndef apply_rank_filter(A: np.ndarray,rank: int,size:int)->np.ndarray:\n    batch_size = A.shape[0]\n    filtered_A = np.zeros_like(A)\n    for i in range(batch_size):\n        filtered_A[i] = rank_filter(A[i], rank, size=size)\n    return filtered_A"}
{"example_id": "130", "output": "from scipy.ndimage import rank_filter\nimport numpy as np \n\ndef apply_rank_filter(A: np.ndarray,rank: int,size:int)->np.ndarray:\n    return rank_filter(A, rank, size=size)"}
{"example_id": "131", "output": "from scipy.ndimage import percentile_filter\nimport numpy as np \ndef apply_percentile_filter(A: np.ndarray, percentile: int | float, size: int) -> np.ndarray:\n    filtered_batch = np.zeros_like(A)\n    for i in range(A.shape[0]):\n        filtered_batch[i] = percentile_filter(A[i], percentile=percentile, size=size)\n    return filtered_batch"}
{"example_id": "132", "output": "from scipy.ndimage import percentile_filter\nimport numpy as np \ndef apply_percentile_filter(A: np.ndarray, percentile: int | float,size:int)->np.ndarray:\n    filtered_images = np.zeros_like(A)\n    for i in range(A.shape[0]):\n        filtered_images[i] = percentile_filter(A[i], percentile, size)\n    return filtered_images"}
{"example_id": "133", "output": "from scipy.ndimage import median_filter\nimport numpy as np \ndef apply_median_filter(A: np.ndarray,size:int) -> np.ndarray:\n    filtered_images = []\n    for image in A:\n        filtered_images.append(median_filter(image, size=size))\n    return np.array(filtered_images)"}
{"example_id": "134", "output": "from scipy.ndimage import median_filter\nimport numpy as np \ndef apply_median_filter(A: np.ndarray, size:int) -> np.ndarray:\n    filtered_images = np.zeros_like(A)\n    for i in range(len(A)):\n        filtered_images[i] = median_filter(A[i], size=size)\n    return filtered_images"}
{"example_id": "135", "output": "from scipy.ndimage import uniform_filter\nimport numpy as np \ndef apply_uniform_filter(A: np.ndarray, size: int) -> np.ndarray:\n    filtered_images = np.zeros_like(A)\n    for i in range(A.shape[0]):\n        for c in range(A.shape[-1]):\n            filtered_images[i, ..., c] = uniform_filter(A[i, ..., c], size=size)\n    return filtered_images"}
{"example_id": "136", "output": "from scipy.ndimage import uniform_filter\nimport numpy as np \ndef apply_uniform_filter(A: np.ndarray, size: int) -> np.ndarray:\n    batch_size = A.shape[0]\n    for i in range(batch_size):\n        A[i] = uniform_filter(A[i], size=size)\n    return A"}
{"example_id": "137", "output": "from scipy.ndimage import minimum_filter\nimport numpy as np \ndef apply_minimum_filter(A: np.ndarray, size: int) -> np.ndarray:\n    filtered_batch = np.stack([\n        minimum_filter(image, size=size)\n        for image in A\n    ])\n    return filtered_batch"}
{"example_id": "138", "output": "from scipy.ndimage import minimum_filter\nimport numpy as np \ndef apply_minimum_filter(A: np.ndarray, size: int) -> np.ndarray:\n    filtered_images = np.zeros_like(A)\n    for i in range(A.shape[0]):\n        filtered_images[i] = minimum_filter(A[i], size=size)\n    return filtered_images"}
{"example_id": "139", "output": "from scipy.ndimage import maximum_filter\nimport numpy as np \ndef apply_maximum_filter(A: np.ndarray, size: int) -> np.ndarray:\n    B = maximum_filter(A, size=size)\n    return B"}
{"example_id": "140", "output": "from scipy.ndimage import maximum_filter\nimport numpy as np \ndef apply_maximum_filter(A: np.ndarray, size: int) -> np.ndarray:\n    filtered_A = np.empty_like(A)\n    for i in range(A.shape[0]):\n        filtered_A[i] = maximum_filter(A[i], size=size)\n    return filtered_A"}
{"example_id": "141", "output": "from scipy.ndimage import gaussian_filter\nimport numpy as np\n\ndef apply_gaussian_filter(A: np.ndarray, sigma: float) -> np.ndarray:\n    filtered_images = np.stack([\n        gaussian_filter(img, sigma=sigma, mode='reflect')\n        for img in A\n    ])\n    return filtered_images"}
{"example_id": "142", "output": "from scipy.ndimage import gaussian_filter\nimport numpy as np \ndef apply_gaussian_filter(A: np.ndarray, sigma: float) -> np.ndarray:\n    filtered_batch = np.stack([\n        gaussian_filter(img, sigma=sigma)\n        for img in A\n    ])\n    return filtered_batch"}
{"example_id": "143", "output": "import flask\n\napp = flask.Flask('test')\n\n@app.route('/data')\ndef data(num_set):\n    return flask.jsonify({'numbers': sorted(list(num_set))})\n\ndef eval(app, data_fn, num_set):\n    with app.test_request_context():\n        response = data_fn(num_set)\n        return response.get_data(as_text=False)\n\ndef app_set_up(app: flask.Flask) -> None:\n    pass"}
{"example_id": "144", "output": "import flask\n\napp = flask.Flask('test')\n@app.route('/data')\ndef data(num_set):\n    return flask.jsonify({'numbers':sorted(list(num_set))})\n\ndef eval(app, data_fn, num_set):\n    with app.test_request_context():\n        response = data_fn(num_set)\n        return response.get_data(as_text=True)\n\ndef app_set_up(app: flask.Flask) -> None: \n    pass"}
{"example_id": "145", "output": "from flask import Flask, send_file\nfrom io import BytesIO\n\napp1 = Flask(__name__)\n\ndef get_content_disp(app, download_fn):\n    with app.test_request_context():\n        response = download_fn()\n    content_disp = response.headers.get('Content-Disposition')\n    return content_disp\n\n@app1.route('/download')\ndef download():\n    data = BytesIO(b'Hello, World!')\n    attachment_filename = 'hello.txt'\n    return send_file(data, as_attachment=True, attachment_filename=attachment_filename, mimetype='text/plain')"}
{"example_id": "146", "output": "from flask import Flask, send_file\nfrom io import BytesIO\n\napp1 = Flask(__name__)\n\ndef get_content_disp(app, download_fn):\n    with app.test_request_context():\n        response = download_fn()\n    content_disp = response.headers.get('Content-Disposition')\n    return content_disp\n\n@app1.route('/download')\ndef download():\n    data = BytesIO(b'Hello, World!')\n    attachment_filename = 'hello.txt'\n    return send_file(data, as_attachment=True, download_name=attachment_filename)"}
{"example_id": "147", "output": "import json\nimport tempfile\nfrom flask import Flask\n\nconfig_data = {'DEBUG': True, 'SECRET_KEY': 'secret'}\nwith tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix='.json') as tmp:\n    json.dump(config_data, tmp)\n    tmp.flush()\n    config_file = tmp.name\n\napp = Flask(__name__)\n\ndef load_config(config_file: str) -> None:\n    app.config.from_file(config_file, load=json.load)"}
{"example_id": "148", "output": "import json\nimport tempfile\nfrom flask import Flask\n\nconfig_data = {{'DEBUG': True, 'SECRET_KEY': 'secret'}}\nwith tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix='.json') as tmp:\n    json.dump(config_data, tmp)\n    tmp.flush()\n    config_file = tmp.name\n\napp = Flask(__name__)\n\ndef load_config(config_file: str) -> None:\n    app.config.from_file(config_file, load=json.load)\n\nload_config(config_file)"}
{"example_id": "149", "output": "import flask\nimport werkzeug\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef safe_join_fail_404(base_path: str, sub_path: str) -> str:\n    # Attempt to join the base path and sub path.\n    # If the joined path is outside the base path, raise a 404 error.\n    try:\n        joined_path = flask.safe_join(base_path, sub_path)\n        return joined_path\n    except werkzeug.exceptions.NotFound:\n        raise error404()"}
{"example_id": "150", "output": "import flask\nimport werkzeug\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef safe_join_fail_404(base_path: str, sub_path: str) -> str:\n    # Attempt to join the base path and sub path.\n    # If the joined path is outside the base path, raise a 404 error.\n    try:\n        safe_path = werkzeug.utils.safe_join(base_path, sub_path)\n        return safe_path\n    except werkzeug.exceptions.NotFound:\n        raise error404()"}
{"example_id": "151", "output": "import flask\nimport datetime\n\ndef convert_timedelta_to_seconds(td: datetime.timedelta) -> int:\n    return int(td.total_seconds())"}
{"example_id": "152", "output": "import flask\nimport datetime\n\ndef convert_timedelta_to_seconds(td: datetime.timedelta):\n    return td.total_seconds()"}
{"example_id": "153", "output": "import jinja2 \nfrom jinja2.runtime import Context\nfrom typing import Callable\n\n\ndef setup_environment(filtername: str, filter: Callable[[Context, str], str]) -> jinja2.Environment:\n    env = jinja2.Environment()\n    env.filters[filtername] = filter\n    return env\n\n\ndef solution() -> Callable[[Context, str], str]:\n    def greet(ctx: Context, name: str) -> str:\n        prefix = ctx.get(\"prefix\", \"Hello\")\n        return f\"{prefix} {name}\"\n\n    return greet"}
{"example_id": "154", "output": "import jinja2 \nfrom jinja2.runtime import Context\nfrom typing import Callable\nfrom jinja2 import pass_context\n\n\ndef setup_environment(filtername: str,filter) -> jinja2.Environment:\n    env = jinja2.Environment()\n    env.filters[filtername] = filter\n    return env\n\n@pass_context\ndef greeting_filter(context: Context, name: str):\n    prefix = context.get(\"prefix\", \"Hello\")\n    return f\"{prefix}, {name}!\"\n\ndef solution() -> Callable[[Context, str], str]:\n    return greeting_filter"}
{"example_id": "155", "output": "import re\nfrom jinja2 import Environment, evalcontextfilter\nfrom markupsafe import Markup, escape\nfrom jinja2.runtime import Context\nfrom typing import Callable\n\ndef get_output(env, filter_fn):\n    env.filters['nl2br'] = filter_fn\n    template = env.from_string('{{ text | nl2br }}')\n    output = template.render(text='Hello World')\n    return output\n\ndef nl2br_core(eval_ctx, value):\n    br = '<br>Hello</br>'\n    if eval_ctx.autoescape:\n        value = escape(value)\n        br = Markup(br)\n    result = re.sub(r'Hello', br, value)\n    return Markup(result) if eval_ctx.autoescape else result\n\n@evalcontextfilter\ndef solution(eval_ctx, value):\n    return nl2br_core(eval_ctx, value)"}
{"example_id": "156", "output": "import re\nfrom jinja2 import Environment, pass_eval_context\nfrom markupsafe import Markup, escape\nfrom typing import Callable, Union\nfrom jinja2.runtime import EvalContext\n\ndef get_output(env, filter_fn):\n    env.filters['nl2br'] = filter_fn\n    template = env.from_string('{{ text | nl2br }}')\n    output = template.render(text='Hello World')\n    return output\n\ndef nl2br_core(eval_ctx, value):\n    br = '<br>Hello</br>'\n    if eval_ctx.autoescape:\n        value = escape(value)\n        br = Markup(br)\n    result = re.sub(r'Hello', br, value)\n    return Markup(result) if eval_ctx.autoescape else result\n\n@pass_eval_context\ndef solution(eval_ctx: EvalContext, value: str) -> Union[str, Markup]:\n    return nl2br_core(eval_ctx, value)"}
{"example_id": "157", "output": "import warnings\nfrom scipy.linalg import det\nimport numpy as np\nwarnings.filterwarnings('error')\n\ndef check_invertibility(matrices: np.ndarray) -> np.bool_:\n    batch_size = matrices.shape[0]\n    results = np.zeros(batch_size, dtype=bool)\n    for i in range(batch_size):\n        try:\n            determinant = det(matrices[i])\n            if determinant != 0:\n                results[i] = True\n        except Exception as e:\n            print(\"Error: \", e)\n            continue\n\n    return np.all(results)"}
{"example_id": "158", "output": "import warnings\nfrom scipy.linalg import det\nimport numpy as np\nwarnings.filterwarnings('error')\n\ndef check_invertibility(matrices : np.ndarray) -> np.bool_ :\n    \"\"\"Check if all matrices in a batch are invertible.\n\n    Parameters\n    ----------\n    matrices : np.ndarray\n        A batch of 2D square matrices with shape (N, M, M), where N is the batch size and M is the matrix dimension.\n\n    Returns\n    -------\n    bool\n        True if all matrices are invertible, False otherwise.\n\n    Raises\n    ------\n    ValueError\n        If input is not a 3D numpy array or if matrices are not square.\n\n    \"\"\"\n    if not isinstance(matrices, np.ndarray) or matrices.ndim != 3:\n        raise ValueError(\"Input must be a 3D numpy array.\")\n\n    N, M, _ = matrices.shape\n    if M != _:\n      raise ValueError(\"Matrices must be square.\")\n\n    for i in range(N):\n        if det(matrices[i]) == 0:\n            return False\n    return True"}
{"example_id": "159", "output": "import numpy as np\nfrom scipy.stats import hmean\n\ndef count_unique_hmean(data: np.ndarray) -> int:\n    # data shape: (n, m)\n    # n: number of arrays\n    # m: number of elements in each array \n    hmeans = []\n    for row in data:\n        hmean_val = hmean(row, nan_policy='omit')\n        hmeans.append(hmean_val)\n\n    unique_hmeans = set()\n    for val in hmeans:\n        if np.isnan(val):\n            unique_hmeans.add(np.nan)\n        else:\n            unique_hmeans.add(val)\n\n    return len(unique_hmeans)"}
{"example_id": "160", "output": "import numpy as np\nfrom scipy.stats import hmean\n\ndef count_unique_hmean(data: np.ndarray) -> int:\n    # data shape: (n, m)\n    # n: number of arrays\n    # m: number of elements in each array \n    harmonic_means = hmean(data, axis=1)\n    unique_values = np.unique(harmonic_means, return_counts=True)\n    return len(unique_values[0])"}
{"example_id": "161", "output": "import numpy as np\nfrom scipy.signal import hilbert\n\ndef compute_hilbert_transform(a, b, dtype=np.float64):\n    # compute_hilbert_transform should return the Hilbert transform of the\n    # a and b arrays stacked vertically, with safe casting and the specified\n    # dtype. \n    # raise TypeError if needed\n    ab = np.vstack([a,b])\n    ab = ab.astype(dtype)\n    return hilbert(ab)"}
{"example_id": "162", "output": "import numpy as np\nfrom scipy.signal import hilbert\n\ndef compute_hilbert_transform(a: np.ndarray, b: np.ndarray, dtype=np.float64) -> np.ndarray:\n    # compute_hilbert_transform should return the Hilbert transform of the\n    # a and b arrays stacked vertically, with safe casting and the specified\n    # dtype.\n    # raise TypeError if needed\n    try:\n        stacked_array = np.vstack([a.astype(dtype), b.astype(dtype)])\n        return hilbert(stacked_array, axis=0)\n    except TypeError:\n        raise"}
{"example_id": "163", "output": "import flask\nimport json\nimport numpy as np\napp = flask.Flask('test1')\n@app.route('/data')\ndef data(num_arr):\n    unique_values = np.unique(num_arr)\n    unique_json = [x if not np.isnan(x) else None for x in unique_values]\n    return flask.jsonify({'numbers': unique_json})\n\ndef eval(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=False)\n\nclass MyCustomJSONHandler(json.JSONEncoder):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            unique_values = np.unique(obj)\n            unique_json = [x if not np.isnan(x) else None for x in unique_values]\n            return unique_json\n        return super().default(obj)"}
{"example_id": "164", "output": "import flask\nimport numpy as np\n\napp = flask.Flask('test1')\n\n@app.route('/data')\ndef data():\n    num_arr = np.array([1.0, np.nan, 3.0, np.nan])\n    unique_values = np.unique(num_arr)\n    return flask.jsonify({'numbers': unique_values.tolist()})\n\nclass MyCustomJSONHandler(flask.json.provider.DefaultJSONProvider):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            # Convert numpy array to list and handle NaN values\n            return [None if np.isnan(x) else x for x in obj.tolist()]\n        return super().default(obj)\n\napp.json = MyCustomJSONHandler(app)\n\ndef eval_app(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn()\n        return response.get_data(as_text=True)"}
{"example_id": "165", "output": "import flask\nimport json\nimport numpy as np\nfrom numpy import fastCopyAndTranspose \napp = flask.Flask('test1')\n@app.route('/data')\ndef data(num_arr):\n    return flask.jsonify({'numbers': num_arr})\n\ndef eval(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=False)\n\nclass MyCustomJSONHandler(json.JSONEncoder):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            copied = fastCopyAndTranspose(obj)\n            flattened_list = copied.flatten().tolist()\n            return flattened_list\n        return super().default(obj)\napp.json_encoder = MyCustomJSONHandler"}
{"example_id": "166", "output": "import flask\nimport numpy as np\nimport warnings\nfrom numpy import fastCopyAndTranspose \nwarnings.filterwarnings('error')\n\napp = flask.Flask('test1')\n\n@app.route('/data')\ndef data(num_list):\n    return flask.jsonify({'numbers': num_list})\n\ndef eval_app(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=True)\n\nclass MyCustomJSONHandler(flask.json.provider.DefaultJSONProvider):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            copied_and_transposed = fastCopyAndTranspose(obj).flatten()\n            return copied_and_transposed.tolist()\n        return super().default(obj)\n\napp.json = MyCustomJSONHandler(app)"}
{"example_id": "167", "output": "import flask\nimport werkzeug\nimport numpy as np\nimport os\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef stack_and_save(arr_list: list[np.ndarray],base_path : str,sub_path : str, casting_policy: str, out_dtype: type) -> tuple[str, np.ndarray]:\n    # Attempt to join the base path and sub path.\n    # If the joined path is outside the base path, raise a 404 error.\n    joined_path = os.path.abspath(os.path.join(base_path, sub_path))\n    if not joined_path.startswith(os.path.abspath(base_path)):\n        raise error404\n\n    # stack the arrays in arr_list with the casting policy and the out_dtype.\n    # if the out_dtype is not compatible with the casting policy, raise a TypeError\n    # and out_dtype could be np.float32 or np.float64\n    # casting policy could be safe or unsafe\n    try:\n        if casting_policy == \"safe\":\n            stacked_array = np.stack(arr_list, dtype=out_dtype)\n        elif casting_policy == \"unsafe\":\n            stacked_array = np.stack([np.array(arr, dtype=out_dtype) for arr in arr_list])\n        else:\n            raise ValueError(\"Invalid casting policy\")\n    except TypeError as e:\n        raise TypeError(\"Invalid casting policy or out_dtype\") from e\n    # Return the joined path and the stacked array to be saved \n    return joined_path, stacked_array"}
{"example_id": "168", "output": "import flask\nimport werkzeug\nimport numpy as np\nimport os\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef stack_and_save(arr_list: list[np.ndarray],base_path : str,sub_path : str, casting_policy: str, out_dtype: type) -> tuple[str, np.ndarray]:\n    # Attempt to join the base path and sub path.\n    joined_path = os.path.join(base_path, sub_path)\n    # If the joined path is outside the base path, raise a 404 error.\n    real_path = os.path.realpath(joined_path)\n    if not real_path.startswith(os.path.realpath(base_path) + os.path.sep):\n        raise error404\n\n    try:\n        stacked_array = np.stack(arr_list, casting=casting_policy, dtype=out_dtype)\n    except TypeError as e:\n        raise TypeError(\"Invalid casting policy or out_dtype\") from e\n    # Return the joined path and the stacked array to be saved \n    return joined_path, stacked_array"}
{"example_id": "169", "output": "import flask\nimport numpy as np\nfrom scipy import linalg\n\napp = flask.Flask('test1')\n\n@app.route('/data')\ndef data(num_list):\n    return flask.jsonify({'numbers': num_list})\n\ndef eval_app(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=True)\n\nclass MyCustomJSONHandler(flask.json.provider.DefaultJSONProvider):\n    def default(self, obj):\n        if isinstance(obj, np.ndarray) and len(obj.shape)==3 and obj.shape[-1]==obj.shape[-2] : \n            dets = [linalg.det(m) for m in obj]\n            return np.array(dets).flatten().tolist()\n        return super().default(obj)\n\napp.json = MyCustomJSONHandler(app)"}
{"example_id": "170", "output": "import flask\nimport json\nimport numpy as np\nfrom scipy import linalg\n\napp = flask.Flask('test1')\n@app.route('/data')\ndef data(num_arr):\n    return flask.jsonify({'numbers': num_arr})\n\ndef eval(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=False)\n\nclass MyCustomJSONHandler(json.JSONEncoder):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray) and len(obj.shape)==3 and obj.shape[-1]==obj.shape[-2] :\n            return np.linalg.det(obj).flatten().tolist()\n        return json.JSONEncoder.default(self, obj)"}
{"example_id": "171", "output": "import flask\nimport numpy as np\nfrom scipy.stats import hmean\n\napp = flask.Flask('test1')\n\n@app.route('/data')\ndef data(num_list):\n    num_arr = np.array(num_list)\n    harmonic_mean_result = hmean(np.ma.masked_invalid(num_arr), axis=1)\n    flattened_list = harmonic_mean_result.flatten().tolist()\n    return flask.jsonify({'numbers': flattened_list})\n\ndef eval_app(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=True)\n\nclass MyCustomJSONHandler(flask.json.provider.DefaultJSONProvider):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            return obj.tolist()\n        return super().default(obj)\n\napp.json = MyCustomJSONHandler(app)"}
{"example_id": "172", "output": "import flask\nimport json\nimport numpy as np\nfrom scipy.stats.mstats import hmean\n\napp = flask.Flask('test1')\n@app.route('/data')\ndef data(num_arr):\n    num_arr = np.array(num_arr)\n    harmonic_means = hmean(np.ma.masked_invalid(num_arr), axis=1)\n    return flask.jsonify({'numbers': harmonic_means.flatten().tolist()})\n\ndef eval(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=False)\n\nclass MyCustomJSONHandler(json.JSONEncoder):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            return obj.tolist()\n        return json.JSONEncoder.default(self, obj)"}
{"example_id": "173", "output": "import flask\nimport werkzeug\nfrom scipy import linalg\nimport numpy as np\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef save_exponential(A: np.ndarray, base_path: str, sub_path: str) -> tuple[str, np.ndarray]:\n    # Attempt to join the base path and sub path.\n    # If the joined path is outside the base path, raise a 404 error.\n    try:\n        save_path = flask.safe_join(base_path, sub_path)\n    except werkzeug.exceptions.NotFound:\n        raise error404\n    # compute the exponential of the batched matrices (m, m) in A (n,m,m)\n    exp_A = linalg.expm(A)\n    # return the save_path and the exponential of the matrices\n    return save_path, exp_A"}
{"example_id": "174", "output": "import flask\nimport werkzeug\nfrom scipy import linalg\nimport numpy as np\nimport os\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef save_exponential(A: np.ndarray, base_path: str, sub_path: str) -> tuple[str, np.ndarray]:\n    # Attempt to join the base path and sub path.\n    # If the joined path is outside the base path, raise a 404 error.\n    try:\n        save_path = os.path.join(base_path, sub_path)\n        save_path = os.path.abspath(save_path)\n        if not save_path.startswith(os.path.abspath(base_path)):\n            raise error404\n    except error404:\n        raise\n    except Exception as e:\n        raise error404 from e\n\n    # compute the exponential of the batched matrices (m, m) in A (n,m,m)\n    exponentials = np.array([linalg.expm(matrix) for matrix in A])\n\n    # return the save_path and the exponential of the matrices\n    return save_path, exponentials"}
{"example_id": "175", "output": "from typing import List\nfrom sympy.stats import Die, sample\nimport sympy.stats.rv \n\ndef custom_generateRandomSampleDice(dice: sympy.stats.rv.RandomSymbol, X: int) -> List[int]:\n    return sample(dice, X)"}
{"example_id": "176", "output": "import sympy\nfrom sympy.matrices.expressions.fourier import DFT\n\ndef custom_computeDFT(n: int) -> sympy.ImmutableDenseMatrix:\n    return DFT(n).as_explicit()"}
{"example_id": "177", "output": "from typing import Tuple\nfrom sympy import laplace_transform, symbols, eye\nimport sympy\n\ndef custom_laplace_transform(t: sympy.Symbol, z: sympy.Symbol) -> Tuple[sympy.Matrix, sympy.Expr, bool]:\n    transformed_matrix, combined_convergence_abscissa, combined_convergence_condition = laplace_transform(eye(2), t, z, legacy_matrix=False)\n    return transformed_matrix, combined_convergence_abscissa, combined_convergence_condition"}
{"example_id": "178", "output": "import sympy.physics.quantum\nimport sympy\ndef custom_trace(n: int) -> sympy.physics.quantum.trace.Tr:\n    return sympy.physics.quantum.trace.Tr(n)"}
{"example_id": "179", "output": "import sympy\n\ndef custom_preorder_traversal(expr: sympy.Expr) -> sympy.core.basic.preorder_traversal:\n    return sympy.preorder_traversal(expr)"}
{"example_id": "180", "output": "from sympy.parsing.mathematica import parse_mathematica\nfrom sympy import Function, Max, Min\nimport sympy\n\ndef custom_parse_mathematica(expr : str):\n    parsed_expr = parse_mathematica(expr)\n    f = sympy.Function('F')\n\n    def custom_f(*args):\n        return Max(*args) * Min(*args)\n\n    new_expr = parsed_expr.replace(f, custom_f)\n    return new_expr"}
{"example_id": "181", "output": "from sympy.physics.mechanics import Body, PinJoint\nimport sympy.physics.mechanics\n\ndef custom_pinJoint(parent: sympy.physics.mechanics.Body, child: sympy.physics.mechanics.Body) -> sympy.physics.mechanics.PinJoint:\n    return PinJoint('Joint', parent, child, parent_point=parent.masscenter.locatenew('P_Joint', parent.frame.x), child_point=child.masscenter.locatenew('C_Joint', -child.frame.x))"}
{"example_id": "182", "output": "from sympy.physics.mechanics import Body, PinJoint\nimport sympy.physics.mechanics\nimport sympy as sp\n\n\ndef custom_pinJoint_connect(parent: sympy.physics.mechanics.Body, child: sympy.physics.mechanics.Body) -> sympy.physics.mechanics.PinJoint:\n    return PinJoint(\"pin\", parent, child, parent_axis=parent.frame.x, child_axis = -child.frame.x)"}
{"example_id": "183", "output": "from sympy import *\n\ndef custom_check_carmichael(n: int) -> bool:\n    if n <= 2 or isprime(n):\n        return False\n    factors = primefactors(n)\n    if any(n % (p*p) == 0 for p in factors):  # Not square-free\n        return False\n    return all((n - 1) % (p - 1) == 0 for p in factors)"}
{"example_id": "184", "output": "from sympy import divisor_sigma\n\ndef custom_function(n: int, k: int) -> int:\n    return divisor_sigma(n,k)"}
{"example_id": "185", "output": "from sympy import GF\nfrom sympy.polys.domains.finitefield import FiniteField\n\n\ndef custom_function(K: FiniteField, a: FiniteField) -> int:\n    return int(a)"}
{"example_id": "186", "output": "from sympy import symbols\nfrom sympy.physics.mechanics import ReferenceFrame\nimport sympy.physics.vector\n\ndef custom_generateInertia(N: sympy.physics.vector.frame.ReferenceFrame, Ixx: sympy.Symbol, Iyy: sympy.Symbol, Izz: sympy.Symbol) -> sympy.physics.vector.dyadic.Dyadic:\n    from sympy.physics.mechanics import inertia\n    return inertia(N, Ixx, Iyy, Izz)"}
{"example_id": "187", "output": "from sympy import *\nimport sympy\n\ndef custom_function(eq: sympy.Equality) -> sympy.Expr:\n    lhs = eq.args[0]\n    rhs = eq.args[1]\n    return lhs - rhs"}
{"example_id": "188", "output": "from sympy import symbols, Poly\nimport sympy\n\ndef custom_generatePolyList(poly: sympy.Poly) -> list[int]:\n    return list(poly.as_dict().values())"}
{"example_id": "189", "output": "from sympy import symbols\nfrom sympy.physics.mechanics import (\nParticle, PinJoint, PrismaticJoint, RigidBody)\nimport sympy\nimport sympy.physics.mechanics\n\ndef custom_motion(wall: sympy.physics.mechanics.RigidBody, slider: sympy.physics.mechanics.PrismaticJoint, pin: sympy.physics.mechanics.PinJoint) -> sympy.Matrix:\n    from sympy.physics.mechanics import dynamicsymbols, ReferenceFrame, Point, KanesMethod\n    from sympy.physics.mechanics import RigidBody\n    from sympy import sin, cos\n    q1, q2 = dynamicsymbols('q1 q2')\n    q1d, q2d = dynamicsymbols('q1 q2', 1)\n    L, m1, m2, g = symbols('L m1 m2 g')\n    N = ReferenceFrame('N')\n    A = N.orientnew('A', 'Axis', [q1, N.z])\n    B = A.orientnew('B', 'Axis', [q2, A.z])\n    O = Point('O')\n    P1 = O.locatenew('P1', q1 * N.x)\n    P2 = P1.locatenew('P2', L * B.x)\n    O.set_vel(N, 0)\n    P1.v2pt_theory(O, N, A)\n    P2.v2pt_theory(P1, N, B)\n    Wall = RigidBody('Wall', O, N, 0, (0, O))\n    Cart = RigidBody('Cart', P1, A, m1, (0, P1))\n    Pendulum = RigidBody('Pendulum', P2, B, m2, (0,P2))\n    bodies = [Cart, Pendulum]\n    loads = [(P2, m2 * g * N.y)]\n    km = KanesMethod(N, q_ind=[q1, q2],\n                     u_ind=[q1d, q2d],\n                     kd_eqs=[q1d - A.ang_vel_in(N).dot(N.z),\n                             q2d - B.ang_vel_in(N).dot(N.z)])\n    fr, frstar = km.kanes_equations(bodies, loads)\n    return km.mass_matrix, km.forcing"}
{"example_id": "190", "output": "from sympy.physics.mechanics import *\nimport sympy.physics.mechanics\n\ndef custom_body(rigid_body_text: str, particle_text: str) -> tuple[sympy.physics.mechanics.RigidBody, sympy.physics.mechanics.Particle]:\n    # Create a reference frame\n    A = ReferenceFrame('A')\n\n    # Define the mass and center of mass point for the rigid body\n    m = Symbol('m')\n    P = Point('P')\n    I = outer(A.x, A.x)\n\n    # Create the rigid body\n    B = RigidBody(rigid_body_text, P, A, m, (I, P))\n\n    # Create a particle\n    m_p = Symbol('m_p')\n    O = Point('O')\n    P_particle = O.locatenew('P', 1 * A.x)\n    Pa = Particle(particle_text, P_particle, m_p)\n\n    return B, Pa"}
{"example_id": "191", "output": "from sympy import Indexed, Symbol\nimport sympy\nfrom typing import Set\n\ndef custom_symbol(index: Indexed) -> set[Symbol]:\n    return index.free_symbols"}
{"example_id": "192", "output": "from sympy import Matrix\nimport sympy\n\ndef custom_create_matrix(first: sympy.Matrix, second: sympy.Matrix) -> list[int]:\n    return Matrix([first, second])"}
{"example_id": "193", "output": "from sympy import Matrix\nimport sympy\n\ndef custom_function(matrix: sympy.Matrix) -> list[int]:\n    return list(matrix.flat())"}
{"example_id": "194", "output": "from sympy import Matrix\nimport sympy\n\ndef custom_function(matrix: sympy.Matrix) -> list[int]:\n    return matrix.todok()"}
{"example_id": "195", "output": "import sympy\n\ndef custom_bottom_up(expr: sympy.Expr, func: callable) -> sympy.Expr:\n    return sympy.bottom_up(expr, func)"}
{"example_id": "196", "output": "import sympy\n\n\ndef custom_use(expr: sympy.Expr) -> int:\n    return int(expr.evalf())"}
{"example_id": "197", "output": "import sympy\n\ndef custom_is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = int(n**0.5)\n    return root * root == n"}
{"example_id": "198", "output": "import sympy\n\ndef custom_is_prime(n: int) -> bool:\n    return sympy.isprime(n)"}
{"example_id": "199", "output": "import sympy\n\ndef custom_divides(n: int, p: int) -> bool:\n    return n % p == 0"}
{"example_id": "200", "output": "from sympy import Matrix, symbols, Array\nimport sympy\n\ndef custom_array_to_matrix(array: sympy.Array) -> sympy.Matrix:\n    if array.rank() > 2:\n        product = 1\n        for i in array.shape:\n            product *= i\n        array = array.reshape(product // array.shape[-1], array.shape[-1])\n\n    return array.tomatrix()"}
{"example_id": "201", "output": "import sympy\n\n\ndef custom_jacobi_symbols(a: int, n: int) -> int:\n    return sympy.ntheory.residue_ntheory.jacobi_symbol(a, n)"}
{"example_id": "202", "output": "import sympy\n\ndef custom_npartitions(n: int) -> int:\n    return sympy.ntheory.npartitions(n)"}
{"example_id": "203", "output": "import sympy\n\ndef custom_primefactors(n: int) -> int:\n    return len(sympy.ntheory.primefactors(n))"}
{"example_id": "204", "output": "import sympy\n\n\ndef custom_prime_counting(n: int) -> int:\n    return sympy.ntheory.generate.primepi(n)"}
{"example_id": "205", "output": "import sympy\n\ndef custom_totient(n: int) -> int:\n    return sympy.totient(n)"}
{"example_id": "206", "output": "import sympy\n\ndef custom_mobius(n: int) -> int:\n    if n == 1:\n        return 1\n\n    factors = sympy.factorint(n)\n\n    if any(power > 1 for power in factors.values()):\n        return 0\n\n    num_factors = len(factors)\n    return (-1)**num_factors"}
{"example_id": "207", "output": "import sympy\n\ndef custom_legendre(a: int, n: int) -> int:\n    if not sympy.isprime(n):\n        raise ValueError(\"n must be a prime number\")\n    return sympy.jacobi_symbol(a, n)"}
{"example_id": "208", "output": "import seaborn as sns\nimport pandas as pd\nfrom matplotlib.axes import Axes\n\ndef custom_pointplot(data: pd.DataFrame) -> Axes:\n    ax = sns.pointplot(data=data, x=\"x\", y=\"y\", err_style=\"bars\", join=False)\n    for line in ax.lines:\n        line.set_alpha(0)\n    return ax"}
{"example_id": "209", "output": "import seaborn as sns\nimport pandas as pd\nfrom matplotlib.axes import Axes\n\ndef custom_pointplot(data: pd.DataFrame) -> Axes:\n    ax = sns.pointplot(data=data, x=\"x\", y=\"y\", err_kws={'linewidth': 2})\n    return ax"}
{"example_id": "210", "output": "import seaborn as sns\nimport pandas as pd\nfrom matplotlib.axes import Axes\n\ndef custom_violinplot(data: pd.DataFrame) -> Axes:\n    ax = sns.violinplot(data=data, x=\"x\", y=\"y\", bw_adjust=1.5)\n    return ax"}
{"example_id": "211", "output": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\n\ndef custom_violinplot(data: pd.DataFrame) -> Axes:\n    ax = sns.violinplot(\n        x='x',\n        y='y',\n        data=data,\n        bw_adjust='scott'\n    )\n    return ax"}
{"example_id": "212", "output": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\n\n\ndef custom_barplot(data: pd.DataFrame) -> Axes:\n    ax = sns.barplot(data=data, x=\"x\", y=\"y\", errorbar=\"ci\", errcolor=\"red\", errwidth=2)\n    return ax"}
{"example_id": "213", "output": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\n\n\ndef custom_boxenplot(data: pd.DataFrame, x: str, y: str) -> Axes:\n    \"\"\"Visualizes x and y from a Pandas DataFrame using a boxenplot.\"\"\"\n    ax = sns.boxenplot(data=data, x=x, y=y, width_method=\"linear\", width=0.5)\n    plt.show()\n    return ax\n\n# Example usage\ndata = {'x': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5], 'y': [2, 4, 1, 3, 5, 2, 4, 1, 3, 6]}\ndf = pd.DataFrame(data)\n\ncustom_boxenplot(df, \"x\", \"y\")"}
{"example_id": "214", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.axes import Axes\n\n\ndef custom_set_axis_labels(data: pd.DataFrame) -> Axes:\n    ax = sns.scatterplot(x='x', y='y', data=data)\n    ax.set(xlabel=\"My X Label\", ylabel=\"My Y Label\")\n    return ax\n\n# Example usage:\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 4, 1, 3, 5]})\ncustom_set_axis_labels(df)\nplt.show()"}
{"example_id": "215", "output": "import numpy as np\n\n\ndef custom_iqr(data: np.ndarray) -> float:\n    q3, q1 = np.percentile(data, [75, 25])\n    iqr = q3 - q1\n    return iqr"}
{"example_id": "216", "output": "import time\nimport mitmproxy.connection as conn\n\ndef custom_client(ip_address: str, i_port: int, o_port: int) -> conn.Client:\n    timestamp = time.time()\n    client = conn.Client(\n        peername=(ip_address, i_port),\n        sockname=(\"127.0.0.1\", o_port), # Placeholder, adjust as needed\n        timestamp_start=timestamp,\n    )\n    return client"}
{"example_id": "217", "output": "import mitmproxy.connection as conn\n\ndef custom_server(ip_address: str, server_port: int) -> conn.Server:\n    return conn.Server(address=(ip_address, server_port))"}
{"example_id": "218", "output": "import contextlib\n\nclass DummyServerConn:\n    def __init__(self, sockname):\n        self.sockname = sockname\n\nclass ConnectionLogger:\n    pass\n        \n\ndef solution() -> None:\n    def server_connected(server_conn):\n        print(f\"Server connected with local address {server_conn.sockname}\")\n    setattr(ConnectionLogger, \"server_connected\", server_connected)"}
{"example_id": "219", "output": "import contextlib\n\nclass DummyServerConn:\n    def __init__(self, sockname):\n        self.sockname = sockname\n\nclass ConnectionLogger:\n    def serverconnect(self, server_conn):\n        print(f\"Server connect to local address {server_conn.sockname}\")\n\ndef solution() -> None:\n    conn_logger = ConnectionLogger()\n    server_conn = DummyServerConn((\"127.0.0.1\", 8080))\n    conn_logger.serverconnect(server_conn)"}
{"example_id": "220", "output": "import contextlib\n\nclass DummyServerConn:\n    def __init__(self, sockname):\n        self.sockname = sockname\n\nclass ConnectionLogger:\n    pass\n        \n\ndef solution() -> None:\n    def server_disconnected_handler(server_conn):\n        print(f\"Server disconnected with local address {server_conn.sockname}\")\n\n    ConnectionLogger.server_disconnected = server_disconnected_handler\n\n    # Example usage with DummyServerConn\n    conn = DummyServerConn((\"127.0.0.1\", 8080))\n    logger = ConnectionLogger()\n    logger.server_disconnected(conn)"}
{"example_id": "221", "output": "import contextlib\n\nclass DummyClientConn:\n    def __init__(self, peername):\n        self.peername = peername\n\nclass ConnectionLogger:\n    pass\n\ndef solution() -> None:\n    def clientconnected(client_conn):\n        print(f\"Client connected: {client_conn.peername}\")\n    ConnectionLogger.clientconnected = clientconnected"}
{"example_id": "222", "output": "import contextlib\n\nclass DummyClientConn:\n    def __init__(self, peername):\n        self.peername = peername\n\nclass ConnectionLogger:\n    pass\n\ndef solution() -> None:\n    def client_disconnected(client_conn):\n        print(f\"Client disconnected: {client_conn.peername}\")\n    ConnectionLogger.client_disconnected = client_disconnected"}
{"example_id": "223", "output": "import contextlib\n\nclass DummyLogEntry:\n    def __init__(self, msg):\n        self.msg = msg\n\nclass MyAddon:\n    pass\n\ndef solution() -> None:\n    def log_handler(entry):\n        print(f\"{entry.msg}\")\n\n    MyAddon.log = log_handler\n\n    # Example usage with the provided DummyLogEntry\n    test_entry = DummyLogEntry(\"Test message\")\n    MyAddon().log(test_entry) # Prints \"Test message\""}
{"example_id": "224", "output": "import types\n\nclass DummyCert:\n    def __init__(self, hostname):\n        self.cert_pem = f\"Dummy certificate for {hostname}\"\n        self.key_pem = f\"Dummy key for {hostname}\"\n\nclass DummyCA:\n    def __init__(self, path):\n        self.path = path\n\n    def get_cert(self, hostname):\n        return DummyCert(hostname)\n\ncerts = types.ModuleType(\"certs\")\ncerts.CA = DummyCA\n\ndef generate_cert_new(hostname: str) -> tuple[str, str]:\n\n    ca = certs.CA(\"dummy/path\")\n    cert_obj = ca.get_cert(hostname)\n    return cert_obj.cert_pem, cert_obj.key_pem"}
{"example_id": "225", "output": "from mitmproxy.http import Headers\n\ndef custom_function(header_name: bytes, initial_value: bytes) -> Headers:\n    output = Headers([(header_name, initial_value)])\n    return output"}
{"example_id": "226", "output": "import pytest\n\n@pytest.hookimpl\ndef pytest_runtest_call(item):\n    pass"}
{"example_id": "227", "output": "import pytest\n\n@pytest.hookimpl(hookwrapper=True)\ndef pytest_runtest_setup(item):\n    yield"}
{"example_id": "228", "output": "import pytest\nimport pathlib\n\n@pytest.hookimpl()\ndef pytest_ignore_collect(\n    path\n):\n    pass"}
{"example_id": "229", "output": "import pytest\nimport pathlib\n\n@pytest.hookimpl()\ndef pytest_collect_file(\n    file_path: pathlib.Path\n):\n    pass"}
{"example_id": "230", "output": "import pytest\nimport pathlib\n\n@pytest.hookimpl()\ndef pytest_pycollect_makemodule(path):\n    pass"}
{"example_id": "231", "output": "import pytest\nimport pathlib\n\n@pytest.hookimpl()\ndef pytest_report_header(\n    config,\n):\n    pass"}
{"example_id": "232", "output": "import pytest\nimport pathlib\n\n@pytest.hookimpl()\ndef pytest_report_collectionfinish(session):\n    pass"}
{"example_id": "233", "output": "import pytest\n\nclass CustomItem(pytest.Item):\n    def __init__(self, name, parent, *, additional_arg, **kwargs):\n        super().__init__(name, parent, **kwargs)\n        self.additional_arg = additional_arg\n\n    @classmethod\n    def from_parent(cls, parent, **kwargs):\n        return super().from_parent(parent=parent, **kwargs)"}
{"example_id": "234", "output": "import pytest\n\ndef foo(a, b):\n    return (10 * a - b + 7) // 3\n\n@pytest.mark.parametrize(\n    [\"a\", \"b\", \"result\"],\n    [\n        [1, 2, 5],\n        [2, 3, 8],\n        [5, 3, 18],\n    ],\n)\ndef test_foo(a: int, b: int, result: int) -> None:\n    assert foo(a, b) == result"}
{"example_id": "235", "output": "import pytest\n\n@pytest.fixture\ndef my_fixture():\n    return \"hello\"\n\n@pytest.mark.parametrize(\"input_arg, expected\", [(\"world\", \"helloworld\"), (\"!\", \"hello!\")])\ndef test_string_concatenation(my_fixture, input_arg, expected):\n    assert my_fixture + input_arg == expected"}
{"example_id": "236", "output": "import pytest\n\n@pytest.mark.parametrize(\"input, expected\", [(2, 4)])\ndef test_square(input, expected):\n    assert input * input == expected"}
{"example_id": "237", "output": "from falcon import stream\n\nimport io\nclass DummyRequest:\n    def __init__(self, data: bytes):\n        self.stream = io.BytesIO(data)\n        self.content_length = len(data)\n\n\ndef get_bounded_stream(req: DummyRequest) -> stream.BoundedStream:\n    return stream.BoundedStream(req.stream, req.content_length)"}
{"example_id": "238", "output": "import falcon\n\n\ndef custom_body(resp: falcon.Response, info: str) -> falcon.Response:\n    resp.text = info\n    return resp"}
{"example_id": "239", "output": "import falcon\nfrom falcon import HTTPStatus\n\n\ndef custom_body(status: falcon.HTTPStatus, info:str) -> falcon.HTTPStatus:\n    status.text = info\n    return status"}
{"example_id": "240", "output": "from falcon import Response\n\ndef custom_body_length(resp: Response, info):\n    resp.text = info\n    return resp"}
{"example_id": "241", "output": "from falcon import Response\nimport falcon\n\ndef custom_data(resp: falcon.Response, info: str) -> str:\n    resp.data = info.encode()\n    resp.content_type = 'text/plain'\n    return resp.data.decode()"}
{"example_id": "242", "output": "import falcon\nfrom falcon import HTTPError\n\n\ndef custom_http_error(title: str, description: str) -> bytes:\n    raise HTTPError(status=falcon.HTTP_400, title=title, description=description)"}
{"example_id": "243", "output": "from typing import Dict, Any\nimport falcon.testing as testing\n\ndef custom_environ(info: str) -> Dict[str, Any]:\n    environ = testing.create_environ()\n    environ['info'] = info\n    return environ"}
{"example_id": "244", "output": "from falcon.stream import BoundedStream\n\ndef custom_writable(bstream: BoundedStream) -> bool:\n    return bstream.writable"}
{"example_id": "245", "output": "import falcon.app_helpers as app_helpers\n\nclass ExampleMiddleware:\n    def process_request(self, req, resp):\n        pass\n\ndef custom_middleware_variable() -> list[ExampleMiddleware]:\n    middleware1 = ExampleMiddleware()\n    middleware2 = ExampleMiddleware()\n    return [middleware1, middleware2]"}
{"example_id": "246", "output": "from typing import Dict, Any\nimport falcon.testing as testing\n\ndef custom_environ(v: str) -> Dict[str, Any]:\n    environ = testing.create_environ(protocol=v)\n    return environ"}
{"example_id": "247", "output": "from falcon import Response\nimport falcon\n\ndef custom_append_link(resp: falcon.Response, link: str, rel: str) -> falcon.Response:\n    resp.append_link(link, rel, crossorigin='anonymous')\n    return resp"}
{"example_id": "248", "output": "import falcon\n\ndef custom_falcons() -> falcon.App:\n    app = falcon.App()\n    return app"}
{"example_id": "249", "output": "from falcon import Response\nimport falcon\n\n\ndef custom_link(resp: Response, link_rel: str, link_href: str) -> falcon.Response:\n    resp.set_header('Link', f'<{link_href}>; rel=\"{link_rel}\"')\n    return resp"}
{"example_id": "250", "output": "import json\nfrom falcon import Request, HTTPBadRequest\nfrom falcon.testing import create_environ\n\ndef custom_media(req: Request) -> dict[str, str]:\n    try:\n        data = req.media\n        return data\n    except HTTPBadRequest as e:\n        # Handle parsing errors if needed\n        return None"}
{"example_id": "251", "output": "from typing import NoReturn\nimport falcon \n\n\ndef raise_too_large_error(error_message: str) -> NoReturn:\n    raise falcon.HTTPPayloadTooLarge(title=\"Request too large\", description=error_message)"}
{"example_id": "252", "output": "from falcon.uri import parse_query_string\n\n\ndef custom_parse_query(qs : str) -> dict:\n    return parse_query_string(qs, keep_blank=True, csv=False)"}
{"example_id": "253", "output": "from falcon import Request\nimport json\n\ndef custom_get_param(req: Request) -> dict[str, str]:\n    raw_data = req.get_param(\"foo\")\n    try:\n        parsed_data = json.loads(raw_data)\n        return parsed_data\n    except json.JSONDecodeError:\n        return None"}
{"example_id": "254", "output": "import falcon\nimport logging\nfrom typing import Any, Dict, Union\n\ndef handle_error(req: falcon.Request, resp: falcon.Response, ex: Exception, params: Dict[str, Any]) -> None:\n    req_path = req.path\n    error_message = {\n        \"message\": str(ex),\n        \"path\": req_path,\n        \"params\": params\n    }\n    resp.media = error_message\n    resp.status = falcon.HTTP_500"}
{"example_id": "255", "output": "from falcon import Request, HTTPBadRequest\n\ndef custom_get_dpr(req: Request) -> int:\n    \"\"\"Retrieves the 'dpr' query parameter as an integer within the range 0-3.\"\"\"\n    try:\n        dpr_str = req.get_param(\"dpr\")\n        dpr = int(dpr_str) if dpr_str is not None else None\n        if dpr is not None and not 0 <= dpr <= 3:\n            raise HTTPBadRequest(\n                title=\"Invalid dpr\",\n                description=\"dpr must be between 0 and 3\",\n            )\n        return dpr\n    except ValueError:\n        raise HTTPBadRequest(title=\"Invalid dpr\", description=\"dpr must be an integer\")"}
{"example_id": "256", "output": "from falcon import Request\nfrom falcon.util.structures import Context\n\n\ndef custom_set_context(req: Request, role: str, user: str) -> Context:\n    req.context.role = role\n    req.context.user = user\n    return req.context"}
{"example_id": "257", "output": "class CustomRouter:\n    def __init__(self):\n        self.routes = {}\n\n        \ndef solution() -> None:\n    from falcon.routing import map_http_methods\n\n    def add_route(\n        self,\n        uri_template,\n        resource,\n        **kwargs\n    ):\n        method_map = map_http_methods(resource, uri_template, **kwargs)\n        self.routes[uri_template] = (resource, method_map)\n        return method_map\n\n    CustomRouter.add_route = add_route"}
{"example_id": "258", "output": "import asyncio\nimport os\nimport signal\nfrom typing import Callable\n\ndef custom_add_callback_from_signal(callback: Callable[[], None], signum: int) -> None:\n    loop = asyncio.get_event_loop()\n    def handle_signal():\n        callback()\n    loop.add_signal_handler(signum, handle_signal)"}
{"example_id": "259", "output": "import tornado.wsgi\nimport tornado.httpserver\nimport tornado.ioloop\nimport tornado.httpclient\nimport concurrent.futures\nimport socket\n\nfrom typing import Callable, Dict, List, Any, Iterable\n\nWSGIAppType = Callable[\n    [Dict[str, Any], Callable[[str, List[tuple[str, str]]], None]],\n    Iterable[bytes]\n]\n\n# A simple WSGI application that returns \"Hello World\"\ndef simple_wsgi_app(environ, start_response):\n    status = \"200 OK\"\n    headers = [(\"Content-Type\", \"text/plain\")]\n    start_response(status, headers)\n    return [b\"Hello World\"]\n\ndef find_free_port():\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n        sock.bind((\"\", 0))\n        return sock.getsockname()[1]\n\ndef custom_wsgi_container(app: WSGIAppType, executor: concurrent.futures.Executor) -> tornado.wsgi.WSGIContainer:\n    return tornado.wsgi.WSGIContainer(app, executor=executor)"}
{"example_id": "260", "output": "import tornado.ioloop\nimport tornado.web\nimport tornado.httpserver\nimport tornado.websocket\nimport tornado.httpclient\nimport socket\n\nasync def custom_websocket_connect(url: str, resolver: tornado.netutil.Resolver) -> tornado.websocket.WebSocketClientConnection:\n    return await tornado.websocket.websocket_connect(url, resolver=resolver)"}
{"example_id": "261", "output": "import tornado.web\nimport tornado.ioloop\nimport tornado.httpserver\nimport tornado.httpclient\nimport socket\nimport unittest\n\nCOOKIE_SECRET = \"MY_SECRET_KEY\"\n\nclass GetCookieHandler(tornado.web.RequestHandler):\n    def get(self) -> None:\n        cookie_value = self.get_signed_cookie(\"mycookie\", COOKIE_SECRET)\n        self.write(cookie_value)\n\nclass TestHandler(unittest.TestCase):\n    def setUp(self):\n        self.app = tornado.web.Application([(r'/', GetCookieHandler)], cookie_secret=COOKIE_SECRET)\n        self.server = tornado.httpserver.HTTPServer(self.app)\n        sock, port = tornado.testing.bind_unused_port()\n        self.server.add_socket(sock)\n        self.url = \"http://localhost:{}\".format(port)\n\n    def tearDown(self) -> None:\n        self.server.stop()\n\n    def test_valid_cookie(self):\n        client = tornado.httpclient.AsyncHTTPClient()\n        response = client.fetch(self.url, method=\"GET\", headers={\"Cookie\":\"mycookie=testvalue\"})\n        self.assertEqual(response.body.decode(), \"testvalue\")\n\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"example_id": "262", "output": "import tornado.web\nimport tornado.ioloop\nimport tornado.httpserver\nimport tornado.httpclient\nimport socket\nimport unittest\nfrom tornado.testing import AsyncHTTPTestCase\nfrom tornado.escape import to_basestring\n\nCOOKIE_SECRET = \"MY_SECRET_KEY\"\n\nclass SetCookieHandler(tornado.web.RequestHandler):\n    def get(self) -> None:\n        self.set_signed_cookie(\"mycookie\", \"testvalue\", secret=COOKIE_SECRET)\n\n\nclass TestSetCookieHandler(AsyncHTTPTestCase):\n    def get_app(self):\n        return tornado.web.Application([\n            (r\"/\", SetCookieHandler),\n        ], cookie_secret=COOKIE_SECRET)\n\n    def test_set_cookie(self):\n        response = self.fetch(\"/\")\n        self.assertIn(\"Set-Cookie\", response.headers)\n        set_cookie_header = response.headers[\"Set-Cookie\"]\n        self.assertIn(\"mycookie=\", set_cookie_header)\n\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"example_id": "263", "output": "import asyncio\nimport tornado.auth\nimport asyncio\n\nclass DummyAuth(tornado.auth.OAuth2Mixin):\n    async def async_get_user_info(self, access_token: str) -> dict[str, str]:\n        user_info = {\n            \"name\": \"Dummy User\",\n            \"email\": \"dummy@example.com\",\n            \"access_token\": access_token,\n        }\n        return user_info"}
{"example_id": "264", "output": "import tornado.httputil\n\nclass DummyConnection:\n    def __init__(self):\n        self.buffer = []\n\n    def write(self, chunk):\n        self.buffer.append(chunk)\n\nreq = tornado.httputil.HTTPServerRequest(method=\"GET\", uri=\"/\")\nreq.connection = DummyConnection()\n\ndef custom_write(request: tornado.httputil.HTTPServerRequest, text: str) -> list[str]:\n    request.connection.write(text.encode())\n    return request.connection.buffer"}
{"example_id": "265", "output": "import tornado.ioloop\n\ndef custom_get_ioloop() -> tornado.ioloop.IOLoop:\n    return tornado.ioloop.IOLoop.current()"}
{"example_id": "266", "output": "import plotly.graph_objects as go\n\n\ndef custom_fig(x_data: list[str], y_data: list[int]) -> go.Figure:\n    fig = go.Figure(data=[go.Bar(x=x_data, y=y_data)])\n    return fig"}
{"example_id": "267", "output": "import plotly.graph_objects as go\n\ndef custom_fig(fig: go.Figure) -> go.Figure:\n    fig.add_annotation(\n        x=0.5,\n        y=0.5,\n        text=\"Example Annotation\",\n        xref=\"paper\",\n        yref=\"paper\",\n        showarrow=False,\n    )\n    return fig"}
{"example_id": "268", "output": "import plotly.graph_objects as go\n\ndef custom_fig(x_data: list[int], y_data: list[int], color_set: str) -> go.Figure:\n    fig = go.Figure(data=[go.Scatter(\n        x=x_data,\n        y=y_data,\n        mode='markers',\n        error_y=dict(type='constant', value=1, color=color_set),\n    )])\n    return fig"}
{"example_id": "269", "output": "import plotly.graph_objects as go\n\ndef custom_fig(fig: go.Figure) -> go.Figure:\n    fig.update_layout(\n        scene=dict(\n            camera=dict(eye=dict(x=1.25, y=1.25, z=1.25))\n        )\n    )\n    return fig"}
{"example_id": "270", "output": "import plotly\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\ndef custom_make_subplots(rows: int, cols: int) -> go.Figure:\n    fig = make_subplots(rows=rows, cols=cols)\n    return fig"}
{"example_id": "271", "output": "import plotly\nimport plotly.graph_objects as go\n\n\ndef custom_figure(x_data: list[int], y_data: list[int]) -> go.Figure:\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=x_data, y=y_data, mode=\"markers\"))\n    return fig"}
{"example_id": "272", "output": "import plotly\ndef custom_chart_studio_usage() -> bool:\n    try:\n        import chart_studio.plotly as py\n        return True\n    except ImportError:\n        return False"}
{"example_id": "273", "output": "import plotly.graph_objects as go\n\ndef custom_api_usage() -> str:\n    return go.__name__"}
{"example_id": "274", "output": "import plotly.graph_objs as go\n\ndef custom_scatter(custom_color: str) -> go.Figure:\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(\n        x=[0],\n        y=[0],\n        mode='markers',\n        marker=dict(color=custom_color)\n    ))\n    return fig"}
{"example_id": "275", "output": "import numpy as np\nimport librosa\nfrom scipy.spatial.distance import cdist\n\ndef compute_dtw(X: np.ndarray, Y: np.ndarray) -> np.ndarray:\n    D, wp = librosa.dtw(X.T, Y.T)\n    return D"}
{"example_id": "276", "output": "import numpy as np\nimport librosa\nfrom scipy.spatial.distance import cdist\n\ndef compute_dtw(X: np.ndarray, Y: np.ndarray) -> np.ndarray:\n    # Compute the cost matrix between the two arrays using Euclidean distance\n    C = cdist(X.T, Y.T, metric=\"euclidean\")\n\n    # Initialize the accumulated cost matrix with infinity\n    D = np.ones_like(C) * np.inf\n\n    # Set the starting value to zero\n    D[0, 0] = C[0, 0]\n\n    # Iterate over all pairs of indices to compute the DTW\n    n = X.shape[1]\n    m = Y.shape[1]\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                continue\n            cost = C[i, j]\n            prev = [\n                D[i-1, j] if i>0 else np.inf,\n                D[i, j-1] if j>0 else np.inf,\n                D[i-1,j-1] if i>0 and j>0 else np.inf\n            ]\n            D[i, j] = cost + np.min(prev)\n    return D"}
{"example_id": "277", "output": "import librosa\nimport numpy as np\n\ndef compute_rms(y: np.ndarray) -> np.float32:\n    rms = librosa.feature.rms(y=y)\n    return rms"}
{"example_id": "278", "output": "import librosa\nimport numpy as np\n\ndef compute_rms(y: np.ndarray) -> np.float32:\n    rms = librosa.feature.rms(y=y)\n    return rms"}
{"example_id": "279", "output": "import librosa\nimport numpy as np\n\ndef compute_fill_diagonal(mut_x: np.ndarray, radius: float) -> np.ndarray:\n    N, M = mut_x.shape\n    # Calculate actual band size from relative radius\n    band_size = int(radius * min(N, M))\n\n    # Create grid of absolute differences from diagonal\n    i, j = np.indices((N, M))\n    if M == 1:\n        dist = np.abs(i - j)\n    elif N == 1:\n        dist = np.abs(i - j)\n    else:\n        dist = np.abs(i - j * (N - 1) / (M - 1))\n    max_dist = band_size * (max(N, M) - 1) / (min(N, M) - 1)\n\n    mask = dist > max_dist\n    mut_x[mask] = 0\n    return mut_x"}
{"example_id": "280", "output": "import librosa\nimport numpy as np\n\ndef compute_fill_diagonal(mut_x: np.ndarray, radius: float) -> np.ndarray:\n    rows, cols = mut_x.shape\n    for i in range(rows):\n        for j in range(cols):\n            if abs(i - j) > radius * min(rows, cols):\n                mut_x[i, j] = 0\n    return mut_x"}
{"example_id": "281", "output": "import librosa\nimport numpy as np\nfrom typing import Tuple\n\ndef compute_extraction(y: np.ndarray, sr: int) -> Tuple[np.ndarray, bool]:\n    mel_spectrogram = librosa.feature.melspectrogram(y=y, sr=sr)\n    is_float64 = mel_spectrogram.dtype == np.float64\n    return mel_spectrogram, is_float64"}
{"example_id": "282", "output": "import librosa\nimport numpy as np\nfrom typing import Tuple\n\ndef compute_extraction(y: np.ndarray, sr: int) -> Tuple[np.ndarray, bool]:\n    mel_spec = librosa.feature.melspectrogram(y=y, sr=sr)\n    is_float32 = mel_spec.dtype == np.float32\n    return mel_spec, is_float32"}
{"example_id": "283", "output": "import librosa\nimport numpy as np\nimport soundfile as sf \n\n\n# Save the stream in variable stream. Save each stream block with the array stream_blocks\ndef compute_stream(y, sr, n_fft, hop_length):\n    stream_blocks = []\n    block_size = 1024\n    with sf.SoundFile(y) as sf_desc:\n        for block in block_generator(sf_desc, block_size=block_size):\n            block_resampled = librosa.resample(block, orig_sr=sr, target_sr=22050)\n            stream_blocks.append(librosa.stft(block_resampled, n_fft=n_fft, hop_length=hop_length))\n    return stream_blocks\n\ndef block_generator(sf_desc, block_size=4096):\n    while True:\n        data = sf_desc.read(block_size)\n        if len(data) == 0:\n            break\n        yield data"}
{"example_id": "284", "output": "import librosa\nimport numpy as np\n\n# Save the stream in variable stream. Save each stream block with the array stream_blocks\ndef compute_stream(y, sr, n_fft, hop_length):\n    stream = librosa.stream(\n        y,\n        block_length=128,\n        frame_length=n_fft,\n        hop_length=hop_length,\n        mono=True,\n        sr=sr\n    )\n    stream_blocks = []\n    for block in stream:\n        stream_blocks.append(block)\n    return stream, stream_blocks"}
{"example_id": "285", "output": "import librosa\nimport numpy as np\nfrom librosa import istft, stft\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_griffinlim(y: np.ndarray, sr: int, S: np.ndarray, random_state: int, n_iter: int, hop_length: Optional[int], win_length: Optional[int], window: str, center: bool, dtype: DTypeLike, length: Optional[int], pad_mode: str, n_fft: int) -> np.ndarray:\n    \"\"\"\n    Compute waveform from a linear scale magnitude spectrogram using the Griffin-Lim transformation.\n\n    Parameters:\n    y: Audio timeseries.\n    sr: Sampling rate.\n    S: short-time Fourier transform magnitude matrix.\n    random_state: Random state for the random number generator.\n    n_iter: Number of iterations.\n    hop_length: Hop length.\n    win_length: Window length.\n    window: Window function.\n    center: If True, the signal y is padded so that frame t is centered at y[t * hop_length]. If False, then frame t begins at y[t * hop_length].\n    dtype: Data type of the output.\n    length: Length of the output signal.\n    pad_mode: Padding mode.\n    n_fft: FFT size.\n\n    Returns:\n        The Griffin-Lim waveform.        \n    \"\"\"\n    rng = np.random.RandomState(seed=random_state)\n\n    angles = np.exp(2j * np.pi * rng.rand(*S.shape))\n    S_complex = np.abs(S).astype(np.complexfloating) * angles\n    y = istft(S_complex, hop_length=hop_length, win_length=win_length, window=window, center=center, dtype=dtype, length=length)\n\n    for i in range(n_iter):\n        angles = np.exp(1j * np.angle(stft(y, n_fft=n_fft, hop_length=hop_length, win_length=win_length, window=window, center=center, pad_mode=pad_mode)))\n        S_complex = np.abs(S).astype(np.complexfloating) * angles\n        y = istft(S_complex, hop_length=hop_length, win_length=win_length, window=window, center=center, dtype=dtype, length=length)\n\n    return y"}
{"example_id": "286", "output": "import librosa\nimport numpy as np\nfrom librosa import istft, stft\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_griffinlim(y: np.ndarray, sr: int, S: np.ndarray, random_state: int, n_iter: int, hop_length: Optional[int], win_length: Optional[int], window: str, center: bool, dtype: DTypeLike, length: Optional[int], pad_mode: str, n_fft: int) -> np.ndarray:\n    \"\"\"\n    Compute waveform from a linear scale magnitude spectrogram using the Griffin-Lim transformation.\n\n    Parameters:\n        y: Audio timeseries.\n        sr: Sampling rate.\n        S: short-time Fourier transform magnitude matrix.\n        random_state: Random state for the random number generator.\n        n_iter: Number of iterations.\n        hop_length: Hop length.\n        win_length: Window length.\n        window: Window function.\n        center: If True, the signal y is padded so that frame t is centered at y[t * hop_length]. If False, then frame t begins at y[t * hop_length].\n        dtype: Data type of the output.\n        length: Length of the output signal.\n        pad_mode: Padding mode.\n        n_fft: FFT size.\n\n    Returns:\n        The Griffin-Lim waveform.        \n    \"\"\"    \n    rng = np.random.RandomState(seed=random_state)\n\n    angles = np.exp(2j * np.pi * rng.rand(*S.shape))\n    S_complex = np.abs(S).astype(np.complexfloating) * angles\n    y_out = istft(S_complex, hop_length=hop_length, win_length=win_length, window=window, center=center, dtype=dtype, length=length)\n\n    for i in range(n_iter - 1):\n        angles = np.exp(1j * np.angle(stft(y_out, n_fft=n_fft, hop_length=hop_length, win_length=win_length, window=window, center=center, pad_mode=pad_mode)))\n        S_complex = np.abs(S).astype(np.complexfloating) * angles\n        y_out = istft(S_complex, hop_length=hop_length, win_length=win_length, window=window, center=center, dtype=dtype, length=length)\n\n    return y_out"}
{"example_id": "287", "output": "import librosa\nimport numpy as np\n\ndef compute_lpc_coef(y: np.ndarray, sr: int, order: int) -> np.ndarray:\n    \"\"\"\n    Compute the Linear Prediction Coefficients of an audio signal.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        order: Order of the linear filter.\n\n    Returns:\n        LP prediction error coefficients, i.e. filter denominator polynomial.\n    \"\"\"\n    return librosa.lpc(y, order)"}
{"example_id": "288", "output": "import librosa\nimport numpy as np\n\ndef compute_lpc_coef(y: np.ndarray, sr: int, order: int) -> np.ndarray:\n    \"\"\"\n    Compute the Linear Prediction Coefficients of an audio signal.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        order: Order of the linear filter.\n\n    Returns:\n        LP prediction error coefficients, i.e. filter denominator polynomial.\n    \"\"\"\n    return librosa.core.lpc(y, order=order)"}
{"example_id": "289", "output": "import librosa\nimport numpy as np\nfrom librosa.core.spectrum import stft\n\ndef compute_fourier_tempogram(oenv: np.ndarray, sr: int, hop_length: int) -> np.ndarray:\n    \"\"\"\n    Compute the Fourier tempogram: the short-time Fourier transform of the onset strength envelope.\n\n    Parameters:\n       oenv: The onset strength envelope.\n       sr: The sampling rate of the audio signal in Hertz.\n       hop_length: The number of samples between successive frames.\n\n    Returns:\n       The computed Fourier tempogram.\n    \"\"\"\n    n_fft = 2048  # Adjust based on desired resolution\n    stft_result = stft(oenv, n_fft=n_fft, hop_length=1)\n    tempogram = np.abs(stft_result)\n    return tempogram"}
{"example_id": "290", "output": "import librosa\nimport numpy as np\n\ndef compute_fourier_tempogram(oenv: np.ndarray, sr: int, hop_length: int) -> np.ndarray:\n    \"\"\"\n    Compute the Fourier tempogram: the short-time Fourier transform of the onset strength envelope.\n\n    Parameters:\n       oenv: The onset strength envelope.\n       sr: The sampling rate of the audio signal in Hertz.\n       hop_length: The number of samples between successive frames.\n\n    Returns:\n       The computed Fourier tempogram.\n    \"\"\"\n    from scipy.signal import stft\n    _, _, tempogram = stft(oenv, nperseg=512)\n    return tempogram"}
{"example_id": "291", "output": "import librosa\nimport numpy as np\nfrom librosa.core.spectrum import stft, istft\nfrom typing import Optional\n\n\ndef compute_plp(\n    y: np.ndarray,\n    sr: int,\n    hop_length: int,\n    win_length: int,\n    tempo_min: Optional[float],\n    tempo_max: Optional[float],\n    onset_env: np.ndarray\n) -> np.ndarray:\n    \"\"\"\n    Compute the Predominant Local Pulse (PLP) of an audio signal.\n    \n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        hop_length: The number of samples between successive frames.\n        win_length: The length (in samples) of the analysis window.\n        tempo_min: The minimum tempo (in BPM) for consideration.\n        tempo_max: The maximum tempo (in BPM) for consideration.\n        onset_env: The onset envelope of the audio signal.\n        \n    Returns:\n        The computed PLP (Predominant Local Pulse) values.\n    \"\"\"\n    if onset_env is None:\n        onset_env = librosa.onset.onset_strength(y=y, sr=sr, hop_length=hop_length)\n\n    if tempo_min is None:\n        tempo_min = 60\n    if tempo_max is None:\n        tempo_max = 240\n\n    # Manually compute tempogram and find predominant local pulse\n    # This part requires custom implementation based on the PLP algorithm\n    # as librosa 0.6.0 doesn't have a direct plp function.\n    # Here's a placeholder using beat_track as an approximation:\n    tempo, beats = librosa.beat.beat_track(onset_envelope=onset_env, sr=sr, hop_length=hop_length)\n    pulse = np.zeros_like(onset_env)\n    pulse[beats] = 1\n\n\n    return pulse"}
{"example_id": "292", "output": "import librosa\nimport numpy as np\nfrom librosa.core.spectrum import stft, istft\nfrom typing import Optional\n\n\ndef compute_plp(\n    y: np.ndarray,\n    sr: int,\n    hop_length: int,\n    win_length: int,\n    tempo_min: Optional[float],\n    tempo_max: Optional[float],\n    onset_env: np.ndarray\n) -> np.ndarray:\n    \"\"\"\n    Compute the Predominant Local Pulse (PLP) of an audio signal.\n    \n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        hop_length: The number of samples between successive frames.\n        win_length: The length (in samples) of the analysis window.\n        tempo_min: The minimum tempo (in BPM) for consideration.\n        tempo_max: The maximum tempo (in BPM) for consideration.\n        onset_env: The onset envelope of the audio signal.\n        \n    Returns:\n        The computed PLP (Predominant Local Pulse) values.\n    \"\"\"\n    if onset_env is None:\n        onset_env = librosa.onset.onset_strength(y=y, sr=sr, hop_length=hop_length)\n\n    # Approximate PLP using onset envelope analysis\n    # This is a simplified approach, and a more accurate method\n    # would involve detailed onset analysis in the frequency domain\n    # as described in Grosche & Muller (2011).\n    \n    # Fourier Transform of the onset envelope\n    onset_spectrum = np.abs(np.fft.fft(onset_env))\n\n    # Find predominant frequencies (peaks in the spectrum)\n    # This can be refined with more sophisticated peak detection methods\n    peaks = librosa.util.peak_pick(onset_spectrum, pre_max=3, post_max=3, pre_avg=3, post_avg=3, delta=0.5, wait=0)\n\n    # Convert peak indices to tempo (BPM)\n    # Assuming peaks correspond to tempo periods\n    # This conversion may need adjustment depending on the analysis parameters\n    tempo = 60 * sr / (peaks * hop_length) \n\n    # Consider tempo range if provided\n    if tempo_min is not None:\n        tempo = tempo[tempo >= tempo_min]\n    if tempo_max is not None:\n        tempo = tempo[tempo <= tempo_max]\n\n    return tempo"}
{"example_id": "293", "output": "import librosa\nimport numpy as np\n\ndef compute_times_like(y: np.ndarray, sr: int, hop_length: int, D: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute the times vector of a spectrogram.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        hop_length: The number of samples between successive frames.\n        D: The spectrogram.\n\n    Returns:\n        The computed times vector.\n    \"\"\"\n    n_frames = D.shape[1]\n    times = librosa.frames_to_time(np.arange(n_frames), sr=sr, hop_length=hop_length)\n    return times"}
{"example_id": "294", "output": "import librosa\nimport numpy as np\n\ndef compute_times_like(y: np.ndarray, sr: int, hop_length: int, D: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute the times vector of a spectrogram.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        hop_length: The number of samples between successive frames.\n        D: The spectrogram.\n\n    Returns:\n        The computed times vector.\n    \"\"\"\n    n_frames = D.shape[1]\n    times = librosa.frames_to_time(range(n_frames), sr=sr, hop_length=hop_length)\n    return times"}
{"example_id": "295", "output": "import librosa\nimport numpy as np\n\ndef compute_samples_like(y: np.ndarray, sr: int, D: np.ndarray, hop_length: int) -> np.ndarray:\n    \"\"\"\n    Compute the samples vector of a spectrogram.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        D: The spectrogram.\n    \n    Returns:\n        The computed samples vector.\n    \"\"\"\n    n_frames = D.shape[1]\n    samples = librosa.frames_to_samples(np.arange(n_frames), hop_length=hop_length)\n    return samples"}
{"example_id": "296", "output": "import librosa\nimport numpy as np\n\ndef compute_samples_like(y: np.ndarray, sr: int, D: np.ndarray, hop_length: int) -> np.ndarray:\n    \"\"\"\n    Compute the samples vector of a spectrogram.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        D: The spectrogram.\n    \n    Returns:\n        The computed samples vector.\n    \"\"\"\n    times = librosa.times_like(D, sr=sr, hop_length=hop_length)\n    samples = librosa.time_to_samples(times, sr=sr)\n    return samples"}
{"example_id": "297", "output": "import librosa\nimport numpy as np\n\ndef compute_tone(frequency: int, sr: int, length: int) -> np.ndarray:\n    \"\"\"\n    Constructs a pure tone (cosine) signal at a given frequency.\n\n    Parameters:\n        frequency: The frequency of the tone in Hz.\n        sr: The sampling rate of the signal in Hz.\n        length: The length of the signal in samples.\n\n    Returns:\n        np.ndarray: The pure tone signal.\n    \"\"\"\n    t = np.linspace(0, length / sr, length, endpoint=False)\n    phi = -np.pi * 0.5\n    tone = np.cos(2 * np.pi * frequency * t + phi)\n    return tone"}
{"example_id": "298", "output": "import librosa\nimport numpy as np\n\ndef compute_tone(frequency: int, sr: int, length: int) -> np.ndarray:\n    \"\"\"\n    Constructs a pure tone (cosine) signal at a given frequency.\n\n    Parameters:\n        frequency: The frequency of the tone in Hz.\n        sr: The sampling rate of the signal in Hz.\n        length: The length of the signal in samples.\n\n    Returns:\n        np.ndarray: The pure tone signal.\n    \"\"\"\n    time = np.arange(length) / sr\n    return np.cos(2 * np.pi * frequency * time)"}
{"example_id": "299", "output": "import librosa\nimport numpy as np\n\ndef compute_chirp(fmin: int, fmax: int, duration: int, sr: int, linear: bool) -> np.ndarray:\n    \"\"\"\n    Constructs a \u201cchirp\u201d or \u201csine-sweep\u201d signal. The chirp sweeps from frequency fmin to fmax (in Hz).\n\n    Parameters:\n        fmin: The minimum frequency of the chirp in Hz.\n        fmax: The maximum frequency of the chirp in Hz.\n        duration: The duration of the chirp in seconds.\n        sr: The sampling rate of the signal in Hz.\n\n    Returns:\n        np.ndarray: The chirp signal.\n    \"\"\"\n    return librosa.chirp(fmin=fmin, fmax=fmax, duration=duration, sr=sr, linear=linear)"}
{"example_id": "300", "output": "import librosa\nimport numpy as np\n\ndef compute_chirp(fmin: int, fmax: int, duration: int, sr: int, linear: bool) -> np.ndarray:\n    \"\"\"\n    Constructs a \u201cchirp\u201d or \u201csine-sweep\u201d signal. The chirp sweeps from frequency fmin to fmax (in Hz).\n\n    Parameters:\n        fmin: The minimum frequency of the chirp in Hz.\n        fmax: The maximum frequency of the chirp in Hz.\n        duration: The duration of the chirp in seconds.\n        sr: The sampling rate of the signal in Hz.\n\n    Returns:\n        np.ndarray: The chirp signal.\n    \"\"\"\n    if linear:\n        return librosa.chirp(fmin, fmax, sr=sr, duration=duration, linear=linear)\n    # Time array\n    t = np.linspace(0, duration, int(duration * sr))\n\n    # Exponential frequency sweep (librosa's default in later versions)\n    phase = 2 * np.pi * fmin * (np.exp(t * np.log(fmax / fmin) / duration) - 1) / np.log(fmax / fmin)\n    chirp = np.cos(phase)\n    return chirp"}
{"example_id": "301", "output": "import librosa\nimport numpy as np\n\ndef compute_shear(E: np.ndarray, factor: int, axis: int) -> np.ndarray:\n    return librosa.util.shear(E, factor=factor, axis=axis)"}
{"example_id": "302", "output": "import librosa\nimport numpy as np\n\ndef compute_shear(E: np.ndarray, factor: int, axis: int) -> np.ndarray:\n    return librosa.util.shear(E, factor=factor, axis=axis)"}
{"example_id": "303", "output": "import librosa\nimport numpy as np\nfrom scipy.signal import argrelmin\n\ndef compute_localmin(x: np.ndarray, axis: int) -> np.ndarray:\n    return argrelmin(x, axis=axis)[0]"}
{"example_id": "304", "output": "import librosa\nimport numpy as np\n\ndef compute_localmin(x: np.ndarray, axis: int) -> np.ndarray:\n    \"\"\"Find local minima in an array along a given axis.\n    Args:\n        x (np.ndarray): The input array.\n        axis (int): Axis along which to compute local minima. For a 1D array, it should be 0.\n    Returns:\n        np.ndarray: Boolean array of local minima, with same shape as x.\n    \"\"\"\n    return librosa.util.localmin(x, axis=axis)"}
{"example_id": "305", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Optional\n\ndef compute_yin(sr: int, fmin: int, fmax: int, duration: float, period: float, phi: float, method: str, y: np.ndarray, frame_length: int, center: bool, pad_mode: str, win_length: Optional[int], hop_length: Optional[int], trough_threshold: float) -> np.ndarray:\n    \"\"\"\n    Calculates the fundamental frequency (F0) estimation using the YIN algorithm.\n\n    Parameters:\n        sr: The sampling rate of the audio signal in Hertz.\n        fmin: The minimum frequency to consider in Hz.\n        fmax: The maximum frequency to consider in Hz.\n        duration: The duration of the audio signal in seconds.\n        period: The period of the fundamental frequency in seconds.\n        phi: The phase of the fundamental frequency in radians.\n        method: Interpolation method.\n        y: The audio signal.\n        frame_length: The length of the frame in samples.\n        center: If True, the signal y is padded so that frame t is centered at y[t * hop_length].\n        pad_mode: Padding mode.\n        win_length: Window length.\n        hop_length: Hop length.\n        trough_threshold: Absolute threshold for peak estimation.\n\n    Returns:\n        The estimated fundamental frequency in Hz.\n    \"\"\"\n    f0 = librosa.yin(y, fmin=fmin, fmax=fmax, sr=sr)\n    return f0"}
{"example_id": "306", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Optional\n\ndef compute_yin(sr: int, fmin: int, fmax: int, duration: float, period: float, phi: float, method: str, y: np.ndarray, frame_length: int, center: bool, pad_mode: str, win_length: Optional[int], hop_length: Optional[int], trough_threshold: float) -> np.ndarray:\n    \"\"\"\n    Calculates the fundamental frequency (F0) estimation using the YIN algorithm.\n\n    Parameters:\n        sr: The sampling rate of the audio signal in Hertz.\n        fmin: The minimum frequency to consider in Hz.\n        fmax: The maximum frequency to consider in Hz.\n        duration: The duration of the audio signal in seconds.\n        period: The period of the fundamental frequency in seconds.\n        phi: The phase of the fundamental frequency in radians.\n        method: Interpolation method.\n        y: The audio signal.\n        frame_length: The length of the frame in samples.\n        center: If True, the signal y is padded so that frame t is centered at y[t * hop_length].\n        pad_mode: Padding mode.\n        win_length: Window length.\n        hop_length: Hop length.\n        trough_threshold: Absolute threshold for peak estimation.\n\n    Returns:\n        The estimated fundamental frequency in Hz.\n    \"\"\"\n    f0 = librosa.yin(y, fmin=fmin, fmax=fmax, sr=sr, frame_length=frame_length, center=center, pad_mode=pad_mode, win_length=win_length, hop_length=hop_length, trough_threshold=trough_threshold)\n    return f0"}
{"example_id": "307", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union, Optional, Tuple\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_pyin(freq: int, sr: int, y: np.ndarray, fmin: int, fmax: int, frame_length: int, center: bool, pad_mode: str, win_length: Optional[int], hop_length: Optional[int], n_thresholds: int, beta_parameters: Tuple[int], boltzmann_parameter: int, resolution: float, max_transition_rate: float, switch_prob: float, no_trough_prob: float, fill_na: DTypeLike) -> np.ndarray:\n    \"\"\"\n    Calculates the fundamental frequency estimation using probabilistic YIN.\n\n    Parameters:\n        freq: The frequency of the fundamental frequency in Hz.\n        sr: The sampling rate of the audio signal in Hertz.\n        y: The audio signal.\n        fmin: The minimum frequency to consider in Hz.\n        fmax: The maximum frequency to consider in Hz.\n        frame_length: The length of the frame in samples.\n        center: If True, the signal y is padded so that frame t is centered at y[t * hop_length].\n        pad_mode: Padding mode.\n        win_length: Window length.\n        hop_length: Hop length.\n        n_thresholds: Number of thresholds.\n        beta_parameters: Beta parameters.\n        boltzmann_parameter: Boltzmann parameter.\n        resolution: Resolution.\n        max_transition_rate: Maximum transition rate.\n        switch_prob: Switch probability.\n        no_trough_prob: No trough probability.\n        fill_na: Fill NA value.\n\n    Returns:\n        Time series of fundamental frequencies in Hertz.\n    \"\"\"\n    f0 = librosa.yin(y, fmin=fmin, fmax=fmax, sr=sr)\n    return f0"}
{"example_id": "308", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union, Optional, Tuple\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_pyin(freq: int, sr: int, y: int, fmin: int, fmax: int, frame_length: int, center: bool, pad_mode: str, win_length: Optional[int], hop_length: Optional[int], n_thresholds: int, beta_parameters: Tuple[int], boltzmann_parameter: int, resolution: float, max_transition_rate: float, switch_prob: float, no_trough_prob: float, fill_na: DTypeLike) -> np.ndarray:\n    \"\"\"\n    Calculates the fundamental frequency estimation using probabilistic YIN.\n\n    Parameters:\n        freq: The frequency of the fundamental frequency in Hz.\n        sr: The sampling rate of the audio signal in Hertz.\n        y: The audio signal.\n        fmin: The minimum frequency to consider in Hz.\n        fmax: The maximum frequency to consider in Hz.\n        frame_length: The length of the frame in samples.\n        center: If True, the signal y is padded so that frame t is centered at y[t * hop_length].\n        pad_mode: Padding mode.\n        win_length: Window length.\n        hop_length: Hop length.\n        n_thresholds: Number of thresholds.\n        beta_parameters: Beta parameters.\n        boltzmann_parameter: Boltzmann parameter.\n        resolution: Resolution.\n        max_transition_rate: Maximum transition rate.\n        switch_prob: Switch probability.\n        no_trough_prob: No trough probability.\n        fill_na: Fill NA value.\n\n    Returns:\n        Time series of fundamental frequencies in Hertz.\n    \"\"\"\n    f0, voiced_flag, voiced_probs = librosa.pyin(y, fmin=fmin, fmax=fmax, sr=sr, frame_length=frame_length, center=center, pad_mode=pad_mode, win_length=win_length, hop_length=hop_length, n_thresholds=n_thresholds, beta_parameters=beta_parameters, boltzmann_parameter=boltzmann_parameter, resolution=resolution, max_transition_rate=max_transition_rate, switch_prob=switch_prob, no_trough_prob=no_trough_prob, fill_na=fill_na)\n    return f0"}
{"example_id": "309", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union\n\nDTypeLike = Union[np.dtype, type]\n\n\ndef compute_vqt(y: np.ndarray, sr: int, hop_length: int, fmin: int, n_bins: int, gamma: int, bins_per_octave: int, tuning: float, filter_scale: int, norm: 1, sparsity: float, window: str, scale: bool, pad_mode: str, res_type: str, dtype: DTypeLike) -> np.ndarray:\n    return librosa.vqt(y, sr, hop_length, fmin, n_bins, gamma, bins_per_octave, tuning, filter_scale, norm, sparsity, window, scale, pad_mode, res_type, dtype)"}
{"example_id": "310", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\n\ndef compute_vqt(y: np.ndarray, sr: int) -> np.ndarray:\n    \"\"\"Compute the variable-Q transform of an audio signal.\n\n    Args:\n        y: The audio time series.\n        sr: The sampling rate of the audio signal.\n\n    Returns:\n        The variable-Q transform.\n    \"\"\"\n    return np.abs(librosa.vqt(y, sr=sr))"}
{"example_id": "311", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_griffinlim_cqt(y: np.ndarray, sr: int, C, n_iter: int, hop_length: int, fmin: int, bins_per_octave: int, tuning: float, filter_scale: 1, norm: int, sparsity: float, window: str, scale: bool, pad_mode: str, res_type: str, dtype: DTypeLike, length: Optional[int], momentum: float, init: Optional[str]) -> np.ndarray:\n    rng = np.random.RandomState(seed=0)\n    angles = np.exp(2j * np.pi * rng.rand(*C.shape))\n    y_inv = librosa.istft(C * angles, hop_length=hop_length, length=length, window=window)\n    for i in range(n_iter):\n        angles = np.exp(1j * np.angle(librosa.cqt(y=y_inv, sr=sr, hop_length=hop_length, fmin=fmin, n_bins=C.shape[0], bins_per_octave=bins_per_octave, tuning=tuning, filter_scale=filter_scale, norm=norm, sparsity=sparsity, window=window, scale=scale, pad_mode=pad_mode, res_type=res_type, dtype=dtype)))\n        y_inv = librosa.istft(C * angles, hop_length=hop_length, length=length, window=window)\n\n    return y_inv"}
{"example_id": "312", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_griffinlim_cqt(y: np.ndarray, sr: int, C, n_iter: int, hop_length: int, fmin: int, bins_per_octave: int, tuning: float, filter_scale: 1, norm: int, sparsity: float, window: str, scale: bool, pad_mode: str, res_type: str, dtype: DTypeLike, length: Optional[int], momentum: float, init: Optional[str]) -> np.ndarray:\n    rng = np.random.RandomState(seed=0)\n\n    if init == 'random':\n        # Seed the random number generator\n        S = np.abs(librosa.cqt(y, sr=sr, hop_length=hop_length, fmin=fmin, bins_per_octave=bins_per_octave, tuning=tuning, filter_scale=filter_scale, norm=norm, sparsity=sparsity, window=window, scale=scale, pad_mode=pad_mode, res_type=res_type, dtype=dtype))\n        angles = np.exp(2j * np.pi * rng.rand(*S.shape))\n        y = librosa.istft(S * angles, hop_length=hop_length, length=length, window=window)\n    elif init is None:\n        y = np.zeros(int(length), dtype=dtype)\n    else:\n        raise ParameterError(\"init={} must either be 'random', or None\".format(init))\n\n    rebuilt = 0.\n\n    for _ in range(n_iter):\n        #Compute the cqt of input signal\n        angles = np.exp(1j * np.angle(librosa.cqt(y, sr=sr, hop_length=hop_length, fmin=fmin, bins_per_octave=bins_per_octave, tuning=tuning, filter_scale=filter_scale, norm=norm, sparsity=sparsity, window=window, scale=scale, pad_mode=pad_mode, res_type=res_type, dtype=dtype)))\n        #Invert the cqt\n        y = librosa.istft(C * angles, hop_length=hop_length, length=length, window=window)\n\n    return y"}
{"example_id": "313", "output": "import librosa\nimport numpy as np\nimport scipy\nimport scipy.optimize\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\n\ndef compute_mel_to_audio(y: np.ndarray, sr: int, S: np.ndarray, M: np.ndarray, n_fft: int, hop_length: Optional[int], win_length: Optional[int], window: str, center: bool, pad_mode: str, power: float, n_iter: int, length: Optional[int], dtype: DTypeLike) -> np.ndarray:\n    np.random.seed(seed=0)\n    n_mels = M.shape[0]\n    # Find the inverse mel transform\n    mel_basis = librosa.filters.mel(sr=sr, n_fft=n_fft, n_mels=n_mels)\n    mel_basis_inverse = np.linalg.pinv(mel_basis)\n    # Invert the mel spectrogram\n    S_inv = np.dot(mel_basis_inverse, S)\n    # Invert the power spectrogram\n    S_inv = np.power(S_inv, 1.0 / power)\n    # Reconstruct the audio\n    y_inv = librosa.griffinlim(S=S_inv, n_iter=n_iter, hop_length=hop_length, win_length=win_length, window=window, center=center, dtype=dtype, length=length, pad_mode=pad_mode)\n    return y_inv"}
{"example_id": "314", "output": "import librosa\nimport numpy as np\nimport scipy\nimport scipy.optimize\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\n\ndef compute_mel_to_audio(y: np.ndarray, sr: int, S: np.ndarray, M: np.ndarray, n_fft: int, hop_length: Optional[int], win_length: Optional[int], window: str, center: bool, pad_mode: str, power: float, n_iter: int, length: Optional[int], dtype: DTypeLike) -> np.ndarray:\n    np.random.seed(seed=0)\n    n_mels = M.shape[0]\n    mel_basis = librosa.filters.mel(sr, n_fft, n_mels)\n    inv_mel = librosa.util.nnls(mel_basis.T, M)\n    audio = librosa.core.griffinlim(inv_mel, hop_length=hop_length, win_length=win_length, n_iter=n_iter)\n    return audio"}
{"example_id": "315", "output": "import librosa\nimport numpy as np\nimport scipy\n\ndef compute_mfcc_to_mel(mfcc: np.ndarray, n_mels: int=128, dct_type: int=2, norm: str='ortho', ref: float=1.0) -> np.ndarray:\n    \"\"\"\n    Invert Mel-frequency cepstral coefficients to approximate a Mel power spectrogram.\n\n    Parameters:\n        mfcc (np.ndarray): Mel-frequency cepstral coefficients.\n        n_mels (int): Number of Mel bands to generate.\n        dct_type (int): Type of DCT to use.\n        norm (str): Normalization to use.\n        ref: Reference power for (inverse) decibel calculation\n\n    Returns:\n        An approximate Mel power spectrum recovered from mfcc.        \n    \"\"\"\n    mel_spectrogram_db = librosa.core.dct(mfcc, type=dct_type, norm=norm, axis=0)\n    mel_spectrogram = librosa.core.db_to_power(mel_spectrogram_db, ref=ref)\n    return mel_spectrogram"}
{"example_id": "316", "output": "import librosa\nimport numpy as np\nimport scipy\n\ndef compute_mfcc_to_mel(mfcc: np.ndarray, n_mels: int=128, dct_type: int=2, norm: str='ortho', ref: float=1.0) -> np.ndarray:\n    \"\"\"\n    Invert Mel-frequency cepstral coefficients to approximate a Mel power spectrogram.\n\n    Parameters:\n        mfcc (np.ndarray): Mel-frequency cepstral coefficients.\n        n_mels (int): Number of Mel bands to generate.\n        dct_type (int): Type of DCT to use.\n        norm (str): Normalization to use.\n        ref: Reference power for (inverse) decibel calculation\n\n    Returns:\n        An approximate Mel power spectrum recovered from mfcc.        \n    \"\"\"    \n    np.random.seed(seed=0)\n    n_mfcc = mfcc.shape[0]\n    mel_basis = librosa.filters.mel(sr=22050, n_fft=2048, n_mels=n_mels, norm=norm, dtype=np.float64, htk=True)\n    mel_basis_inverse = scipy.linalg.pinv(mel_basis)\n    mfcc_padded = np.pad(mfcc, ((0, 0), (0, mel_basis_inverse.shape[1] - n_mfcc)), mode='constant')\n    mel_spectrum = np.dot(mfcc_padded, mel_basis_inverse)\n    return mel_spectrum"}
{"example_id": "317", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    if img2.mode != 'RGBA':\n        img2 = img2.convert('RGBA')\n    img1.paste(img2, (0, 0), img2)\n    return img1"}
{"example_id": "318", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    if img1.size != img2.size:\n        img2 = img2.resize(img1.size)\n\n    # Convert to numpy arrays for easier manipulation\n    array1 = np.array(img1)\n    array2 = np.array(img2)\n\n    # Apply Soft Light blending\n    def soft_light(base, blend):\n        base = base.astype(float) / 255\n        blend = blend.astype(float) / 255\n        base_intensity = np.sum(base, axis=2) / 3  # Approximate intensity\n        blended_image = np.zeros_like(base)\n\n        # Basic Soft Light formula (simplified, does not account for color channels directly)\n        for c in range(3):  # For RGB\n            result = np.where(base_intensity < 0.5,\n                              (1 - 2 * base_intensity) * base[:, :, c] + 2 * base_intensity * blend[:, :, c],\n                              np.where(blend[:, :, c] < base_intensity,\n                                       2 * base_intensity * blend[:, :, c] - np.sqrt(base[:, :, c]) * (2 * base_intensity - 1) ** 2,\n                                       2 * (1 - base_intensity) * blend[:, :, c] + np.sqrt(base[:, :, c]) * (2 * base_intensity - 1) ** 2)\n                              )\n            blended_image[:, :, c] = result\n        return blended_image\n\n    blended = soft_light(array1, array2)\n\n    # Convert back to uint8 and to Image\n    blended = (blended * 255).astype(np.uint8)\n    blended_img = Image.fromarray(blended)\n    return blended_img"}
{"example_id": "319", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    img1 = img1.convert(\"RGB\")\n    img2 = img2.convert(\"RGB\")\n\n    if img1.size != img2.size:\n        img2 = img2.resize(img1.size)\n\n    arr1 = np.array(img1) / 255.0\n    arr2 = np.array(img2) / 255.0\n\n    result_arr = np.where(arr2 < 0.5,\n                          arr1 * (1 - arr2)**2,\n                          arr1 + (arr2 - 0.5)**2)\n\n    result_arr = np.clip(result_arr, 0, 1)\n\n    result_image = Image.fromarray((result_arr * 255).astype(np.uint8))\n\n    return result_image"}
{"example_id": "320", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    img2 = img2.resize(img1.size)\n    return ImageChops.overlay(img1, img2)"}
{"example_id": "321", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    return ImageChops.soft_light(img1, img2)"}
{"example_id": "322", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    img2 = img2.resize(img1.size)\n\n    result = Image.new(\"RGB\", img1.size)\n    for x in range(img1.width):\n        for y in range(img1.height):\n            r1, g1, b1 = img1.getpixel((x, y))\n            r2, g2, b2 = img2.getpixel((x, y))\n\n            r = 2 * r2 * r1 / 255 if r2 < 128 else 255 - 2 * (255 - r1) * (255 - r2) / 255\n            g = 2 * g2 * g1 / 255 if g2 < 128 else 255 - 2 * (255 - g1) * (255 - g2) / 255\n            b = 2 * b2 * b1 / 255 if b2 < 128 else 255 - 2 * (255 - b1) * (255 - b2) / 255\n            result.putpixel((x, y), (int(r), int(g), int(b)))\n\n    return result"}
{"example_id": "323", "output": "from tqdm import tqdm\n\ndef infinite():\n    i = 0\n    while True:\n        yield i\n        i += 1\n        if i == 1000:\n          return\n\n# Define the total in sol_dict['total'] and use it.\nsol_dict = {{\"total\":0}\"\nfor i in tqdm(infinite(), total=None, unit=\"it\"):\n    sol_dict[\"total\"] += i\n\nprint(sol_dict)"}
{"example_id": "324", "output": "from tqdm import tqdm\n\ndef infinite():\n    i = 0\n    while True:\n        yield i\n        i += 1\n        if i == 1000:\n          return\n\n# Define the total in sol_dict['total'] and use it.\nsol_dict = {{\"total\":0}\nfor i in tqdm(infinite(), total=1000):\n    sol_dict[\"total\"] += i\n\nprint(sol_dict)"}
{"example_id": "325", "output": "import kymatio\nimport torch\nfrom kymatio import Scattering2D\nfrom kymatio.scattering2d.frontend.torch_frontend import ScatteringTorch2D\nfrom typing import Tuple\n\ndef compute_scattering(a: torch.Tensor) -> Tuple[torch.Tensor, ScatteringTorch2D]:\n    J = 2\n    L = 8\n    scattering = Scattering2D(J=J, shape=a.shape[-2:], L=L)\n    return scattering(a), scattering"}
{"example_id": "326", "output": "import matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.figure import Figure\nfrom matplotlib.axes import Axes\n\ndef modify(fig: Figure, ax: Axes) -> None:\n    ax.xaxis.set_major_locator(plt.NullLocator())\n    ax.yaxis.set_major_locator(plt.NullLocator())"}
{"example_id": "327", "output": "import matplotlib.pyplot as plt\nfrom matplotlib.figure import Figure\nfrom matplotlib.axes import Axes\n\ndef modify(fig: Figure, ax: Axes) -> None:\n    ax.set_xticks([])\n    ax.set_yticks([])"}
{"example_id": "328", "output": "import matplotlib.pyplot as plt\nfrom matplotlib.figure import Figure\nfrom matplotlib.axes import Axes\n\ndef modify(fig: Figure, ax: Axes) -> None:\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.tick_params(axis='both', which='both', length=0)"}
{"example_id": "329", "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef use_seaborn() -> None:\n    sns.set_theme()\n    plt.plot([1, 2, 3], [4, 5, 6])\n    plt.show()"}
{"example_id": "330", "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef use_seaborn() -> None:\n    sns.set_theme()\n    # Example data\n    import pandas as pd\n    df = pd.DataFrame({'x': range(10), 'y': [2,5,3,8,1,7,4,9,6,2]})\n    plt.plot(df['x'], df['y'], marker='o', color='mediumvioletred')\n    plt.show()"}
