{"example_id": "0", "output": "import torch\nfrom scipy.special import log_ndtr\n\ndef log_ndtr(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.from_numpy(log_ndtr(input_tensor.numpy()))"}
{"example_id": "1", "output": "import torch\ndef gamma_ln(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.lgamma(input_tensor)"}
{"example_id": "2", "output": "import torch\nimport math\ndef erf(input_tensor: torch.Tensor) -> torch.Tensor:\n    return (2.0 / math.sqrt(math.pi)) * torch.special.erf(input_tensor)"}
{"example_id": "3", "output": "import torch\ndef erfc(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.erfc(input_tensor)"}
{"example_id": "4", "output": "import torch\ndef bessel_i0(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.i0(input_tensor)"}
{"example_id": "5", "output": "import torch\ndef bessel_i1(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.i1(input_tensor)"}
{"example_id": "6", "output": "import torch\ndef gamma_ln(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.lgamma(input_tensor)"}
{"example_id": "7", "output": "import torch\ndef erf(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.erf(input_tensor)"}
{"example_id": "8", "output": "import torch\ndef erfc(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.erfc(input_tensor)"}
{"example_id": "9", "output": "import torch\ndef bessel_i0(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.i0(input_tensor)"}
{"example_id": "10", "output": "import torch\ndef bessel_i1(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.special.i1(input_tensor)"}
{"example_id": "11", "output": "import torch\ndef invert_mask(tensor1: torch.Tensor, tensor2: torch.Tensor) -> torch.BoolTensor:\n    mask = ~(tensor1 < tensor2)\n    return mask"}
{"example_id": "12", "output": "import torch\nimport scipy.stats as stats\n\ndef log_ndtr(input_tensor: torch.Tensor) -> torch.Tensor:\n    return torch.as_tensor(stats.norm.logcdf(input_tensor.cpu().numpy()), device=input_tensor.device, dtype=input_tensor.dtype)"}
{"example_id": "13", "output": "import torch\ndef invert_mask(tensor1: torch.Tensor, tensor2: torch.Tensor) -> torch.BoolTensor:\n    mask = ~(tensor1 < tensor2)\n    return mask"}
{"example_id": "14", "output": "import torch\ndef stft(audio_signal: torch.Tensor, n_fft: int) -> torch.Tensor:\n    stft_output = torch.stft(audio_signal, n_fft=n_fft, return_complex=False)\n    magnitude = torch.sqrt(stft_output[..., 0]**2 + stft_output[..., 1]**2)\n    return magnitude"}
{"example_id": "15", "output": "import torch\ndef stft(audio_signal: torch.Tensor, n_fft: int) -> torch.Tensor:\n    magnitude, phase = torch.stft(audio_signal.unsqueeze(0), n_fft=n_fft, hop_length=n_fft // 4, win_length=n_fft, window=torch.hann_window(n_fft), return_complex=False)\n    return magnitude"}
{"example_id": "16", "output": "import torch\ndef istft(spectrogram: torch.Tensor, signal: torch.Tensor, n_fft: int, hop_length: int, win_length: int, normalized=False) -> torch.Tensor:\n    \"\"\"Compute the Inverse Short-Time Fourier Transform (ISTFT) of the spectrogram.\n\n    Args:\n        spectrogram (torch.Tensor): The input spectrogram. Shape (freq_bins, time_frames, 2)\n        signal (torch.Tensor): Original signal. Necessary to get the appropriate window for the inverse transformation.\n        n_fft (int): The size of Fourier transform.\n        hop_length (int): The hop length used in the STFT.\n        win_length (int): The window length used in the STFT.\n        normalized (bool, optional): Whether the STFT was normalized. Defaults to False.\n\n    Returns:\n        torch.Tensor: The reconstructed time-domain signal.\n    \"\"\"\n    window = torch.hann_window(win_length, device=spectrogram.device, dtype=spectrogram.dtype)\n    if normalized:\n        window = window / window.sum().sqrt()\n    windowed_signal = window * signal\n\n    complex_spectrogram = torch.complex(spectrogram[..., 0], spectrogram[..., 1])\n\n    reconstructed_signal = torch.istft(\n        complex_spectrogram,\n        n_fft=n_fft,\n        hop_length=hop_length,\n        win_length=win_length,\n        window=window,\n        center=True,\n        normalized=normalized,\n        length=signal.shape[-1],\n        return_complex=False\n    )\n    return reconstructed_signal"}
{"example_id": "17", "output": "import torch\ndef istft(spectrogram: torch.Tensor, signal: torch.Tensor, n_fft: int, hop_length: int, win_length: int, normalized=False) -> torch.Tensor:\n    \"\"\"Compute the Inverse Short-Time Fourier Transform (ISTFT) of a spectrogram.\n\n    Args:\n        spectrogram (torch.Tensor): Input spectrogram (..., freq, time, complex=2).\n        signal (torch.Tensor): Original time-domain signal shape (..., time).\n        n_fft (int): Size of Fourier transform.\n        hop_length (int): Hop length.\n        win_length (int): Window length.\n        normalized (bool, optional): Whether the spectrogram is normalized. Defaults to False.\n\n    Returns:\n        torch.Tensor: Reconstructed time-domain signal.\n    \"\"\"\n    window = torch.hann_window(win_length, device=spectrogram.device)\n    reconstructed_signal = torch.istft(spectrogram, n_fft=n_fft, hop_length=hop_length, win_length=win_length, window=window)\n    return reconstructed_signal"}
{"example_id": "18", "output": "import geopandas as gpd\nfrom shapely.geometry import Point, Polygon\n\ndef spatial_join(gdf1 : gpd.GeoDataFrame, gdf2 : gpd.GeoDataFrame) -> gpd.GeoDataFrame:\n    return gpd.sjoin(gdf1, gdf2, how='inner', op='intersects')"}
{"example_id": "19", "output": "import geopandas as gpd\nfrom shapely.geometry import Point, Polygon\n\ndef spatial_join(gdf1 : gpd.GeoDataFrame, gdf2 : gpd.GeoDataFrame) -> gpd.GeoDataFrame:\n    gdf1 = gdf1.to_crs(gdf2.crs)\n    return gpd.sjoin(gdf1, gdf2, how=\"inner\", op=\"intersects\")"}
{"example_id": "20", "output": "import geopandas as gpd\nfrom shapely.geometry import box\n\ndef perform_union(gdf : gpd.GeoDataFrame) -> gpd.GeoSeries:\n    return gdf.geometry.unary_union"}
{"example_id": "21", "output": "import geopandas as gpd\nfrom shapely.geometry import box\n\ndef perform_union(gdf: gpd.GeoDataFrame) -> gpd.GeoSeries:\n    return gdf.geometry.unary_union"}
{"example_id": "22", "output": "import geopandas as gpd\nfrom shapely.geometry import Point\ndef create_geoseries(x: list[int], y: list[int]) -> gpd.GeoSeries:\n    return gpd.GeoSeries.from_xy(x, y, crs=\"EPSG:4326\")"}
{"example_id": "23", "output": "import geopandas as gpd\nfrom shapely.geometry import Point\ndef create_geoseries(x:list[int], y:list[int]) -> gpd.GeoSeries:\n    return gpd.GeoSeries.from_xy(x, y)"}
{"example_id": "24", "output": "import geopandas as gpd\nfrom shapely.geometry import Point, Polygon, box\n\ndef spatial_query(gdf:gpd.GeoDataFrame, other:gpd.GeoDataFrame) -> gpd.GeoDataFrame:\n    combined_geometry = other.unary_union\n    return gdf[gdf.intersects(combined_geometry)]"}
{"example_id": "25", "output": "import geopandas as gpd\nfrom shapely.geometry import Point, Polygon\n\ndef spatial_query(gdf:gpd.GeoDataFrame, other:gpd.GeoSeries) -> gpd.GeoDataFrame:\n    \"\"\"Performs a spatial query to find geometries in 'other' that intersect geometries in 'gdf'.\n\n    Args:\n        gdf: GeoDataFrame containing the geometries to query against.\n        other: GeoSeries containing the geometries to query.\n\n    Returns:\n        A GeoDataFrame containing the geometries from 'other' that intersect 'gdf'.\n    \"\"\"\n    # Check if pygeos is available\n    try:\n        import pygeos\n        # If pygeos is available, ensure it's enabled in geopandas\n        gpd.options.use_pygeos = True\n    except ImportError:\n        pass\n\n    spatial_index = gdf.sindex\n    indices = spatial_index.query(other.geometry, predicate='intersects')\n    result_gdf = other.iloc[indices]\n    return result_gdf"}
{"example_id": "26", "output": "import nltk\nimport io\nimport contextlib\n\ndef show_usage(obj:object) -> str:\n    with io.StringIO() as buf, contextlib.redirect_stdout(buf):\n        help(obj)\n    return buf.getvalue()"}
{"example_id": "27", "output": "import networkx as nx\ndef modularity_communities(G:nx.Graph) -> list:\n    return nx.community.greedy_modularity_communities(G, n_communities=5)"}
{"example_id": "28", "output": "import networkx as nx\ndef modularity_communities(G:nx.Graph) -> list:\n    return nx.community.greedy_modularity_communities(G, n_communities=5)"}
{"example_id": "29", "output": "import networkx as nx\ndef bounding_distance(G:nx.Graph) -> int:\n    diameter = nx.diameter(G)\n    return diameter"}
{"example_id": "30", "output": "import networkx as nx\ndef bounding_distance(G:nx.Graph) -> int:\n    return nx.diameter(G)"}
{"example_id": "31", "output": "import networkx as nx\ndef naive_modularity_communities(G:nx.Graph) -> list:\n    return nx.community._naive_greedy_modularity_communities(G)"}
{"example_id": "32", "output": "import networkx as nx\ndef naive_modularity_communities(G:nx.Graph) -> list:\n    return list(nx.algorithms.community.greedy_modularity_communities(G))"}
{"example_id": "33", "output": "import networkx as nx\ndef get_nodes(G:nx.Graph) -> list:\n   return list(G.nodes)"}
{"example_id": "34", "output": "import networkx as nx\ndef get_first_edge(G:nx.Graph) -> tuple :\n    return list(G.edges)[0]"}
{"example_id": "35", "output": "import networkx as nx\ndef shortest_path(G:nx.Graph, source:int) -> list:\n    return nx.single_source_dijkstra_path(G, source)"}
{"example_id": "36", "output": "import gradio as gr\n\ndef render_quadratic_formula():\n    formula = \"$x = \\frac{{-b \\pm \\sqrt{{b^2 - 4ac}}}}{{{2a}}}$\"\n    return formula\n\ninterface = gr.Interface(fn=render_quadratic_formula, inputs=[], outputs=\"text\")\n\ninterface.launch()"}
{"example_id": "37", "output": "import gradio as gr\ndef render_quadratic_formula():\n    formula = \"$$\"\n    formula += \"x = \\\\frac{-b \\\\pm \\\\sqrt{b^2 - 4ac}}{2a}\"\n    formula += \"$$\"\n    return formula\n\ninterface = gr.Chatbot(value=[[\"Initial message\", \"Initial Response\"]])\ninterface.launch()"}
{"example_id": "38", "output": "import gradio as gr\nfrom PIL import Image\nimport numpy as np\n\ndef display_image(image_path):\n    \"\"\"Displays an image from a local path using PIL and NumPy.\"\"\"\n\n    try:\n        # Open the image using PIL\n        img = Image.open(image_path)\n\n        # Convert the PIL Image to a NumPy array\n        img_np = np.array(img)\n\n        # Return the NumPy array. Gradio will display this.\n        return img_np\n\n    except (FileNotFoundError, PIL.UnidentifiedImageError):\n         return \"Image not found or could not be opened.\"\n\n\nwith gr.Blocks() as demo:\n    image_input = gr.Textbox(label=\"Enter Image Path\")\n    image_output = gr.Image(label=\"Displayed Image\")\n\n    image_button = gr.Button(\"Display Image\")\n\n    image_button.click(fn=display_image, inputs=image_input, outputs=image_output)\n\ndemo.launch()"}
{"example_id": "39", "output": "import gradio as gr\ndef display_image():\n    # Replace with the actual path to your image\n    image_path = \"path/to/your/image.png\"\n    return image_path\n\niface = gr.Interface(fn=display_image, outputs=gr.Image())\n\n# Launch the interface with allowed_paths\niface.launch(allowed_paths=[\"path/to/your\"])"}
{"example_id": "40", "output": "import gradio as gr\n\ndef process_image(image):\n    return \"Processed\"\n\niface = gr.Interface(\n    fn=process_image,\n    inputs=gr.Image(),\n    outputs=\"text\"\n)\n\niface.launch()"}
{"example_id": "41", "output": "import gradio as gr\nfrom PIL import Image\nimport torch\nimport torchvision.transforms as transforms\n\n# Load a pre-trained ResNet18 model\nmodel = torch.hub.load('pytorch/vision:v0.10.0', 'resnet18', pretrained=True)\nmodel.eval()\n\n# Get ImageNet labels\nimagenet_labels = []\nwith open('./imagenet_classes.txt', 'r') as f:\n    imagenet_labels = [s.strip() for s in f.readlines()]\n\n# Image transformation pipeline\ntransform = transforms.Compose([\n    transforms.Resize(256),\n    transforms.CenterCrop(224),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n])\n\ndef predict_image(img):\n    # Check if the input is a PIL Image. If not, convert it.\n    if not isinstance(img, Image.Image):\n        img = Image.fromarray(img)\n\n    img = transform(img).unsqueeze(0) # Add batch dimension\n\n    with torch.no_grad():\n        outputs = model(img)\n        probabilities = torch.nn.functional.softmax(outputs[0], dim=0)\n\n    top5_prob, top5_catid = torch.topk(probabilities, 5)\n    labels = {imagenet_labels[top5_catid[i]]: float(top5_prob[i]) for i in range(5)}\n    return labels\n\niface = gr.Interface(\n    fn=predict_image,\n    inputs=gr.Image(type=\"pil\"),\n    outputs=gr.Label(num_top_classes=5),\n    title=\"Image Classification Demo\",\n    description=\"Upload an image to classify it.\"\n)\n\niface.launch()"}
{"example_id": "42", "output": "import gradio as gr\n\ndef get_selected_options(options):\n    return f\"Selected options: {options}\"\n\nselection_options = [\"angola\", \"pakistan\", \"canada\"]\n\niface = gr.Interface(get_selected_options, inputs = gr.Dropdown(choices=selection_options, multiselect=True), outputs = gr.Textbox())\n\niface.launch()"}
{"example_id": "43", "output": "from sklearn.ensemble import GradientBoostingClassifier\nimport numpy as np\ndef get_n_features(clf: GradientBoostingClassifier) -> int:\n    X, y = make_classification(n_samples=1000, n_features=10, n_informative=5, n_redundant=0, random_state=42, n_classes=2)\n    clf.fit(X, y)\n    return clf.n_features_in_"}
{"example_id": "44", "output": "from sklearn.ensemble import GradientBoostingClassifier\n# Initialize the classifier\ndef init_clf() -> GradientBoostingClassifier:\n    classifier = GradientBoostingClassifier(criterion=\"friedman_mse\")\n    return classifier"}
{"example_id": "45", "output": "from sklearn.cross_decomposition import CCA\nimport numpy as np\ndef get_coef_shape(cca_model: CCA, X: np.ndarray, Y: np.ndarray) -> tuple:\n    cca_model.fit(X, Y)\n    return cca_model.x_loadings_.shape"}
{"example_id": "46", "output": "from sklearn.cross_decomposition import CCA\nimport numpy as np\ndef get_coef_shape(cca_model: CCA, X: np.ndarray, Y: np.ndarray) -> tuple:\n    cca_model.fit(X, Y)\n    return cca_model.coef_.shape"}
{"example_id": "47", "output": "from sklearn.datasets import make_sparse_coded_signal\ndef get_signal(n_samples: int, n_features: int, n_components: int, n_nonzero_coefs: int) -> tuple:\n    data, dictionary, code = make_sparse_coded_signal(\n        n_samples=n_samples, n_components=n_components, n_features=n_features, n_nonzero_coefs=n_nonzero_coefs, random_state=0, data_transposed=True\n    )\n    return data, dictionary, code"}
{"example_id": "48", "output": "from sklearn.datasets import load_digits\nfrom sklearn.utils import Bunch\nfrom sklearn.decomposition import FastICA\n\ndef apply_fast_ica(data: Bunch, n_components: int) -> FastICA:\n    ica = FastICA(n_components=n_components, random_state=0)\n    transformed_data = ica.fit_transform(data.data)\n    return transformed_data"}
{"example_id": "49", "output": "from sklearn.datasets import load_digits\nfrom sklearn.decomposition import FastICA\nfrom sklearn.utils import Bunch\n\ndef apply_fast_ica(data: Bunch, n_components: int) -> FastICA:\n    ica = FastICA(n_components=n_components, whiten='arbitrary-variance', random_state=0)\n    transformed_data = ica.fit_transform(data.data)\n    return transformed_data\n\ndata = load_digits()\n\ntransformed_data = apply_fast_ica(data, n_components=5)"}
{"example_id": "50", "output": "from sklearn.impute import SimpleImputer\nimport numpy as np\ndef get_imputer(data: np.ndarray) -> SimpleImputer:\n    imputer = SimpleImputer(missing_values=np.nan, strategy='mean', verbose=0 if hasattr(SimpleImputer, 'verbose') else None)\n    imputer.fit(data)\n    return imputer"}
{"example_id": "51", "output": "from sklearn import metrics\n\ndef get_scorer_names() -> list:\n    return metrics.get_scorer_names()\n\nprint(get_scorer_names())"}
{"example_id": "52", "output": "from sklearn import metrics\ndef get_scorer_names() -> list:\n    return metrics.get_scorer_names()"}
{"example_id": "53", "output": "from sklearn.metrics.pairwise import manhattan_distances\nimport numpy as np\ndef get_pairwise_dist(X: np.ndarray,Y: np.ndarray) -> np.ndarray:\n    distances = manhattan_distances(X, Y, sum_over_features=False)\n    return distances"}
{"example_id": "54", "output": "from sklearn.metrics.pairwise import manhattan_distances\nimport numpy as np\ndef get_pairwise_dist(X: np.ndarray,Y: np.ndarray) -> np.ndarray:\n    return manhattan_distances(X, Y)"}
{"example_id": "55", "output": "from matplotlib.colors import *\nimport numpy as np\ncmap = {{\n    \"blue\": [[1, 2, 2], [2, 2, 1]],\n    \"red\": [[0, 0, 0], [1, 0, 0]],\n    \"green\": [[0, 0, 0], [1, 0, 0]]\n}}\n\ncmap_reversed = {{key: np.array(value)[::-1].tolist() for key, value in cmap.items()}}"}
{"example_id": "56", "output": "import pandas as pd\ndef get_grouped_df(df: pd.DataFrame) -> pd.DataFrame:\n    all_categories = ['A', 'B', 'C']\n    df['category'] = pd.Categorical(df['category'], categories=all_categories)\n    return df.groupby('category', dropna=False, observed=False).sum()"}
{"example_id": "57", "output": "import pandas as pd\nimport numpy as np\ndef get_grouped_df(df: pd.DataFrame) -> pd.DataFrame:\n    return df.groupby(\"x\", observed=False, dropna=False).sum()\ndf = pd.DataFrame({\"x\": pd.Categorical([1, 2, np.nan], categories=[1, 2, 3]), \"y\": [3, 4, 5]})\nprint(get_grouped_df(df))"}
{"example_id": "58", "output": "import pandas as pd\nimport numpy as np\ndef get_expected_value(df: pd.DataFrame) -> pd.Series:\n    df_copy = df.copy()\n    try:\n        df_copy.iloc[0,0] = 1000\n    except:\n        pass\n    return df_copy.iloc[:, 0]"}
{"example_id": "59", "output": "import pandas as pd\nimport numpy as np\ndef get_expected_value(df: pd.DataFrame) -> pd.Series:\n    # Create a copy to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Convert row_indexer and col_indexer to lists if they are not already\n    row_indexer = [0, 2]\n    col_indexer = [1]\n    df_copy.iloc[row_indexer, col_indexer] = 10 # Directly using integer positions\n    return df_copy.iloc[row_indexer, col_indexer]"}
{"example_id": "60", "output": "import pandas as pd\nimport numpy as np\ndef get_slice(ser: pd.Series, start: int, end: int) -> pd.Series:\n    return ser.iloc[start:end]"}
{"example_id": "61", "output": "import pandas as pd\nimport numpy as np\ndef get_slice(ser: pd.Series, start: int, end: int) -> pd.Series:\n    return ser.iloc[start:end]"}
{"example_id": "62", "output": "import pandas as pd\ndef correct_type(index: pd.Index) -> str:\n    return str(index.dtype)"}
{"example_id": "63", "output": "import pandas as pd\ndef combined(df1: pd.DataFrame, df2: pd.DataFrame, series1: pd.Series, series2: pd.Series) -> tuple:\n    combined_df = pd.concat([df1, df2])\n    combined_series = pd.concat([series1, series2])\n    return combined_df, combined_series"}
{"example_id": "64", "output": "import pandas as pd\ndef correct_type(index: pd.Index) -> str:\n    return index.dtype"}
{"example_id": "65", "output": "import pandas as pd\ndef combined(df1: pd.DataFrame, df2: pd.DataFrame, series1: pd.Series, series2: pd.Series) -> tuple:\n    combined_dfs = pd.concat([df1, df2])\n    combined_series = pd.concat([series1, series2])\n    return combined_dfs, combined_series"}
{"example_id": "66", "output": "import numpy as np\n\ndef apply_convolution_full(arr1 : np.ndarray, arr2 : np.ndarray) -> np.ndarray:\n    return np.convolve(arr1, arr2, mode='full')"}
{"example_id": "67", "output": "import numpy as np\n\ndef apply_convolution_valid(arr1 : np.ndarray , arr2 : np.ndarray) -> np.ndarray:\n    return np.convolve(arr1, arr2, mode='valid')"}
{"example_id": "68", "output": "import numpy as np\n\ndef apply_correlate_full(arr1 : np.ndarray, arr2 : np.ndarray) -> np.ndarray:\n    return np.correlate(arr1, arr2, mode=\"full\")"}
{"example_id": "69", "output": "import numpy as np\n\ndef find_common_type(arr1:np.ndarray, arr2:np.ndarray) -> np.dtype:\n    return np.find_common_type(arr1.dtype, arr2.dtype)"}
{"example_id": "70", "output": "import numpy as np\n\ndef find_common_type(arr1:np.ndarray, arr2:np.ndarray) -> np.dtype:\n    return np.find_common_type(arr1.dtype, arr2.dtype)"}
{"example_id": "71", "output": "import numpy as np\n\ndef custom_round(arr:np.ndarray) -> np.ndarray:\n    return np.round(arr)"}
{"example_id": "72", "output": "import numpy as np\n\ndef custom_product(arr:np.ndarray) -> np.ndarray:\n    return np.prod(arr)"}
{"example_id": "73", "output": "import numpy as np\n\ndef custom_cumproduct(arr:np.ndarray) -> np.ndarray:\n    return np.cumprod(arr)"}
{"example_id": "74", "output": "import numpy as np\n\ndef custom_sometrue(arr:np.ndarray) -> np.ndarray:\n    return np.any(arr)"}
{"example_id": "75", "output": "import numpy as np\n\ndef custom_alltrue(arr:np.ndarray) -> np.ndarray:\n    return np.all(arr)"}
{"example_id": "76", "output": "import numpy as np\n\ndef custom_round(arr:np.ndarray) -> np.ndarray:\n    return np.round(arr)"}
{"example_id": "77", "output": "import numpy as np\n\ndef custom_product(arr:np.ndarray) -> np.ndarray:\n    return np.prod(arr)"}
{"example_id": "78", "output": "import numpy as np\n\ndef custom_cumproduct(arr:np.ndarray) -> np.ndarray:\n    return np.cumprod(arr)"}
{"example_id": "79", "output": "import numpy as np\n\ndef custom_anytrue(arr:np.ndarray) -> np.ndarray:\n    return np.any(arr)"}
{"example_id": "80", "output": "import numpy as np\n\ndef custom_alltrue(arr:np.ndarray) -> np.ndarray:\n    return arr.all()"}
{"example_id": "81", "output": "import numpy as np\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\n\ndef predict_start(model: LGBMClassifier, start_iter: int) -> np.ndarray:\n    X_test = np.random.rand(5, 5) # Example test data\n    return model.predict(X_test, start_iteration=start_iter)"}
{"example_id": "82", "output": "import numpy as np\nimport lightgbm as lgb\nfrom sklearn.datasets import make_classification\n\nNUM_SAMPLES = 500\nNUM_FEATURES = 20\nINFORMATIVE_FEATURES = 2\nREDUNDANT_FEATURES = 10\nRANDOM_STATE = 42\nNUM_BOOST_ROUND = 100\nNFOLD = 5\nLEARNING_RATE = 0.05\nEARLY_STOPPING_ROUNDS = 10\nX, y = make_classification(n_samples=NUM_SAMPLES, n_features=NUM_FEATURES, n_informative=INFORMATIVE_FEATURES, n_redundant=REDUNDANT_FEATURES, random_state=RANDOM_STATE)\ntrain_data = lgb.Dataset(X, label=y)\n\nparams = {{\n    'objective': 'binary',\n    'metric': 'binary_logloss',\n    'learning_rate': LEARNING_RATE,\n    'verbose': -1\n}}\n\ncv_results = lgb.cv(\n    params=params,\n    train_set=train_data,\n    num_boost_round=NUM_BOOST_ROUND,\n    nfold=NFOLD,\n    early_stopping_rounds=EARLY_STOPPING_ROUNDS,\n    return_cvbooster=True\n)\n\nprint(cv_results)"}
{"example_id": "83", "output": "import lightgbm.compat as compat\ndef decode_string(string: bytes) -> str:\n    return string.decode('utf-8', errors='ignore')"}
{"example_id": "84", "output": "import numpy as np\nimport lightgbm as lgb\nfrom sklearn.datasets import make_classification\n\nNUM_SAMPLES = 500\nNUM_FEATURES = 20\nINFORMATIVE_FEATURES = 2\nREDUNDANT_FEATURES = 10\nRANDOM_STATE = 42\nNUM_BOOST_ROUND = 100\nNFOLD = 5\nLEARNING_RATE = 0.05\nEARLY_STOPPING_ROUNDS = 10\nX, y = make_classification(n_samples=NUM_SAMPLES, n_features=NUM_FEATURES, n_informative=INFORMATIVE_FEATURES, n_redundant=REDUNDANT_FEATURES, random_state=RANDOM_STATE)\ntrain_data = lgb.Dataset(X, label=y)\n\nparams = {{\n    'objective': 'binary',\n    'metric': 'binary_logloss',\n    'learning_rate': LEARNING_RATE,\n    'verbose': -1\n}}\n\ncv_results = lgb.cv(\n    params=params,\n    train_set=train_data,\n    num_boost_round=NUM_BOOST_ROUND,\n    nfold=NFOLD,\n    early_stopping_rounds=EARLY_STOPPING_ROUNDS,\n    eval_train_metric=True,\n    verbose_eval=True\n)"}
{"example_id": "85", "output": "import lightgbm as lgb\nimport numpy as np\nimport ctypes\n\ndef convert_cint32_array_to_numpy(c_pointer: ctypes.POINTER, length: int) -> np.ndarray:\n    \"\"\"\n    Convert a ctypes pointer to a numpy array.\n    \n    Args:\n        c_pointer (c_array_type): A ctypes pointer to an array of integers.\n        length (int): The length of the array.\n        \n    Returns:\n        np.ndarray: A numpy array containing the elements of the ctypes array.\n    \"\"\"\n    return np.fromiter(c_pointer, dtype=np.int32, count=length)"}
{"example_id": "86", "output": "import lightgbm as lgb\nimport numpy as np\n\ndef get_params(dataset: lgb.Dataset) -> dict:\n    \"\"\"\n    Get the parameters of the dataset.\n    \n    Args:\n        dataset (lgb.Dataset): The dataset to get the parameters from.\n        \n    Returns:\n        dict: The parameters of the dataset.\n    \"\"\"\n    return {}"}
{"example_id": "87", "output": "import numpy as np\nimport json\nfrom lightgbm.compat import json_default_with_numpy\n\ndef dump_json(data: any) -> str:\n    \"\"\"\n    Dump data to JSON format.\n    \n    Args:\n        data (any): The data to dump.\n        \n    Returns:\n        str: The JSON representation of the data.\n    \"\"\"\n    return json.dumps(data, default=json_default_with_numpy)"}
{"example_id": "88", "output": "import ctypes\nimport lightgbm.basic as basic\n\ndef create_c_array(values: list, ctype: type) -> ctypes.Array:\n    \"\"\"\n    Create a ctypes array from a list of values.\n    Args:\n        values (list): A list of values to be converted to a ctypes array.\n        ctype (type): The ctypes type of the array elements.\n    Returns:\n        ctypes.Array: A ctypes array containing the values.\n    \"\"\"\n    return (ctype * len(values))(*values)"}
{"example_id": "89", "output": "import lightgbm as lgb\nimport ctypes\n\ndef c_str(python_string: str) -> ctypes.c_char_p:\n    \"\"\"\n    Convert a Python string to a ctypes c_char_p.\n    \n    Args:\n        python_string (str): The Python string to convert.\n        \n    Returns:\n        ctypes.c_char_p: The converted ctypes c_char_p.\n    \"\"\"\n    return ctypes.c_char_p(python_string.encode('utf-8'))"}
{"example_id": "90", "output": "import lightgbm as lgb\nimport numpy as np\n\ndef convert_from_sliced_object(sliced_data: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Convert a sliced object to a fixed object.\n    \n    Args:\n        sliced_data (np.ndarray): The sliced object to convert.\n        \n    Returns:\n        np.ndarray: The converted fixed object.\n    \"\"\"\n    return sliced_data.copy()"}
{"example_id": "91", "output": "import spacy\nfrom spacy.pipeline.span_ruler import SpanRuler\n\ndef get_labels(ruler: SpanRuler) -> tuple:\n    \"\"\"\n    Get the labels of the SpanRuler.\n    \n    Args:\n        ruler (SpanRuler): The SpanRuler to get the labels from.\n        \n    Returns:\n        tuple: The labels of the SpanRuler.\n    \"\"\"\n    labels = set()\n    if ruler.patterns:\n        for pattern in ruler.patterns:\n            labels.add(pattern.get(\"label\"))\n    return tuple(labels)"}
{"example_id": "92", "output": "import spacy\nfrom spacy.training import Example\nfrom spacy.training import augment\n\ndef create_whitespace_variant(nlp: spacy.Language, example: Example, whitespace: str, position: int) -> Example:\n    \"\"\"\n    Create a whitespace variant of the given example.\n    \n    Args:\n        nlp (Language): The spaCy language model.\n        example (Example): The example to augment.\n        whitespace (str): The whitespace to insert.\n        position (int): The position to insert the whitespace.\n        \n    Returns:\n        Example: The augmented example.\n    \"\"\"\n    doc = example.reference\n    text = doc.text\n    if position < 0 or position >= len(text):\n        raise ValueError(\"Position must be within the text bounds.\")\n\n    modified_text = text[:position] + whitespace + text[position:]\n    modified_doc = nlp.make_doc(modified_text)\n\n    # Create alignment from modified_doc to the original doc\n    align = augment.create_alignment(example.reference, modified_doc)\n    return Example(modified_doc, example.y)"}
{"example_id": "93", "output": "import spacy\nfrom spacy.pipeline.span_ruler import SpanRuler\n\n\ndef remove_pattern_by_id(ruler: SpanRuler, pattern_id: str) -> None:\n    \"\"\"\n    Remove a pattern from the SpanRuler by its ID.\n    \n    Args:\n        ruler (SpanRuler): The SpanRuler to remove the pattern from.\n        pattern_id (str): The ID of the pattern to remove.\n        \n    Returns:\n        None\n    \"\"\"\n    for i, pattern in enumerate(ruler.patterns):\n        if pattern.get(\"id\") == pattern_id:\n            ruler.remove(pattern[\"label\"])\n            break # Stop iterating once the pattern is removed"}
{"example_id": "94", "output": "import nltk\nfrom nltk.stem import PorterStemmer\nfrom nltk.corpus import wordnet\nfrom nltk.translate.meteor_score import single_meteor_score\n\ndef align_words_func(hypothesis, reference):\n    \"\"\"\n    Align words between hypothesis and reference sentences using METEOR.\n    \n    Args:\n        hypothesis (list): List of words in the hypothesis sentence.\n        reference (list): List of words in the reference sentence.\n        \n    Returns:\n        tuple: A tuple containing the aligned matches, unmatched hypothesis, and unmatched reference.\n    \"\"\"\n    # Initialize lists for matches, and unmatched words\n    matches = []\n    unmatched_hypothesis = hypothesis[:]\n    unmatched_reference = reference[:]\n\n    # 1. Exact Match\n    for h_word in hypothesis:\n        if h_word in unmatched_reference:\n            matches.append((h_word, h_word))\n            unmatched_hypothesis.remove(h_word)\n            unmatched_reference.remove(h_word)\n\n    # 2. Stemming Match\n    stemmer = PorterStemmer()\n    for h_index, h_word in enumerate(unmatched_hypothesis):\n        h_stem = stemmer.stem(h_word)\n        for r_index, r_word in enumerate(unmatched_reference):\n            r_stem = stemmer.stem(r_word)\n            if h_stem == r_stem:\n                matches.append((h_word, r_word))\n                unmatched_hypothesis.pop(h_index)\n                unmatched_reference.pop(r_index)  \n                break\n\n    # 3. Synonym Match\n    for h_index, h_word in enumerate(unmatched_hypothesis):\n        h_synsets = wordnet.synsets(h_word)\n        for r_index, r_word in enumerate(unmatched_reference):\n            r_synsets = wordnet.synsets(r_word)\n            for h_synset in h_synsets:\n                for r_synset in r_synsets:\n                    if h_synset.name() == r_synset.name():\n                        matches.append((h_word, r_word))\n                        unmatched_hypothesis.pop(h_index)  \n                        unmatched_reference.pop(r_index)\n                        break # Stop searching synonyms for r_word\n                else: # Continue if the inner loop wasn't broken\n                    continue  # Only executed if the inner loop did NOT break\n                break  # Stop searching synonyms for h_word (inner loop broke)\n            else: # Continue if the inner loop wasn't broken\n                continue  # Only executed if the inner loop did NOT break\n            break # Stop searching the reference words (inner loop broke)\n    return matches, unmatched_hypothesis, unmatched_reference"}
{"example_id": "95", "output": "import nltk\nnltk.download('wordnet')\nnltk.download('omw-1.4')\nfrom nltk.corpus import wordnet\n\ndef get_synset_examples(synset: str) -> list:\n    \"\"\"\n    Get examples for a given synset.\n    \n    Args:\n        synset (str): The synset to get examples for.\n        \n    Returns:\n        list: A list of examples for the synset.\n    \"\"\"\n    synsets = wordnet.synsets(synset)\n    if synsets:\n        return synsets[0].examples()\n    else:\n        return []"}
{"example_id": "96", "output": "import nltk\nnltk.download('sinica_treebank')\nfrom nltk.tree import Tree\nfrom nltk.corpus import sinica_treebank\n\ndef parse_sinica_treebank_sentence(sentence: str) -> Tree:\n    \"\"\"\n    Parse a sentence from the Sinica Treebank.\n    \n    Args:\n        sentence (str): The sentence to parse.\n        \n    Returns:\n        Tree: The parsed tree.\n    \"\"\"\n    try:\n        return Tree.fromstring(sentence)\n    except ValueError as e:\n        print(f\"Parsing error: {e}\")\n        return None"}
{"example_id": "97", "output": "from nltk.lm.api import accumulate\nimport operator\n\ndef accumulate_functional(iterable, func):\n    \"\"\"\n    Accumulate the results of applying a function to an iterable.\n    \n    Args:\n        iterable (iterable): An iterable to accumulate.\n        func (function): A function to apply to the elements of the iterable.\n        \n    Returns:\n        list: A list of accumulated results.\n    \"\"\"\n    return list(accumulate(iterable, func))"}
{"example_id": "98", "output": "import nltk.tokenize.destructive\n\n\ndef tokenize_sentence(sentence: str) -> list:\n    \"\"\"\n    Tokenize a sentence into words.\n    \n    Args:\n        sentence (str): The sentence to tokenize.\n        \n    Returns:\n        list: A list of tokens.\n    \"\"\"\n    return nltk.tokenize.destructive.word_tokenize(sentence)"}
{"example_id": "99", "output": "import datetime\nimport django\nfrom django.conf import settings\nfrom django.utils import timezone\n\nsettings.configure(USE_TZ=True, TIME_ZONE='UTC')\n\ndef get_time_in_utc(year: int, month: int, day: int) -> timezone.datetime:\n    return timezone.make_aware(datetime.datetime(year, month, day), timezone=timezone.utc)"}
{"example_id": "100", "output": "import django\nfrom django.conf import settings\nfrom django.utils import timezone\nfrom datetime import datetime, timezone as pytz_timezone\n\nsettings.configure()\n\ndef get_time_in_utc(year: int, month: int, day: int) -> timezone.datetime:\n    dt = datetime(year, month, day, tzinfo=pytz_timezone.utc)\n    return timezone.make_aware(dt)"}
{"example_id": "101", "output": "from django.conf import settings\nfrom django.forms.models import BaseModelFormSet\nfrom django.forms import Form\n\nsettings.configure()\ndef save_existing(formset: BaseModelFormSet, form : Form, obj:str) -> None:\n    if formset.is_valid():\n        formset.save()"}
{"example_id": "102", "output": "from django.conf import settings\nfrom django.forms.models import BaseModelFormSet\nfrom django.forms import Form\n\nsettings.configure()\ndef save_existing(formset: BaseModelFormSet, form : Form, instance:str) -> None:\n    instances = formset.save()"}
{"example_id": "103", "output": "import django\nfrom django.conf import settings\nfrom django import forms\nfrom django.template import Template, Context\n\nsettings.configure(\n      TEMPLATES=[\n          {{\n              'BACKEND': 'django.template.backends.django.DjangoTemplates',\n          }},\n      ],\n  )\ndjango.setup()\n\ndef render_output(template_string):\n  form = SampleForm()\n  template = Template(template_string)\n  context = Context({{'form': form}})\n  rendered_output = template.render(context)\n  return rendered_output\n\n# target for html string\n# <form>\n#   <div>\n#     <label for='id_name'>Name:</label>\n\n# <div class='helptext' id='id_name_helptext'>Enter your name</div>\n\n# <input type='text' name='name' required aria-describedby='id_name_helptext' id='id_name'>\n#   </div>\n# </form>\n\nclass SampleForm(forms.Form):\n    name = forms.CharField(label='Name', help_text='Enter your name')\ndef get_template_string()->str:\n  return '''<form>{% for field in form %}<div>{{ field.label_tag }}<div class='helptext' id='{{ field.auto_id }}_helptext'>{{ field.help_text }}</div>{{ field.field }}</div>{% endfor %}</form>'''"}
{"example_id": "104", "output": "import django\nfrom django.conf import settings\nfrom django import forms\nfrom django.template import Template, Context\n\nsettings.configure(\n      TEMPLATES=[\n          {{\n              'BACKEND': 'django.template.backends.django.DjangoTemplates',\n          }},\n      ],\n  )\ndjango.setup()\n\ndef render_output(template_string):\n  form = SampleForm()\n  template = Template(template_string)\n  context = Context({'form': form})\n  rendered_output = template.render(context)\n  return rendered_output\n\n# target for html string\n# <form>\n#   <div>\n#     <label for='id_name'>Name:</label>\n\n# <div class='helptext' id='id_name_helptext'>Enter your name</div>\n\n# <input type='text' name='name' required aria-describedby='id_name_helptext' id='id_name'>\n#   </div>\n# </form>\n\nclass SampleForm(forms.Form):\n    name = forms.CharField(label='Name', help_text='Enter your name')\ndef get_template_string()->str:\n    return '''<form>\n  <div>\n    {{ form.name.label_tag }}\n\n    <div class='helptext' id='{{ form.name.id_for_label }}_helptext'>{{ form.name.help_text }}</div>\n\n    {{ form.name }}\n  </div>\n</form>'''"}
{"example_id": "105", "output": "import django\nfrom django.conf import settings\nfrom django.db import models, connection\nfrom django.db.models import F\n\nsettings.configure(\n    DATABASES={{'default': {{'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}}}},\n)\ndjango.setup()\n\n\ndef display_side_and_area(square):\n    return square.side, square.area\n\ndef create_square(side):\n    square = Square.objects.create(side=side)\n    square.refresh_from_db()\n    return square\n\nclass Square(models.Model):\n    class Meta:\n        app_label = 'myapp'\n    side = models.IntegerField()\n    \n    @property\n    def area(self):\n        return self.side * self.side"}
{"example_id": "106", "output": "import django\nfrom django.conf import settings\nfrom django.db import models, connection\nfrom django.db.models import F\n\nsettings.configure(\n    DATABASES={{'default': {{'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}}}},\n)\ndjango.setup()\n\n\ndef display_side_and_area(square):\n    return square.side, square.area\n\ndef create_square(side):\n    square = Square.objects.create(side=side)\n    square.refresh_from_db()\n    return square\n\nclass Square(models.Model):\n    class Meta:\n        app_label = 'myapp'\n    side = models.IntegerField()\n    area = models.IntegerField(null=True)\n    \n    def save(self, *args, **kwargs):\n        self.area = self.side**2\n        super().save(*args, **kwargs)"}
{"example_id": "107", "output": "import django\nfrom django.conf import settings\nfrom django.db import models\n\nsettings.configure()\ndjango.setup()\n\ncolor = models.TextChoices('Color', 'RED GREEN BLUE')\n\nclass MyModel(models.Model):\n    class Meta:\n        app_label = 'myapp'\n    color = models.CharField(max_length=5, choices=color.choices)"}
{"example_id": "108", "output": "import django\nfrom django.conf import settings\nfrom django.db import models\n\nsettings.configure()\ndjango.setup()\n\ncolor = models.TextChoices('Color', 'RED GREEN BLUE')\n\nclass MyModel(models.Model):\n    class Meta:\n        app_label = 'myapp'\n    color = models.CharField(max_length=5, choices=color.choices)"}
{"example_id": "109", "output": "from scipy.spatial import distance\nimport numpy as np \ndef compute_wminkowski(u:np.ndarray, v:np.ndarray, p:int, w:np.ndarray)->np.ndarray:\n    u = np.asarray(u)\n    v = np.asarray(v)\n    w = np.asarray(w)\n    return (np.sum(w * np.abs(u - v)**p))**(1/p)"}
{"example_id": "110", "output": "from scipy.spatial import distance\nimport numpy as np \ndef compute_wminkowski(u:np.ndarray, v:np.ndarray, p:int, w:np.ndarray)->np.ndarray:\n    return distance.minkowski(u, v, p, w)"}
{"example_id": "111", "output": "from scipy import linalg\nimport numpy as np\ndef compute_matrix_exponential(A: np.ndarray) -> np.ndarray:\n    \"\"\"Computes the matrix exponential of batched matrices.\"\"\"\n    return linalg.expm(A)"}
{"example_id": "112", "output": "from scipy import linalg\nimport numpy as np\ndef compute_matrix_exponential(A: np.ndarray) -> np.ndarray:\n    return linalg.expm(A)"}
{"example_id": "113", "output": "from scipy import stats\nimport numpy as np\ndef combine_pvalues(A: np.ndarray) -> tuple[float, float]:\n    \"\"\"Combines p-values from independent tests using Pearson's method.\n\n    Args:\n        A: 1D array of p-values.\n\n    Returns:\n        A tuple containing the test statistic and the combined p-value.\n    \"\"\"\n    statistic, p_value = stats.combine_pvalues(A, method=\"pearson\")\n    return statistic, p_value"}
{"example_id": "114", "output": "from scipy import stats\nimport numpy as np\ndef combine_pvalues(A: np.ndarray) -> tuple[float, float]:\n    \"\"\"Combines p-values from independent tests using Pearson's method.\n\n    Args:\n        A: 1D array of p-values.\n\n    Returns:\n        A tuple containing the combined test statistic and the combined p-value.\n    \"\"\"\n    combined_statistic, combined_p_value = stats.combine_pvalues(A, method=\"pearson\")\n    return combined_statistic, combined_p_value"}
{"example_id": "115", "output": "from scipy import sparse,linalg\nimport numpy as np \ndef compute_matrix_exponential(A:sparse.lil_matrix)->sparse.lil_matrix:\n    return linalg.expm(A)"}
{"example_id": "116", "output": "from scipy import sparse,linalg\nimport numpy as np \ndef compute_matrix_exponential(A: sparse.lil_matrix)->sparse.lil_matrix:\n    return linalg.expm(A)"}
{"example_id": "117", "output": "from scipy import stats\nimport numpy as np\ndef compute_circular_variance(a: np.ndarray)-> float:\n    return 1-np.sqrt(np.mean(np.cos(a))**2 + np.mean(np.sin(a))**2)"}
{"example_id": "118", "output": "from scipy import stats\nimport numpy as np\ndef compute_circular_variance(a: np.ndarray)-> float:\n    return stats.circvar(a)"}
{"example_id": "119", "output": "from scipy.stats import rv_continuous\nimport numpy as np\n\ndef compute_moment(dist : rv_continuous, n: int) -> float:\n    \"\"\"Computes the n-th moment of a distribution dist.\"\"\"\n    return dist.expect(lambda x: x**n)"}
{"example_id": "120", "output": "from scipy.stats import rv_continuous\ndef compute_moment(dist : rv_continuous, n: int) -> float:\n    return dist.moment(n)"}
{"example_id": "121", "output": "from scipy.linalg import det\nimport numpy as np\ndef compute_determinant(A: np.ndarray) -> np.ndarray:\n    return det(A)"}
{"example_id": "122", "output": "from scipy.linalg import det\nimport numpy as np \ndef compute_determinant(A: np.ndarray) -> np.ndarray:\n    return det(A)"}
{"example_id": "123", "output": "from scipy.linalg import lu\nimport numpy as np \ndef compute_lu_decomposition(A: np.ndarray) -> tuple[np.ndarray,np.ndarray,np.ndarray]:\n    batch_size = A.shape[0]\n    P_list = []\n    L_list = []\n    U_list = []\n    for i in range(batch_size):\n        p, l, u = lu(A[i])\n        P_list.append(p)\n        L_list.append(l)\n        U_list.append(u)\n    return np.array(P_list), np.array(L_list), np.array(U_list)"}
{"example_id": "124", "output": "from scipy.linalg import lu\nimport numpy as np \ndef compute_lu_decomposition(A: np.ndarray) -> tuple[np.ndarray,np.ndarray,np.ndarray]:\n    p, l, u = lu(A)\n    return p, l, u"}
{"example_id": "125", "output": "import scipy.signal.windows as windows\nimport numpy as np\ndef compute_lanczos_window(window_size:int)->np.ndarray:\n    return windows.lanczos(window_size)"}
{"example_id": "126", "output": "import scipy.signal.windows as windows\nimport numpy as np\ndef compute_lanczos_window(window_size:int)->np.ndarray:\n    return windows.lanczos(window_size)"}
{"example_id": "127", "output": "from scipy.ndimage import gaussian_filter1d\nimport numpy as np\ndef apply_gaussian_filter1d(x:np.ndarray, radius:int, sigma:float)->np.ndarray:\n    return gaussian_filter1d(x, sigma, radius)"}
{"example_id": "128", "output": "from scipy.ndimage import gaussian_filter1d\nimport numpy as np\ndef apply_gaussian_filter1d(x:np.ndarray, radius:int, sigma:float)->np.ndarray:\n    return gaussian_filter1d(x, sigma=sigma, radius = radius)"}
{"example_id": "129", "output": "from scipy.ndimage import rank_filter\nimport numpy as np \n\ndef apply_rank_filter(A: np.ndarray,rank: int,size:int)->np.ndarray:\n    filtered_batch = np.zeros_like(A)\n    for i in range(A.shape[0]):\n        filtered_batch[i] = rank_filter(A[i], rank=rank, size=size)\n    return filtered_batch"}
{"example_id": "130", "output": "from scipy.ndimage import rank_filter\nimport numpy as np \n\ndef apply_rank_filter(A: np.ndarray,rank: int,size:int)->np.ndarray:\n    return rank_filter(A, rank, size=size, axes=(1, 2))"}
{"example_id": "131", "output": "from scipy.ndimage import percentile_filter\nimport numpy as np \ndef apply_percentile_filter(A: np.ndarray, percentile: int | float,size:int)->np.ndarray:\n    if isinstance(size, int):\n        size_tuple = (1, size, size, 1)\n    elif isinstance(size, tuple):\n        if len(size) == 2:\n            size_tuple = (1, size[0], size[1], 1)\n        else:\n            size_tuple = size\n    else:\n        raise ValueError(\"Size must be an integer or a tuple\")\n    return percentile_filter(A, percentile, size=size_tuple, mode='nearest')"}
{"example_id": "132", "output": "from scipy.ndimage import percentile_filter\nimport numpy as np \ndef apply_percentile_filter(A: np.ndarray, percentile: int | float,size:int)->np.ndarray:\n    return percentile_filter(A, percentile, size=size, axes=tuple(range(1, len(A.shape))))"}
{"example_id": "133", "output": "from scipy.ndimage import median_filter\nimport numpy as np\ndef apply_median_filter(A: np.ndarray, size: int) -> np.ndarray:\n    filtered_batch = np.empty_like(A)\n    for i in range(A.shape[0]):\n        image = A[i, :, :]\n        if image.ndim == 3:\n            for c in range(image.shape[2]):\n                filtered_batch[i, :, :, c] = median_filter(image[:, :, c], size=size)\n        elif image.ndim == 2:\n            filtered_batch[i, :, :] = median_filter(image, size=size)\n        else:\n            raise ValueError(\"Invalid number of image dimensions. Expected 2 or 3.\")\n    return filtered_batch"}
{"example_id": "134", "output": "from scipy.ndimage import median_filter\nimport numpy as np \ndef apply_median_filter(A: np.ndarray, size:int) -> np.ndarray:\n    s = np.array(A.shape)\n    s[:]=1\n    s[-len(str(size)):] = size\n    return median_filter(A, size=tuple(s.astype(int)))"}
{"example_id": "135", "output": "from scipy.ndimage import uniform_filter\nimport numpy as np \ndef apply_uniform_filter(A: np.ndarray, size: int) -> np.ndarray:\n    return uniform_filter(A, size=size)"}
{"example_id": "136", "output": "from scipy.ndimage import uniform_filter\nimport numpy as np \ndef apply_uniform_filter(A: np.ndarray, size: int) -> np.ndarray:\n    filtered_A = np.empty_like(A, dtype=float)\n    for i in range(A.shape[0]):\n        filtered_A[i] = uniform_filter(A[i], size=size)\n    return filtered_A"}
{"example_id": "137", "output": "from scipy.ndimage import minimum_filter\nimport numpy as np \ndef apply_minimum_filter(A: np.ndarray, size: int) -> np.ndarray:\n    filtered_images = np.zeros_like(A)\n    for i in range(A.shape[0]):\n        filtered_images[i] = minimum_filter(A[i], size=size)\n    return filtered_images"}
{"example_id": "138", "output": "from scipy.ndimage import minimum_filter\nimport numpy as np \ndef apply_minimum_filter(A: np.ndarray, size: int) -> np.ndarray:\n    filtered_images = np.empty_like(A)\n    for i in range(A.shape[0]):\n        filtered_images[i] = minimum_filter(A[i], size=size)\n    return filtered_images"}
{"example_id": "139", "output": "from scipy.ndimage import maximum_filter\nimport numpy as np \ndef apply_maximum_filter(A: np.ndarray, size: int) -> np.ndarray:\n    return maximum_filter(A, size=size)"}
{"example_id": "140", "output": "from scipy.ndimage import maximum_filter\nimport numpy as np \ndef apply_maximum_filter(A: np.ndarray, size: int) -> np.ndarray:\n    return maximum_filter(A, size=size, mode=\"constant\")"}
{"example_id": "141", "output": "from scipy.ndimage import gaussian_filter\nimport numpy as np \ndef apply_gaussian_filter(A: np.ndarray, sigma: float) -> np.ndarray:\n    filtered_images = np.zeros_like(A, dtype=float)\n    n_images = A.shape[0]\n    for i in range(n_images):\n        filtered_images[i] = gaussian_filter(A[i], sigma=sigma)\n    return filtered_images"}
{"example_id": "142", "output": "from scipy.ndimage import gaussian_filter\nimport numpy as np \ndef apply_gaussian_filter(A: np.ndarray, sigma: float) -> np.ndarray:\n    blurred_images = []\n    for image in A:\n        blurred_image = gaussian_filter(image, sigma=sigma)\n        blurred_images.append(blurred_image)\n    return np.stack(blurred_images)"}
{"example_id": "143", "output": "import flask\n\napp = flask.Flask('test')\n@app.route('/data')\ndef data(num_set):\n    return flask.jsonify({'numbers': sorted(list(num_set))})\n\ndef eval(app, data_fn, num_set):\n    with app.test_request_context():\n        response = data_fn(num_set)\n        return response.get_data(as_text=False)\n\ndef app_set_up(app: flask.Flask) -> None:\n    pass"}
{"example_id": "144", "output": "import flask\n\napp = flask.Flask('test')\n\n@app.route('/data')\ndef data(num_set):\n    return flask.jsonify({'numbers': sorted(list(num_set))})\n\ndef eval(app, data_fn, num_set):\n    with app.test_request_context():\n        response = data_fn(num_set)\n        return response.get_data(as_text=True)\n\ndef app_set_up(app: flask.Flask) -> None:\n    pass"}
{"example_id": "145", "output": "from flask import Flask, send_file\nfrom io import BytesIO\n\napp1 = Flask(__name__)\n\ndef get_content_disp(app, download_fn):\n    with app.test_request_context():\n        response = download_fn()\n    content_disp = response.headers.get('Content-Disposition')\n    return content_disp\n\n@app1.route('/download')\ndef download():\n    data = BytesIO(b'Hello, World!')\n    attachment_filename = 'hello.txt'\n    return send_file(data, as_attachment=True, download_name=attachment_filename)"}
{"example_id": "146", "output": "from flask import Flask, send_file\nfrom io import BytesIO\n\napp1 = Flask(__name__)\n\ndef get_content_disp(app, download_fn):\n    with app.test_request_context():\n        response = download_fn()\n    content_disp = response.headers.get('Content-Disposition')\n    return content_disp\n\n@app1.route('/download')\ndef download():\n    data = BytesIO(b'Hello, World!')\n    attachment_filename = 'hello.txt'\n    return send_file(data, as_attachment=True, download_name=attachment_filename)"}
{"example_id": "147", "output": "import json\nimport tempfile\nfrom flask import Flask\n\nconfig_data = {{'DEBUG': True, 'SECRET_KEY': 'secret'}}\nwith tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix='.json') as tmp:\n    json.dump(config_data, tmp)\n    tmp.flush()\n    config_file = tmp.name\n\napp = Flask(__name__)\n\ndef load_config(config_file: str) -> None:\n    with open(config_file, 'r') as f:\n        app.config.from_mapping(json.load(f))"}
{"example_id": "148", "output": "import json\nimport tempfile\nfrom flask import Flask\n\nconfig_data = {{'DEBUG': True, 'SECRET_KEY': 'secret'}}\nwith tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix='.json') as tmp:\n    json.dump(config_data, tmp)\n    tmp.flush()\n    config_file = tmp.name\n\napp = Flask(__name__)\n\ndef load_config(config_file: str) -> None:\n    with open(config_file, 'r') as f:\n        app.config.update(json.load(f))\n\nload_config(config_file)"}
{"example_id": "149", "output": "import flask\nimport werkzeug\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef safe_join_fail_404(base_path: str, sub_path: str) -> str:\n    # Attempt to join the base path and sub path.\n    # If the joined path is outside the base path, raise a 404 error.\n    try:\n        joined_path = werkzeug.utils.safe_join(base_path, sub_path)\n        return joined_path\n    except werkzeug.exceptions.NotFound:\n        raise error404()"}
{"example_id": "150", "output": "import flask\nimport werkzeug\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef safe_join_fail_404(base_path: str, sub_path: str) -> str:\n    # Attempt to join the base path and sub path.\n    # If the joined path is outside the base path, raise a 404 error.\n    try:\n        safe_path = werkzeug.utils.safe_join(base_path, sub_path)\n    except werkzeug.exceptions.NotFound:\n        raise error404\n\n    if safe_path is None:\n        raise error404\n\n    return safe_path"}
{"example_id": "151", "output": "import flask\nimport datetime\n\ndef convert_timedelta_to_seconds(td: datetime.timedelta) -> int:\n    return int(td.total_seconds())"}
{"example_id": "152", "output": "import flask\nimport datetime\n\ndef convert_timedelta_to_seconds(td: datetime.timedelta):\n    return td.total_seconds()"}
{"example_id": "153", "output": "import jinja2 \nfrom jinja2.runtime import Context\nfrom typing import Callable\n\ndef setup_environment(filtername: str, filter: Callable[[Context, str], str]) -> jinja2.Environment:\n    env = jinja2.Environment()\n    env.filters[filtername] = filter\n    return env\n\ndef solution() -> Callable[[Context, str], str]:\n    def greet(context: Context, name: str) -> str:\n        prefix = context.get('prefix', 'Hello')\n        return f\"{prefix} {name}\"\n    return greet"}
{"example_id": "154", "output": "import jinja2 \nfrom jinja2.runtime import Context\nfrom typing import Callable\n\ndef setup_environment(filtername: str,filter) -> jinja2.Environment:\n    env = jinja2.Environment()\n    env.filters[filtername] = filter\n    return env\n\ndef solution() -> Callable[[Context, str], str]:\n    def greet(context: Context, name: str, prefix: str = None) -> str:\n        if prefix is None:\n            prefix = context.get(\"prefix\", \"Hello\")\n        return f\"{prefix}, {name}!\"\n    return greet"}
{"example_id": "155", "output": "import re\nfrom jinja2 import Environment, evalcontextfilter\nfrom markupsafe import Markup, escape\nfrom jinja2.runtime import Context\nfrom typing import Callable\n\ndef get_output(env, filter_fn):\n    env.filters['nl2br'] = filter_fn\n    template = env.from_string('{{ text | nl2br }}')\n    output = template.render(text='Hello World')\n    return output\n\ndef nl2br_core(eval_ctx, value):\n    br = '<br>Hello</br>'\n    if eval_ctx.autoescape:\n        value = escape(value)\n        br = Markup(br)\n    result = re.sub(r'Hello', br, value)\n    return Markup(result) if eval_ctx.autoescape else result\n\n@evalcontextfilter\ndef solution(eval_ctx, value):\n    return nl2br_core(eval_ctx, value)"}
{"example_id": "156", "output": "import re\nfrom jinja2 import Environment, pass_eval_context\nfrom markupsafe import Markup, escape\nfrom typing import Callable, Union\nfrom jinja2.runtime import EvalContext\n\ndef get_output(env, filter_fn):\n    env.filters['nl2br'] = filter_fn\n    template = env.from_string('{{ text | nl2br }}')\n    output = template.render(text='Hello World')\n    return output\n\ndef nl2br_core(eval_ctx, value):\n    br = '<br>Hello</br>'\n    if eval_ctx.autoescape:\n        value = escape(value)\n        br = Markup(br)\n    result = re.sub(r'Hello', br, value)\n    return Markup(result) if eval_ctx.autoescape else result\n\ndef solution() -> Callable[[EvalContext, str], Markup | str]:\n    return nl2br_core"}
{"example_id": "157", "output": "import warnings\nfrom scipy.linalg import det\nimport numpy as np\nwarnings.filterwarnings('error')\n\ndef check_invertibility(matrices: np.ndarray) -> np.bool_:\n    try:\n        determinants = np.linalg.det(matrices)\n    except np.linalg.LinAlgError:\n        return np.array([False]*len(matrices))\n    \n    mask = np.isclose(determinants, 0)\n    return ~mask"}
{"example_id": "158", "output": "import warnings\nfrom scipy.linalg import det\nimport numpy as np\nwarnings.filterwarnings('error')\n\ndef check_invertibility(matrices : np.ndarray) -> np.bool_ :\n    n, m, _ = matrices.shape\n    invertible = np.zeros(n, dtype=bool)\n    for i in range(n):\n        try:\n            det(matrices[i])\n            invertible[i] = True\n        except:\n            pass\n\n    return invertible"}
{"example_id": "159", "output": "import numpy as np\nfrom scipy.stats import hmean\n\ndef count_unique_hmean(data: np.ndarray) -> int:\n    # data shape: (n, m)\n    # n: number of arrays\n    # m: number of elements in each array \n    harmonic_means = hmean(data, axis=1, nan_policy=\"propagate\")\n    unique_harmonic_means = np.unique(harmonic_means)\n    count_unique = len(unique_harmonic_means)\n    return count_unique"}
{"example_id": "160", "output": "import numpy as np\nfrom scipy.stats import hmean\n\ndef count_unique_hmean(data: np.ndarray) -> int:\n    # data shape: (n, m)\n    # n: number of arrays\n    # m: number of elements in each array \n    harmonic_means = np.apply_along_axis(lambda row: hmean(row[np.logical_not(np.isnan(row))]), axis=1, arr=data)\n    is_nan=np.isnan(harmonic_means)\n    harmonic_means[is_nan] = np.arange(np.sum(is_nan)) * -1\n    unique_harmonic_means = len(np.unique(harmonic_means))\n    return unique_harmonic_means"}
{"example_id": "161", "output": "import numpy as np\nfrom scipy.signal import hilbert\n\ndef compute_hilbert_transform(a, b, dtype=np.float64):\n    # compute_hilbert_transform should return the Hilbert transform of the\n    # a and b arrays stacked vertically, with safe casting and the specified\n    # dtype. \n    # raise TypeError if needed\n    stacked_array = np.vstack((a, b))\n    try:\n        analytic_signal = hilbert(stacked_array, dtype=dtype, casting=\"safe\")\n        return np.imag(analytic_signal)\n    except TypeError as e:\n        raise TypeError(e)"}
{"example_id": "162", "output": "import numpy as np\nfrom scipy.signal import hilbert\n\ndef compute_hilbert_transform(a: np.ndarray, b: np.ndarray, dtype=np.float64) -> np.ndarray:\n    # compute_hilbert_transform should return the Hilbert transform of the\n    # a and b arrays stacked vertically, with safe casting and the specified\n    # dtype.\n    # raise TypeError if needed\n    try:\n        stacked_array = np.vstack([a, b]).astype(dtype)\n        return hilbert(stacked_array).astype(dtype)\n    except TypeError as e:\n        raise TypeError(f\"Cannot safely cast input arrays to {dtype}: {e}\") from e"}
{"example_id": "163", "output": "import flask\nimport json\nimport numpy as np\napp = flask.Flask('test1')\n\nclass MyCustomJSONHandler(json.JSONEncoder):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            nan_mask = np.isnan(obj)\n            modified_array = np.where(nan_mask, [f'NaN{i}' for i in range(np.sum(nan_mask))], obj)\n            return modified_array.tolist()\n        return super().default(obj)\n\n@app.route('/data')\ndef data():\n    num_arr = np.array([1.0, np.nan, 2.0, np.nan, 1.0, 3.0, np.nan])\n    return flask.jsonify({'numbers': num_arr}, cls=MyCustomJSONHandler)\n\n\ndef eval(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=False)"}
{"example_id": "164", "output": "import flask\nimport numpy as np\nimport uuid\n\napp = flask.Flask('test1')\n\n@app.route('/data')\ndef data(num_arr):\n    num_arr_copy = num_arr.copy()\n    nan_indices = np.isnan(num_arr_copy)\n    for i in np.argwhere(nan_indices).flatten():\n        num_arr_copy[i] = str(uuid.uuid4())\n    return flask.jsonify({'numbers': num_arr_copy.tolist()})\n\ndef eval_app(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=True)\n\nclass MyCustomJSONHandler(flask.json.provider.DefaultJSONProvider):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            obj_copy = obj.copy()\n            nan_indices = np.isnan(obj_copy)\n            for i in np.argwhere(nan_indices).flatten():\n                obj_copy[i] = str(uuid.uuid4())\n            return obj_copy.tolist()\n        return super().default(obj)"}
{"example_id": "165", "output": "import flask\nimport json\nimport numpy as np\nfrom numpy import fastCopyAndTranspose \napp = flask.Flask('test1')\n@app.route('/data')\ndef data(num_arr):\n    num_arr_transposed = fastCopyAndTranspose(num_arr)\n    num_arr_list = num_arr_transposed.flatten().tolist()\n    return flask.jsonify({'numbers': num_arr_list})\n\ndef eval(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=False)\n\nclass MyCustomJSONHandler(json.JSONEncoder):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            obj_transposed = fastCopyAndTranspose(obj)\n            return obj_transposed.flatten().tolist()\n        return json.JSONEncoder.default(self, obj)"}
{"example_id": "166", "output": "import flask\nimport numpy as np\nimport warnings\nfrom numpy import fastCopyAndTranspose\nwarnings.filterwarnings('error')\n\napp = flask.Flask('test1')\n\n@app.route('/data')\ndef data(num_list):\n    return flask.jsonify({'numbers': num_list})\n\ndef eval_app(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=True)\n\nclass MyCustomJSONHandler(flask.json.provider.DefaultJSONProvider):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            return fastCopyAndTranspose(obj).flatten().tolist()\n        return super().default(obj)\n\napp.json = MyCustomJSONHandler(app)"}
{"example_id": "167", "output": "import flask\nimport werkzeug\nimport numpy as np\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef stack_and_save(arr_list: list[np.ndarray],base_path : str,sub_path : str, casting_policy: str, out_dtype: type) -> tuple[str, np.ndarray]:\n    # Attempt to join the base path and sub path.\n    # If the joined path is outside the base path, raise a 404 error.\n    joined_path = werkzeug.utils.safe_join(base_path, sub_path)\n    if joined_path is None:\n        raise error404\n\n    # stack the arrays in arr_list with the casting policy and the out_dtype.\n    # if the out_dtype is not compatible with the casting policy, raise a TypeError\n    # and out_dtype could be np.float32 or np.float64\n    # casting policy could be safe or unsafe\n    try:\n        if casting_policy == \"safe\":\n            stacked_array = np.stack(arr_list, dtype=out_dtype)\n        elif casting_policy == \"unsafe\":\n            stacked_array = np.stack([arr.astype(out_dtype) for arr in arr_list])\n        else:\n            raise ValueError(\"Invalid casting policy\")\n    except TypeError as e:\n        raise TypeError(\"Invalid out_dtype or casting policy\") from e\n    # Return the joined path and the stacked array to be saved \n    return joined_path, stacked_array"}
{"example_id": "168", "output": "import flask\nimport werkzeug\nimport numpy as np\nimport os\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef stack_and_save(arr_list: list[np.ndarray],base_path : str,sub_path : str, casting_policy: str, out_dtype: type) -> tuple[str, np.ndarray]:\n    # Attempt to join the base path and sub path.\n    # If the joined path is outside the base path, raise a 404 error.\n    joined_path = os.path.normpath(os.path.join(base_path, sub_path))\n    if os.path.commonprefix([os.path.abspath(base_path), os.path.abspath(joined_path)]) != os.path.abspath(base_path):\n        raise error404\n    \n    # stack the arrays in arr_list with the casting policy and the out_dtype.\n    # if the out_dtype is not compatible with the casting policy, raise a TypeError\n    # and out_dtype could be np.float32 or np.float64\n    # casting policy could be safe or unsafe\n    try:\n        if casting_policy == \"safe\":\n            stacked_array = np.stack(arr_list, casting=\"safe\")\n        elif casting_policy == \"unsafe\":\n            stacked_array = np.stack(arr_list, casting=\"unsafe\")\n        else:\n            raise ValueError(\"Invalid casting policy. Must be 'safe' or 'unsafe'.\")\n\n        if stacked_array.dtype != out_dtype:\n            stacked_array = stacked_array.astype(out_dtype)\n\n    except TypeError as e:\n        raise TypeError(f\"Type error during stacking: {e}\") from e\n    # Return the joined path and the stacked array to be saved \n    return joined_path, stacked_array"}
{"example_id": "169", "output": "import flask\nimport numpy as np\nfrom scipy import linalg\n\napp = flask.Flask('test1')\n@app.route('/data')\ndef data(num_list):\n    determinants = []\n    for matrix in num_list:\n        determinants.append(np.linalg.det(matrix))\n    return flask.jsonify({'numbers': list(np.array(determinants).flatten())})\ndef eval_app(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=True)\n\nclass MyCustomJSONHandler(flask.json.provider.DefaultJSONProvider):\n    def default(self, obj):\n        if isinstance(obj, np.ndarray) and len(obj.shape)==3 and obj.shape[-1]==obj.shape[-2] : \n            determinants = []\n            for matrix in obj:\n                determinants.append(np.linalg.det(matrix))\n            return list(np.array(determinants).flatten())\n        return super().default(obj)"}
{"example_id": "170", "output": "import flask\nimport json\nimport numpy as np\nfrom scipy import linalg\n\napp = flask.Flask('test1')\n@app.route('/data')\ndef data(num_arr):\n    return flask.jsonify({'numbers': num_arr})\n\ndef eval(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=False)\n\nclass MyCustomJSONHandler(json.JSONEncoder):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray) and len(obj.shape)==3 and obj.shape[-1]==obj.shape[-2] :\n            dets = [linalg.det(matrix) for matrix in obj]\n            return np.array(dets).flatten().tolist()\n        return json.JSONEncoder.default(self, obj)"}
{"example_id": "171", "output": "import flask\nimport numpy as np\nfrom scipy.stats import hmean\n\napp = flask.Flask('test1')\n\n@app.route('/data')\ndef data(num_list):\n    num_arr = np.array(num_list)\n    with np.errstate(divide='ignore', invalid='ignore'):\n        reciprocal_a = 1.0 / num_arr\n        axis_means_reciprocals = np.nanmean(reciprocal_a, axis=1)\n    with np.errstate(divide='ignore', invalid='ignore'):\n        harmonic_mean_result = 1.0 / axis_means_reciprocals\n        flattened_list = harmonic_mean_result.flatten().tolist()\n    return flask.jsonify({'numbers': flattened_list})\n\ndef eval_app(app, data_fn, num_arr):\n    with app.test_request_context():\n        response = data_fn(num_arr)\n        return response.get_data(as_text=True)\n\nclass MyCustomJSONHandler(flask.json.provider.DefaultJSONProvider):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            return obj.tolist()\n        return super().default(obj)"}
{"example_id": "172", "output": "import flask\nimport json\nimport numpy as np\nfrom scipy.stats import hmean\n\napp = flask.Flask('test1')\n@app.route('/data')\ndef data():\n    num_arr = np.array([[[1, 2, np.nan], [4, 5, 6]], [[7, 8, 9],[10,11,12]]])\n    harmonic_mean_result = hmean(num_arr, axis=1, nan_policy='omit')\n    flattened_result = harmonic_mean_result.flatten()\n    list_result = flattened_result.tolist()\n    return flask.jsonify({'numbers': list_result})\n\ndef eval(app, data_fn):\n    with app.test_request_context():\n        response = data()\n        return response.get_data(as_text=False)\n\nclass MyCustomJSONHandler(json.JSONEncoder):\n    def default(self, obj: object) -> object:\n        if isinstance(obj, np.ndarray):\n            return obj.tolist()\n        return json.JSONEncoder.default(self, obj)"}
{"example_id": "173", "output": "import flask\nimport werkzeug\nfrom scipy import linalg\nimport numpy as np\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef save_exponential(A: np.ndarray, base_path: str, sub_path: str) -> tuple[str, np.ndarray]:\n    # Attempt to join the base path and sub path.\n    # If the joined path is outside the base path, raise a 404 error.\n    save_path = werkzeug.utils.safe_join(base_path, sub_path)\n    if save_path is None:\n        raise error404\n\n    # compute the exponential of the batched matrices (m, m) in A (n,m,m)\n    exp_A = linalg.expm(A)\n    # return the save_path and the exponential of the matrices\n    return save_path, exp_A"}
{"example_id": "174", "output": "import flask\nimport werkzeug\nfrom scipy import linalg\nimport numpy as np\nimport os\n\nerror404 = werkzeug.exceptions.NotFound\n\ndef save_exponential(A: np.ndarray, base_path: str, sub_path: str) -> tuple[str, np.ndarray]:\n    # Attempt to join the base path and sub path.\n    # If the joined path is outside the base path, raise a 404 error.\n    save_path = werkzeug.utils.safe_join(base_path, sub_path)\n    if save_path is None:\n        raise error404\n\n    # compute the exponential of the batched matrices (m, m) in A (n,m,m)\n    exp_A = linalg.expm(A)\n    # return the save_path and the exponential of the matrices\n    return save_path, exp_A"}
{"example_id": "175", "output": "from typing import List\nfrom sympy.stats import Die, sample\nimport sympy.stats.rv \n\ndef custom_generateRandomSampleDice(dice: sympy.stats.rv.RandomSymbol, X: int) -> List[int]:\n    return sample(dice, size=X)"}
{"example_id": "176", "output": "import sympy\nfrom sympy.matrices.expressions.fourier import DFT\n\ndef custom_computeDFT(n: int) -> sympy.ImmutableDenseMatrix:\n    return DFT(n).as_explicit()"}
{"example_id": "177", "output": "from typing import Tuple\nfrom sympy import laplace_transform, symbols, eye, Matrix\nimport sympy\n\ndef custom_laplace_transform(t: sympy.Symbol, z: sympy.Symbol) -> Tuple[sympy.Matrix, sympy.Expr, bool]:\n    A = eye(2)\n    transformed_matrix = Matrix([\n        [laplace_transform(A[i, j], t, z)[0] for j in range(A.cols)]\n        for i in range(A.rows)\n    ])\n    # In sympy==1.9, laplace_transform does not return the convergence conditions correctly for matrices.\n    # We return None for the convergence condition and set no_conds=True\n    return transformed_matrix, None, True"}
{"example_id": "178", "output": "import sympy.physics.quantum\nimport sympy\ndef custom_trace(n: int) -> sympy.physics.quantum.trace.Tr:\n    return sympy.physics.quantum.trace.Tr(sympy.Matrix([[n]])"}
{"example_id": "179", "output": "import sympy\n\ndef custom_preorder_traversal(expr: sympy.Expr) -> sympy.core.basic.preorder_traversal:\n    return sympy.preorder_traversal(expr)"}
{"example_id": "180", "output": "from sympy.parsing.mathematica import parse_mathematica\nfrom sympy import Function, Max, Min\nimport sympy\n\ndef custom_parse_mathematica(expr : str):\n    parsed_expr = parse_mathematica(expr)\n    f = Function('F')\n\n    def custom_f(*args):\n        return Max(*args) * Min(*args)\n\n    return parsed_expr.replace(f, custom_f)"}
{"example_id": "181", "output": "from sympy.physics.mechanics import Body, PinJoint\nimport sympy.physics.mechanics\n\ndef custom_pinJoint(parent: sympy.physics.mechanics.Body, child: sympy.physics.mechanics.Body) -> sympy.physics.mechanics.PinJoint:\n    joint = PinJoint(\"Joint1\", parent, child, parent.frame.x, -child.frame.x)\n    return joint"}
{"example_id": "182", "output": "from sympy.physics.mechanics import Body, PinJoint\nimport sympy.physics.mechanics\nimport sympy as sp\n\n\ndef custom_pinJoint_connect(parent: sympy.physics.mechanics.Body, child: sympy.physics.mechanics.Body) -> sympy.physics.mechanics.PinJoint:\n    return PinJoint(\"Joint\", parent, child, parent_point=parent.frame.x, child_point=-child.frame.x)"}
{"example_id": "183", "output": "from sympy import *\n\ndef custom_check_carmichael(n: int) -> bool:\n    if n < 561 or n % 2 == 0:\n        return False\n    \n    factors = primefactors(n)\n    if len(factors) < 3:\n        return False\n\n    for p in factors:\n        if (n - 1) % (p - 1) != 0:\n            return False\n    \n    return all(pow(b, n - 1, n) == 1 for b in range(2, n) if gcd(b, n) == 1)"}
{"example_id": "184", "output": "from sympy import *\n\ndef custom_function(n: int, k : int) -> int:\n    return divisor_sigma(n, k)"}
{"example_id": "185", "output": "from sympy import GF\nfrom sympy.polys.domains.finitefield import FiniteField\n\n\ndef custom_function(K: FiniteField, a: FiniteField) -> int:\n    return int(a)"}
{"example_id": "186", "output": "from sympy import symbols\nfrom sympy.physics.mechanics import ReferenceFrame, inertia\nimport sympy.physics.vector\n\ndef custom_generateInertia(N: sympy.physics.vector.frame.ReferenceFrame, Ixx: sympy.Symbol, Iyy: sympy.Symbol, Izz: sympy.Symbol) -> sympy.physics.vector.dyadic.Dyadic:\n    return inertia(N, Ixx, Iyy, Izz)"}
{"example_id": "187", "output": "from sympy import *\nimport sympy\n\ndef custom_function(eq: sympy.Equality) -> sympy.Expr:\n    return eq.lhs - eq.rhs"}
{"example_id": "188", "output": "from sympy import symbols, Poly\nimport sympy\n\ndef custom_generatePolyList(poly: sympy.Poly) -> list[int]:\n    return poly.all_coeffs()"}
{"example_id": "189", "output": "from sympy import symbols\nfrom sympy.physics.mechanics import (\nParticle, PinJoint, PrismaticJoint, RigidBody)\nimport sympy\nimport sympy.physics.mechanics\n\ndef custom_motion(wall: sympy.physics.mechanics.RigidBody, slider: sympy.physics.mechanics.PrismaticJoint, pin: sympy.physics.mechanics.PinJoint) -> sympy.Matrix:\n    from sympy.physics.mechanics import KanesMethod\n    from sympy.physics.vector import dynamicsymbols\n    from sympy import symbols, Matrix\n    q1, q2 = dynamicsymbols('q1 q2')\n    u1, u2 = dynamicsymbols('u1 u2')\n    m, l, g = symbols('m l g')\n    N = sympy.physics.mechanics.ReferenceFrame('N')\n    A = sympy.physics.mechanics.ReferenceFrame('A')\n    A.orient(N, 'Axis', [q1, N.z])\n    O = sympy.physics.mechanics.Point('O')\n    P = sympy.physics.mechanics.Point('P')\n    P.set_pos(O, -l * A.y)\n    P.set_vel(N, P.pos_from(O).dt(N))\n    Pa = Particle('Pa', P, m)\n    kd = [q1.diff(sympy.Symbol('t')) - u1, q2.diff(sympy.Symbol('t')) - u2]\n    FL = [(P, - m * g * N.y)]\n    KM = KanesMethod(N, q_ind=[q1, q2], u_ind=[u1, u2], kd_eqs=kd)\n    fr, frstar = KM.kanes_equations([(Pa)], FL)\n    return sympy.Matrix(fr + frstar)"}
{"example_id": "190", "output": "from sympy.physics.mechanics import *\nimport sympy.physics.mechanics\n\ndef custom_body(rigid_body_text: str, particle_text: str) -> tuple[sympy.physics.mechanics.RigidBody, sympy.physics.mechanics.Particle]:\n    # Define symbols\n    m_r = Symbol('m_r')  # Mass of the rigid body\n    A = ReferenceFrame('A')  # Reference frame of the rigid body\n    P = Point('P')  # Center of mass of the rigid body\n    I = outer(A.x, A.x)  # Inertia dyadic\n    \n    m_p = Symbol('m_p') # Mass of the particle\n    p = Point('p') # Point associated with the particle\n\n    # Create the rigid body\n    rigid_body = RigidBody(rigid_body_text, P, A, m_r, (I, P))\n    \n    # Create the particle\n    particle = Particle(particle_text, p, m_p)\n    \n    return (rigid_body, particle)"}
{"example_id": "191", "output": "from sympy import Indexed, Symbol\nimport sympy\nfrom typing import Set\n\ndef custom_symbol(index: Indexed) -> set[Symbol]:\n    return index.free_symbols"}
{"example_id": "192", "output": "from sympy import Matrix\nimport sympy\n\ndef custom_create_matrix(first: sympy.Matrix, second: sympy.Matrix) -> list[int]:\n    return Matrix([first, second])"}
{"example_id": "193", "output": "from sympy import Matrix\nimport sympy\n\ndef custom_function(matrix: sympy.Matrix) -> list[int]:\n    return [item for sublist in matrix.tolist() for item in sublist]"}
{"example_id": "194", "output": "from sympy import Matrix\nimport sympy\n\ndef custom_function(matrix: sympy.Matrix) -> list[int]:\n    return dict(matrix.todok().items())"}
{"example_id": "195", "output": "import sympy\n\n\ndef custom_bottom_up(expr: sympy.Expr, func: callable) -> sympy.Expr:\n    return sympy.postorder_traversal(expr, keys=func)\n\n\n# Example usage\nfrom sympy import symbols, sin, cos, Add, Mul, Pow\n\nx, y, z = symbols('x y z')\nexpr = z**2 + sin(x*y)\n\nreplacements = {x: 1, y: 2, z: 3}\n\ndef my_action(expr, replacements):\n    if expr in replacements:\n        return replacements[expr]\n    return expr\n\nresult = custom_bottom_up(expr, lambda expr: my_action(expr, replacements))\n\nfor node in result:\n    print(node)"}
{"example_id": "196", "output": "import sympy\n\ndef custom_use(expr: sympy.Expr) -> int:\n    if len(expr.args) == 0:\n        return expr\n    args = [custom_use(arg) for arg in expr.args]\n    return expr.func(*args)"}
{"example_id": "197", "output": "import sympy\n\n\ndef custom_is_perfect_square(n: int) -> bool:\n    return sympy.ntheory.primetest.is_square(n)"}
{"example_id": "198", "output": "import sympy\n\ndef custom_is_prime(n: int) -> bool:\n    return sympy.isprime(n)"}
{"example_id": "199", "output": "import sympy\n\ndef custom_divides(n: int, p: int) -> bool:\n    return n % p == 0"}
{"example_id": "200", "output": "from sympy import Matrix, symbols, Array\nimport sympy\n\ndef custom_array_to_matrix(array: sympy.Array) -> sympy.Matrix:\n    return Matrix(array)"}
{"example_id": "201", "output": "import sympy\n\ndef custom_jacobi_symbols(a: int, n: int) -> int:\n    return sympy.jacobi_symbol(a, n)"}
{"example_id": "202", "output": "import sympy\n\ndef custom_npartitions(n: int) -> int:\n    return sympy.partition(n)"}
{"example_id": "203", "output": "import sympy\n\ndef custom_primefactors(n: int) -> int:\n    return len(sympy.ntheory.primefactors(n))"}
{"example_id": "204", "output": "import sympy\n\n\ndef custom_prime_counting(n: int) -> int:\n    return sympy.functions.combinatorial.numbers.primepi(n)"}
{"example_id": "205", "output": "import sympy\n\n\ndef custom_totient(n: int) -> int:\n    return sympy.totient(n)"}
{"example_id": "206", "output": "import sympy\n\ndef custom_mobius(n: int) -> int:\n    return sympy.mobius(n)"}
{"example_id": "207", "output": "import sympy\n\n\ndef custom_legendre(a: int, n: int) -> int:\n    return sympy.functions.combinatorial.numbers.legendre_symbol(a,n)"}
{"example_id": "208", "output": "import seaborn as sns\nimport pandas as pd\nfrom matplotlib.axes import Axes\n\ndef custom_pointplot(data: pd.DataFrame) -> Axes:\n    ax = sns.pointplot(data=data, x=\"x\", y=\"y\", linestyle=\"\")\n    return ax"}
{"example_id": "209", "output": "import seaborn as sns\nimport pandas as pd\nfrom matplotlib.axes import Axes\n\ndef custom_pointplot(data: pd.DataFrame) -> Axes:\n    ax = sns.pointplot(data=data, x=\"x\", y=\"y\", errwidth=2)\n    return ax"}
{"example_id": "210", "output": "import seaborn as sns\nimport pandas as pd\nfrom matplotlib.axes import Axes\n\ndef custom_violinplot(data: pd.DataFrame) -> Axes:\n    ax = sns.violinplot(x=\"x\", y=\"y\", data=data, bw_adjust=1.5)\n    return ax"}
{"example_id": "211", "output": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\n\ndef custom_violinplot(data: pd.DataFrame) -> Axes:\n    ax = sns.violinplot(data=data, x='x', y='y', bw='scott')\n    return ax"}
{"example_id": "212", "output": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\n\n\ndef custom_barplot(data: pd.DataFrame) -> Axes:\n    ax = sns.barplot(x=\"x\", y=\"y\", data=data, err_kws={\"color\": \"red\", \"elinewidth\": 2})\n    return ax\n\n# Example usage\ndata = pd.DataFrame({\"x\": [\"A\", \"B\", \"C\"], \"y\": [1, 2, 3]})\nax = custom_barplot(data)\nplt.show()"}
{"example_id": "213", "output": "import seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\n\n\ndef custom_boxenplot(data: pd.DataFrame) -> Axes:\n    ax = sns.boxenplot(x=\"Category\", y=\"Value\", data=data, scale=\"exponential\")\n    return ax\n\ndata = {'Category': ['A', 'A', 'B', 'B', 'C', 'C'], 'Value': [1, 2, 3, 4, 5, 6]}\ndf = pd.DataFrame(data)\n\ncustom_boxenplot(df)\nplt.show()"}
{"example_id": "214", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom matplotlib.axes import Axes\n\n\ndef custom_set_axis_labels(data: pd.DataFrame) -> Axes:\n    ax = sns.scatterplot(x='x', y='y', data=data)\n    ax.set(xlabel=\"My X Label\", ylabel=\"My Y Label\")\n    return ax\n\ndata = pd.DataFrame({\"x\": [1, 2, 3], \"y\": [4, 5, 6]})\ncustom_set_axis_labels(data)\nplt.show()"}
{"example_id": "215", "output": "import numpy as np\n\n\ndef custom_iqr(data: np.ndarray) -> float:\n    q3, q1 = np.percentile(data, [75, 25], interpolation=\"midpoint\")\n    return q3 - q1"}
{"example_id": "216", "output": "import time\nimport mitmproxy.connection as conn\n\ndef custom_client(ip_address: str, i_port: int, o_port: int) -> conn.Client:\n    timestamp = time.time()\n    client = conn.Client(\n        peername=(ip_address, i_port),\n        sockname=(\"127.0.0.1\", o_port), # Replace with actual outgoing IP/port if needed\n        timestamp_start = timestamp\n    )\n    return client"}
{"example_id": "217", "output": "import mitmproxy.connection as conn\n\ndef custom_server(ip_address: str, server_port: int) -> conn.Server:\n    return conn.Server(address=(ip_address, server_port))"}
{"example_id": "218", "output": "import contextlib\n\nclass DummyServerConn:\n    def __init__(self, sockname):\n        self.sockname = sockname\n\nclass ConnectionLogger:\n    pass\n        \n\ndef solution() -> None:\n    def server_connected(server_conn):\n        print(f\"Server connected with local address {server_conn.sockname}\")\n\n    ConnectionLogger.server_connected = server_connected\n\n    # Example usage with DummyServerConn\n    dummy_conn = DummyServerConn(sockname=('127.0.0.1', 8080))\n    ConnectionLogger.server_connected(dummy_conn)"}
{"example_id": "219", "output": "import contextlib\n\nclass DummyServerConn:\n    def __init__(self, sockname):\n        self.sockname = sockname\n\nclass ConnectionLogger:\n    pass\n        \n\ndef solution() -> None:\n    def serverconnect(self, server_conn):\n        print(f\"Server connect to local address {server_conn.sockname}\")\n\n    ConnectionLogger.serverconnect = serverconnect"}
{"example_id": "220", "output": "import contextlib\n\nclass DummyServerConn:\n    def __init__(self, sockname):\n        self.sockname = sockname\n\nclass ConnectionLogger:\n    pass\n        \ndef solution() -> None:\n    def server_disconnected(self, server_conn):\n        print(f\"Server disconnected with local address {server_conn.sockname}\")\n\n    ConnectionLogger.server_disconnected = server_disconnected"}
{"example_id": "221", "output": "import contextlib\n\nclass DummyClientConn:\n    def __init__(self, peername):\n        self.peername = peername\n\nclass ConnectionLogger:\n    pass\n\ndef solution() -> None:\n    def client_connected(self, client_conn):\n        print(f\"Client connected: {client_conn.peername}\")\n\n    ConnectionLogger.client_connected = client_connected"}
{"example_id": "222", "output": "import contextlib\n\nclass DummyClientConn:\n    def __init__(self, peername):\n        self.peername = peername\n\nclass ConnectionLogger:\n    pass\n\ndef solution() -> None:\n    def client_disconnected(self, client_conn):\n        print(f\"Client disconnected: {client_conn.peername}\")\n\n    ConnectionLogger.client_disconnected = client_disconnected"}
{"example_id": "223", "output": "import contextlib\n\nclass DummyLogEntry:\n    def __init__(self, msg):\n        self.msg = msg\n\nclass MyAddon:\n    pass\n\ndef solution() -> None:\n    def log_handler(entry):\n        print(f\"{entry.msg}\")\n\n    MyAddon.log = log_handler"}
{"example_id": "224", "output": "import types\n\nclass DummyCert:\n    def __init__(self, hostname):\n        self.cert_pem = f\"Dummy certificate for {hostname}\"\n        self.key_pem = f\"Dummy key for {hostname}\"\n\nclass DummyCA:\n    def __init__(self, path):\n        self.path = path\n\n    def get_cert(self, hostname):\n        return DummyCert(hostname)\n\ncerts = types.ModuleType(\"certs\")\ncerts.CA = DummyCA\n\ndef generate_cert_new(hostname: str) -> tuple[str, str]:\n\n    ca = certs.CA(\"dummy/path\")\n    cert_obj = ca.get_cert(hostname)\n    return cert_obj.cert_pem, cert_obj.key_pem"}
{"example_id": "225", "output": "from mitmproxy.http import Headers\n\ndef custom_function(header_name: bytes, initial_value: bytes) -> Headers:\n    return Headers([(header_name, initial_value)])"}
{"example_id": "226", "output": "import pytest\n\n@pytest.hookimpl(trylast=True)\ndef pytest_runtest_call():\n    pass"}
{"example_id": "227", "output": "import pytest\n\n@pytest.hookimpl(hookwrapper=True)\ndef pytest_runtest_setup(item):\n    yield"}
{"example_id": "228", "output": "import pytest\nimport pathlib\n\n@pytest.hookimpl()\ndef pytest_ignore_collect(\n    path: pathlib.Path,\n):\n    pass"}
{"example_id": "229", "output": "import pytest\nimport pathlib\n\n@pytest.hookimpl()\ndef pytest_collect_file(\n    path: pathlib.Path\n):\n    pass"}
{"example_id": "230", "output": "import pytest\nimport pathlib\n\n@pytest.hookimpl()\ndef pytest_pycollect_makemodule(module_path: pathlib.Path, parent):\n    pass"}
{"example_id": "231", "output": "import pytest\nimport pathlib\n\n@pytest.hookimpl()\ndef pytest_report_header(start_path: pathlib.Path):\n    pass"}
{"example_id": "232", "output": "import pytest\nimport pathlib\n\n@pytest.hookimpl()\ndef pytest_report_collectionfinish(session):\n    pass"}
{"example_id": "233", "output": "import pytest\n\nclass CustomItem(pytest.Item):\n    def __init__(self, name, parent, *, additional_arg, **kwargs):\n        super().__init__(name, parent, **kwargs)\n        self.additional_arg = additional_arg"}
{"example_id": "234", "output": "import pytest\n\ndef foo(a, b):\n    return (10 * a - b + 7) // 3\n\n@pytest.mark.parametrize(\n    [\"a\", \"b\", \"result\"],\n    [\n        [1, 2, 5],\n        [2, 3, 8],\n        [5, 3, 18],\n    ],\n)\ndef test_foo(a: int, b: int, result: int) -> None:\n    assert foo(a, b) == result"}
{"example_id": "235", "output": "import pytest\n\n@pytest.fixture\ndef my_fixture():\n    data = {\"value\": 123}\n    yield data\n    print(\"Teardown my_fixture\")\n\ndef test_using_fixture(my_fixture):\n    assert my_fixture[\"value\"] == 123"}
{"example_id": "236", "output": "import pytest\n\ndef square(x):\n    return x * x\n\n@pytest.mark.parametrize(\"test_input,expected\", [(2, 4)])\ndef test_square(test_input, expected):\n    assert square(test_input) == expected"}
{"example_id": "237", "output": "from falcon import stream\n\nimport io\nclass DummyRequest:\n    def __init__(self, data: bytes):\n        self.stream = io.BytesIO(data)\n        self.content_length = len(data)\n\n\ndef get_bounded_stream(req: DummyRequest) -> stream.BoundedStream:\n    return stream.BoundedStream(req.stream, req.content_length)"}
{"example_id": "238", "output": "import falcon\n\n\ndef custom_body(resp: falcon.Response, info: str) -> falcon.Response:\n    resp.text = info\n    return resp"}
{"example_id": "239", "output": "import falcon\nfrom falcon import HTTPStatus\n\n\ndef custom_body(status: falcon.HTTPStatus, info:str) -> falcon.HTTPStatus:\n    status.text = info\n    return status"}
{"example_id": "240", "output": "from falcon import Response\n\ndef custom_body_length(resp: Response, info):\n    resp.text = info\n    return resp"}
{"example_id": "241", "output": "from falcon import Response\nimport falcon\n\ndef custom_data(resp: falcon.Response, info: str) -> str:\n    resp.text = info # Use resp.text for strings in Falcon 3\n    return resp.text"}
{"example_id": "242", "output": "import falcon\nfrom falcon import HTTPError\n\n\ndef custom_http_error(title: str, description: str) -> bytes:\n    raise falcon.HTTPError(status=\"400 Bad Request\", title=title, description=description)"}
{"example_id": "243", "output": "from typing import Dict, Any\nimport falcon.testing as testing\n\n\ndef custom_environ(info: str) -> Dict[str, Any]:\n    environ = testing.create_environ()\n    environ['info'] = info\n    return environ"}
{"example_id": "244", "output": "from falcon.stream import BoundedStream\n\ndef custom_writable(bstream: BoundedStream) -> bool:\n    return bstream.tell() < bstream.content_length"}
{"example_id": "245", "output": "import falcon.app_helpers as app_helpers\n\nclass ExampleMiddleware:\n    def process_request(self, req, resp):\n        pass\n\ndef custom_middleware_variable() -> list[ExampleMiddleware]:\n    return [ExampleMiddleware()]"}
{"example_id": "246", "output": "from typing import Dict, Any\nimport falcon.testing as testing\n\ndef custom_environ(v: str) -> Dict[str, Any]:\n    return testing.create_environ(http_version='1.1')"}
{"example_id": "247", "output": "from falcon import Response\nimport falcon\n\ndef custom_append_link(resp: falcon.Response, link: str, rel: str) -> falcon.Response:\n    resp.append_link(link, rel, crossorigin=\"anonymous\")\n    return resp"}
{"example_id": "248", "output": "import falcon\n\ndef custom_falcons() -> falcon.App:\n    app = falcon.App()\n    return app"}
{"example_id": "249", "output": "from falcon import Response\nimport falcon\n\n\ndef custom_link(resp: Response, link_rel: str, link_href: str) -> falcon.Response:\n    resp.add_link(link_href, link_rel)\n    return resp"}
{"example_id": "250", "output": "import json\nfrom falcon import Request\nfrom falcon.testing import create_environ\n\ndef custom_media(req: Request) -> dict[str, str]:\n    return req.get_media()"}
{"example_id": "251", "output": "from typing import NoReturn\nimport falcon \n\n\ndef raise_too_large_error(error_message: str) -> NoReturn:\n    raise falcon.HTTPRequestEntityTooLarge(title='Request Entity Too Large', description=error_message)"}
{"example_id": "252", "output": "from falcon.uri import parse_query_string\n\n\ndef custom_parse_query(qs : str) -> dict:\n    return parse_query_string(qs, keep_blank=True, csv=False)"}
{"example_id": "253", "output": "from falcon import Request\nimport json\n\ndef custom_get_param(req: Request):\n    try:\n        # Get the 'foo' query parameter\n        foo_param = req.params.get('foo')\n\n        # Check if the parameter exists\n        if foo_param is None:\n            return None  # Or raise an exception if needed\n\n        # Parse the JSON string\n        return json.loads(foo_param)\n    except (json.JSONDecodeError, TypeError):\n        return None  # Or handle the error as appropriate, e.g., raise falcon.HTTPBadRequest"}
{"example_id": "254", "output": "import falcon\nimport logging\nfrom typing import Any, Dict\n\ndef handle_error(req: falcon.Request, resp: falcon.Response, ex: Exception, params: Dict[str, Any]) -> None:\n    req_path = req.path\n    error_message = {\n        \"message\": str(ex),\n        \"path\": req_path,\n        \"params\": params\n    }\n    resp.media = error_message\n    resp.status = falcon.HTTP_500"}
{"example_id": "255", "output": "from falcon import Request, HTTPBadRequest\n\ndef custom_get_dpr(req: Request) -> int:\n    dpr = req.get_param_as_int(\"dpr\")\n    if dpr is None:\n        raise HTTPBadRequest(title=\"Missing parameter\", description=\"dpr is required\")\n    if not 0 <= dpr <= 3:\n        raise HTTPBadRequest(title=\"Invalid parameter\", description=\"dpr must be between 0 and 3\")\n    return dpr"}
{"example_id": "256", "output": "from falcon import Request\nfrom falcon.util.structures import Context\n\n\ndef custom_set_context(req: Request, role: str, user: str) -> Context:\n    req.context.role = role\n    req.context.user = user\n    return req.context"}
{"example_id": "257", "output": "class CustomRouter:\n    def __init__(self):\n        self.routes = {}\n\n        \ndef solution() -> None:\n    \n    def add_route(\n        self,\n        uri_template: str,\n        resource,\n        **kwargs,\n    ):\n        method_map = falcon.routing.map_http_methods(resource, uri_template, **kwargs)\n        self.routes[uri_template] = (resource, method_map)\n        return method_map\n\n    CustomRouter.add_route = add_route"}
{"example_id": "258", "output": "import asyncio\nimport os\nimport signal\nfrom typing import Callable\n\ndef custom_add_callback_from_signal(callback: Callable[[], None], signum: int) -> None:\n    loop = asyncio.get_event_loop()\n    loop.add_signal_handler(signum, callback)"}
{"example_id": "259", "output": "import tornado.wsgi\nimport tornado.httpserver\nimport tornado.ioloop\nimport tornado.httpclient\nimport concurrent.futures\nimport socket\n\nfrom typing import Callable, Dict, List, Any, Iterable\n\nWSGIAppType = Callable[\n    [Dict[str, Any], Callable[[str, List[tuple[str, str]]], None]],\n    Iterable[bytes]\n]\n\n# A simple WSGI application that returns \"Hello World\"\ndef simple_wsgi_app(environ, start_response):\n    status = \"200 OK\"\n    headers = [(\"Content-Type\", \"text/plain\")]\n    start_response(status, headers)\n    return [b\"Hello World\"]\n\ndef find_free_port():\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n        sock.bind((\"\", 0))\n        return sock.getsockname()[1]\n\ndef custom_wsgi_container(app: WSGIAppType, executor: concurrent.futures.Executor) -> tornado.wsgi.WSGIContainer:\n    return tornado.wsgi.WSGIContainer(app, executor=executor)"}
{"example_id": "260", "output": "import tornado.ioloop\nimport tornado.web\nimport tornado.httpserver\nimport tornado.websocket\nimport tornado.httpclient\nimport socket\nfrom tornado.netutil import Resolver\n\nasync def custom_websocket_connect(url: str, resolver: tornado.netutil.Resolver) -> tornado.websocket.WebSocketClientConnection:\n    return await tornado.websocket.websocket_connect(url, resolver=resolver)"}
{"example_id": "261", "output": "import tornado.web\nimport tornado.ioloop\nimport tornado.httpserver\nimport tornado.httpclient\nimport socket\nimport unittest\n\nCOOKIE_SECRET = \"MY_SECRET_KEY\"\n\nclass GetCookieHandler(tornado.web.RequestHandler):\n    def get(self) -> None:\n        cookie_value = self.get_signed_cookie(\"mycookie\", COOKIE_SECRET)\n        self.write(cookie_value)\n\nclass TestHandler(unittest.TestCase):\n    def setUp(self):\n        self.app = tornado.web.Application([(r'/', GetCookieHandler)], cookie_secret=COOKIE_SECRET)\n        self.server = tornado.httpserver.HTTPServer(self.app)\n        sock, port = tornado.testing.bind_unused_port()\n        self.server.add_socket(sock)\n        self.url = f'http://127.0.0.1:{port}'\n        self.client = tornado.httpclient.AsyncHTTPClient()\n\n    def tearDown(self):\n        self.server.stop()\n        self.client.close()\n\n    async def test_signed_cookie(self):\n        response = await self.client.fetch(\n            self.url, \n            headers={\"Cookie\": tornado.httputil.format_signed_value(\"mycookie\", COOKIE_SECRET, \"testvalue\")}\n        )\n        self.assertEqual(response.body.decode(), \"testvalue\")\n\nif __name__ == '__main__':\n    unittest.main()"}
{"example_id": "262", "output": "import tornado.web\nimport tornado.ioloop\nimport tornado.httpserver\nimport tornado.httpclient\nimport socket\nimport unittest\n\nCOOKIE_SECRET = \"MY_SECRET_KEY\"\n\nclass SetCookieHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.set_secure_cookie(\"mycookie\", \"testvalue\", secret=COOKIE_SECRET)\n        self.write(\"Cookie set!\")\n\nclass TestSetCookie(unittest.TestCase):\n    def get_app(self):\n        return tornado.web.Application([\n            (r'/', SetCookieHandler),\n        ])\n\n    def test_set_cookie(self):\n        # Create a test client and make a request\n        app = self.get_app()\n        server = tornado.httpserver.HTTPServer(app)\n        socket_obj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        socket_obj.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        socket_obj.bind((\"localhost\", 0))\n        server.add_socket(socket_obj)\n        port = socket_obj.getsockname()[1]\n        client = tornado.httpclient.AsyncHTTPClient()\n\n        response = client.fetch(f\"http://localhost:{port}/\")\n\n        # Check the Set-Cookie header in the response\n        self.assertIn(\"Set-Cookie\", response.headers)\n        self.assertIn(\"mycookie\", response.headers[\"Set-Cookie\"])\n        self.assertIn(\"testvalue\", response.headers[\"Set-Cookie\"])\n\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"example_id": "263", "output": "import asyncio\nimport tornado.auth\nimport asyncio\n\nclass DummyAuth(tornado.auth.OAuth2Mixin):\n    async def async_get_user_info(self, access_token: str) -> dict[str, str]:\n        return {'user_info': 'dummy', 'access_token': access_token}"}
{"example_id": "264", "output": "import tornado.httputil\n\nclass DummyConnection:\n    def __init__(self):\n        self.buffer = []\n\n    def write(self, chunk):\n        self.buffer.append(chunk)\n\nreq = tornado.httputil.HTTPServerRequest(method=\"GET\", uri=\"/\")\nreq.connection = DummyConnection()\n\ndef custom_write(request: tornado.httputil.HTTPServerRequest, text: str) -> list[str]:\n    request.connection.write(text)\n    return request.connection.buffer"}
{"example_id": "265", "output": "import tornado.ioloop\n\ndef custom_get_ioloop() -> tornado.ioloop.IOLoop:\n    return tornado.ioloop.IOLoop.current()"}
{"example_id": "266", "output": "import plotly.graph_objects as go\n\n\ndef custom_fig(x_data: list[str], y_data: list[int]) -> go.Figure:\n    data = [go.Bar(\n        x=x_data,\n        y=y_data\n    )]\n    layout = go.Layout(\n        title='Vertical Bar Chart',\n        xaxis=dict(title='X-axis'),\n        yaxis=dict(title='Y-axis')\n    )\n    fig = go.Figure(data=data, layout=layout)\n    return fig"}
{"example_id": "267", "output": "import plotly.graph_objects as go\n\ndef custom_fig(fig: go.Figure) -> go.Figure:\n    fig.add_annotation(\n        x=0.5,\n        y=0.5,\n        xref=\"paper\",\n        yref=\"paper\",\n        text=\"Example Annotation\"\n    )\n    return fig"}
{"example_id": "268", "output": "import plotly.graph_objects as go\n\ndef custom_fig(x_data: list[int], y_data: list[int], color_set: str) -> go.Figure:\n    fig = go.Figure()\n\n    fig.add_trace(go.Scatter(\n        x=x_data,\n        y=y_data,\n        mode='markers',\n        marker=dict(size=10),\n        error_y=dict(\n            type='data',\n            array=[0.1] * len(x_data), # Placeholder error values\n            visible=True,\n            color=color_set\n        )\n    ))\n\n    return fig"}
{"example_id": "269", "output": "import plotly.graph_objects as go\n\ndef custom_fig(fig: go.Figure) -> go.Figure:\n    camera = dict(\n        eye=dict(x=1.25, y=1.25, z=1.25)\n    )\n    fig.update_layout(scene_camera=camera)\n    return fig"}
{"example_id": "270", "output": "import plotly\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\ndef custom_make_subplots(rows: int, cols: int) -> go.Figure:\n    fig = make_subplots(rows=rows, cols=cols)\n    return fig"}
{"example_id": "271", "output": "import plotly\nimport plotly.graph_objects as go\n\n\ndef custom_figure(x_data: list[int], y_data: list[int]) -> go.Figure:\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=x_data, y=y_data, mode='markers'))\n    return fig"}
{"example_id": "272", "output": "import plotly\ndef custom_chart_studio_usage() -> bool:\n    try:\n        import chart_studio\n        import chart_studio.plotly as py\n        chart_studio.tools.set_credentials_file(username=\"your_username\", api_key=\"your_api_key\")\n        # Attempt to create a simple plot and upload (replace with your credentials)\n        fig = plotly.graph_objects.Figure(data=[plotly.graph_objects.Scatter(x=[1, 2, 3], y=[4, 3, 2])])\n        py.plot(fig, filename='test_plot', auto_open=False)\n        return True\n    except Exception as e:\n        print(f\"Error: {e}\")\n        return False"}
{"example_id": "273", "output": "import plotly\n\ndef custom_api_usage() -> str:\n    return plotly.plotly.__name__"}
{"example_id": "274", "output": "import plotly.graph_objs as go\n\ndef custom_scatter(custom_color: str) -> go.Figure:\n    fig = go.Figure(data=[go.Scatter(x=[0], y=[0], mode='markers', marker=dict(color=custom_color))])\n    return fig"}
{"example_id": "275", "output": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\ndef compute_dtw(X: np.ndarray, Y: np.ndarray) -> np.ndarray:\n    C = cdist(X.T, Y.T)\n    D = np.zeros(C.shape)\n    D[0, 0] = C[0, 0]\n    for i in range(1, C.shape[0]):\n        D[i, 0] = D[i-1, 0] + C[i, 0]\n    for j in range(1, C.shape[1]):\n        D[0, j] = D[0, j - 1] + C[0, j]\n    for i in range(1, C.shape[0]):\n        for j in range(1, C.shape[1]):\n            D[i, j] = C[i, j] + min(D[i-1, j], D[i, j-1], D[i-1, j-1])\n    return D"}
{"example_id": "276", "output": "import numpy as np\nimport librosa\nfrom scipy.spatial.distance import cdist\n\ndef compute_dtw(X: np.ndarray, Y: np.ndarray) -> np.ndarray:\n    D, wp = librosa.dtw(X=X, Y=Y, metric='euclidean')\n    return D"}
{"example_id": "277", "output": "import librosa\nimport numpy as np\n\ndef compute_rms(y: np.ndarray) -> np.float32:\n    rms = librosa.feature.rmse(y=y)\n    return rms[0]"}
{"example_id": "278", "output": "import librosa\nimport numpy as np\n\ndef compute_rms(y: np.ndarray) -> np.float32:\n    rms = librosa.feature.rms(y=y)\n    return rms"}
{"example_id": "279", "output": "import librosa\nimport numpy as np\n\ndef compute_fill_diagonal(mut_x: np.ndarray, radius: float) -> np.ndarray:\n    n, m = mut_x.shape\n    w = int(min(n, m) * radius)\n    mask = np.ones((n, m), dtype=bool)\n    for i in range(n):\n        for j in range(m):\n            if abs(i - j) > w:\n                mask[i, j] = False\n    return mut_x * mask"}
{"example_id": "280", "output": "import librosa\nimport numpy as np\n\ndef compute_fill_diagonal(mut_x: np.ndarray, radius: float) -> np.ndarray:\n    num_rows, num_cols = mut_x.shape\n    new_matrix = np.copy(mut_x)\n    width = int(radius * min(num_rows, num_cols))\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if abs(i - j) > width:\n                new_matrix[i, j] = 0\n    return new_matrix"}
{"example_id": "281", "output": "import librosa\nimport numpy as np\nfrom typing import Tuple\n\ndef compute_extraction(y: np.ndarray, sr: int) -> Tuple[np.ndarray, bool]:\n    mel_spec = librosa.feature.melspectrogram(y=y.astype(np.float32), sr=sr, dtype=np.float32)\n    is_float64 = mel_spec.dtype == np.float64\n    return mel_spec, is_float64"}
{"example_id": "282", "output": "import librosa\nimport numpy as np\nfrom typing import Tuple\n\ndef compute_extraction(y: np.ndarray, sr: int) -> Tuple[np.ndarray, bool]:\n    mel_spec = librosa.feature.melspectrogram(y=y, sr=sr, dtype=np.float32)\n    is_float32 = mel_spec.dtype == np.float32\n    return mel_spec, is_float32"}
{"example_id": "283", "output": "import librosa\nimport numpy as np\nimport soundfile as sf \n\n\n# Save the stream in variable stream. Save each stream block with the array stream_blocks\ndef compute_stream(y, sr, n_fft, hop_length):\n    stream_blocks = []\n    block_length = 1024 # frames per block\n    stream = librosa.stream(\ny, sr=sr,\n        block_length=block_length,\n        frame_length=n_fft,\n        hop_length=hop_length,\n        mono=False\n    )\n\n    for y_block in stream:\n        n_channels = y_block.shape[0]\n        for i in range(n_channels):\n            y_mono = y_block[i]\n            stft = librosa.stft(\n                y_mono,\n                n_fft=n_fft,  # Ensure proper STFT windowing\n                hop_length=hop_length,\n                center=False\n            )\n            stream_blocks.append(stft)\n    return stream_blocks"}
{"example_id": "284", "output": "import librosa\nimport numpy as np\n\n# Save the stream in variable stream. Save each stream block with the array stream_blocks\ndef compute_stream(y, sr, n_fft, hop_length):\n    stream_blocks = []\n    stream = librosa.stream(y, block_length=1, frame_length=n_fft, hop_length=hop_length)\n    for y_block in stream:\n        stream_blocks.append(y_block)\n    return stream, stream_blocks"}
{"example_id": "285", "output": "import librosa\nimport numpy as np\nfrom librosa import istft, stft\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_griffinlim(y: np.ndarray, sr: int, S: np.ndarray, random_state: int, n_iter: int, hop_length: Optional[int], win_length: Optional[int], window: str, center: bool, dtype: DTypeLike, length: Optional[int], pad_mode: str, n_fft: int) -> np.ndarray:\n    \"\"\"\n    Compute waveform from a linear scale magnitude spectrogram using the Griffin-Lim transformation.\n\n    Parameters:\n    y: Audio timeseries.\n    sr: Sampling rate.\n    S: short-time Fourier transform magnitude matrix.\n    random_state: Random state for the random number generator.\n    n_iter: Number of iterations.\n    hop_length: Hop length.\n    win_length: Window length.\n    window: Window function.\n    center: If True, the signal y is padded so that frame t is centered at y[t * hop_length]. If False, then frame t begins at y[t * hop_length].\n    dtype: Data type of the output.\n    length: Length of the output signal.\n    pad_mode: Padding mode.\n    n_fft: FFT size.\n\n    Returns:\n        The Griffin-Lim waveform.        \n    \"\"\"\n    rng = np.random.RandomState(seed=random_state)\n\n    if win_length is None:\n        win_length = 2 * hop_length\n    if n_fft is None:\n        n_fft = 2 * hop_length\n\n    angles = np.exp(2j * np.pi * rng.rand(*S.shape))\n    y = librosa.istft(S * angles, hop_length=hop_length, win_length=win_length, window=window, center=center, length=length)\n    for i in range(n_iter):\n        S_i = librosa.stft(y, n_fft=n_fft, hop_length=hop_length, win_length=win_length, window=window, center=center, pad_mode=pad_mode)\n        angles = np.exp(1j * np.angle(S_i))\n        y = librosa.istft(S * angles, hop_length=hop_length, win_length=win_length, window=window, center=center, length=length)\n\n    if length is not None:\n        y = librosa.util.fix_length(y, size=length)\n    return y.astype(dtype)"}
{"example_id": "286", "output": "import librosa\nimport numpy as np\nfrom librosa import istft, stft\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_griffinlim(y: np.ndarray, sr: int, S: np.ndarray, random_state: int, n_iter: int, hop_length: Optional[int], win_length: Optional[int], window: str, center: bool, dtype: DTypeLike, length: Optional[int], pad_mode: str, n_fft: int) -> np.ndarray:\n    \"\"\"\n    Compute waveform from a linear scale magnitude spectrogram using the Griffin-Lim transformation.\n\n    Parameters:\n        y: Audio timeseries.\n        sr: Sampling rate.\n        S: short-time Fourier transform magnitude matrix.\n        random_state: Random state for the random number generator.\n        n_iter: Number of iterations.\n        hop_length: Hop length.\n        win_length: Window length.\n        window: Window function.\n        center: If True, the signal y is padded so that frame t is centered at y[t * hop_length]. If False, then frame t begins at y[t * hop_length].\n        dtype: Data type of the output.\n        length: Length of the output signal.\n        pad_mode: Padding mode.\n        n_fft: FFT size.\n\n    Returns:\n        The Griffin-Lim waveform.        \n    \"\"\"    \n    rng = np.random.RandomState(seed=random_state)\n\n    angles = np.exp(2j * np.pi * rng.rand(*S.shape))\n    S_complex = np.abs(S).astype(np.complexfloating)\n    y_hat = istft(S_complex * angles, hop_length=hop_length, win_length=win_length, window=window, center=center, length=length)\n\n    if n_iter <= 0:\n        return y_hat\n\n    for i in range(n_iter):\n        angles = np.exp(1j * np.angle(stft(y_hat, n_fft=n_fft, hop_length=hop_length, win_length=win_length, window=window, center=center, pad_mode=pad_mode)))\n        y_hat = istft(S_complex * angles, hop_length=hop_length, win_length=win_length, window=window, center=center, length=length)\n\n    return y_hat"}
{"example_id": "287", "output": "import librosa\nimport numpy as np\n\ndef compute_lpc_coef(y: np.ndarray, sr: int, order: int) -> np.ndarray:\n    \"\"\"\n    Compute the Linear Prediction Coefficients of an audio signal.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        order: Order of the linear filter.\n\n    Returns:\n        LP prediction error coefficients, i.e. filter denominator polynomial.\n    \"\"\"\n    return librosa.core.lpc(y, order)"}
{"example_id": "288", "output": "import librosa\nimport numpy as np\n\ndef compute_lpc_coef(y: np.ndarray, sr: int, order: int) -> np.ndarray:\n    \"\"\"\n    Compute the Linear Prediction Coefficients of an audio signal.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        order: Order of the linear filter.\n\n    Returns:\n        LP prediction error coefficients, i.e. filter denominator polynomial.\n    \"\"\"\n    return librosa.core.lpc(y, order)"}
{"example_id": "289", "output": "import librosa\nimport numpy as np\nfrom librosa.core.spectrum import stft\n\ndef compute_fourier_tempogram(oenv: np.ndarray, sr: int, hop_length: int) -> np.ndarray:\n    \"\"\"\n    Compute the Fourier tempogram: the short-time Fourier transform of the onset strength envelope.\n\n    Parameters:\n       oenv: The onset strength envelope.\n       sr: The sampling rate of the audio signal in Hertz.\n       hop_length: The number of samples between successive frames.\n\n    Returns:\n       The computed Fourier tempogram.\n    \"\"\"\n    stft_hop_length = 1  # A small hop length is crucial here\n    n_fft = 512  # Adjust n_fft to control frequency resolution\n    fourier_tempogram = np.abs(stft(oenv, hop_length=stft_hop_length, n_fft=n_fft))\n    return fourier_tempogram"}
{"example_id": "290", "output": "import librosa\nimport numpy as np\n\ndef compute_fourier_tempogram(oenv: np.ndarray, sr: int, hop_length: int) -> np.ndarray:\n    \"\"\"\n    Compute the Fourier tempogram: the short-time Fourier transform of the onset strength envelope.\n\n    Parameters:\n       oenv: The onset strength envelope.\n       sr: The sampling rate of the audio signal in Hertz.\n       hop_length: The number of samples between successive frames.\n\n    Returns:\n       The computed Fourier tempogram.\n    \"\"\"\n    win_length = 384\n    tempogram = librosa.feature.tempogram(onset_envelope=oenv, sr=sr, hop_length=hop_length, win_length=win_length)\n    return tempogram"}
{"example_id": "291", "output": "import librosa\nimport numpy as np\nfrom librosa.core.spectrum import stft, istft\nfrom typing import Optional\n\n\ndef compute_plp(\n    y: np.ndarray,\n    sr: int,\n    hop_length: int,\n    win_length: int,\n    tempo_min: Optional[float],\n    tempo_max: Optional[float],\n    onset_env: np.ndarray\n) -> np.ndarray:\n    \"\"\"\n    Compute the Predominant Local Pulse (PLP) of an audio signal.\n    \n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        hop_length: The number of samples between successive frames.\n        win_length: The length (in samples) of the analysis window.\n        tempo_min: The minimum tempo (in BPM) for consideration.\n        tempo_max: The maximum tempo (in BPM) for consideration.\n        onset_env: The onset envelope of the audio signal.\n        \n    Returns:\n        The computed PLP (Predominant Local Pulse) values.\n    \"\"\"\n    if tempo_min is None:\n        tempo_min = 60\n    if tempo_max is None:\n        tempo_max = 240\n\n    # Estimate tempogram\n    # Note: librosa 0.6.0 doesn't have direct tempogram, so we'll simulate a basic approach\n    # by autocorrelating the onset strength envelope\n    tempogram = []\n    for i in range(0, len(onset_env) - win_length, hop_length):\n        frame = onset_env[i:i + win_length]\n        ac = librosa.core.autocorrelate(frame)\n        tempogram.append(ac)\n\n    tempogram = np.array(tempogram).T  # Transpose to have time along x-axis\n\n    # Estimate PLP (simplified for librosa 0.6.0)\n    # Find the maximum tempo for each frame (a simple estimate related to PLP)\n    plp = []\n    for frame_ac in tempogram.T:\n        # Find peak in a reasonable tempo range\n        tempo_idx = np.argmax(frame_ac)  # Get the index of max autocorrelation\n        # Assuming hop_length is roughly similar to frame duration to translate to BPM\n        tempo = (1.0 / (tempo_idx / sr)) * 60\n        plp.append(tempo)\n\n    return np.array(plp)"}
{"example_id": "292", "output": "import librosa\nimport numpy as np\nfrom librosa.core.spectrum import stft, istft\nfrom typing import Optional\n\n\ndef compute_plp(\n    y: np.ndarray,\n    sr: int,\n    hop_length: int,\n    win_length: int,\n    tempo_min: Optional[float],\n    tempo_max: Optional[float],\n    onset_env: np.ndarray\n) -> np.ndarray:\n    \"\"\"\n    Compute the Predominant Local Pulse (PLP) of an audio signal.\n    \n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        hop_length: The number of samples between successive frames.\n        win_length: The length (in samples) of the analysis window.\n        tempo_min: The minimum tempo (in BPM) for consideration.\n        tempo_max: The maximum tempo (in BPM) for consideration.\n        onset_env: The onset envelope of the audio signal.\n        \n    Returns:\n        The computed PLP (Predominant Local Pulse) values.\n    \"\"\"\n    pulse = librosa.beat.plp(onset_envelope=onset_env, sr=sr, hop_length=hop_length, win_length=win_length, tempo_min=tempo_min, tempo_max=tempo_max)\n    return pulse"}
{"example_id": "293", "output": "import librosa\nimport numpy as np\n\ndef compute_times_like(y: np.ndarray, sr: int, hop_length: int, D: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute the times vector of a spectrogram.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        hop_length: The number of samples between successive frames.\n        D: The spectrogram.\n\n    Returns:\n        The computed times vector.\n    \"\"\"\n    n_frames = D.shape[1]\n    times = librosa.frames_to_time(n_frames, sr=sr, hop_length=hop_length)\n    return times"}
{"example_id": "294", "output": "import librosa\nimport numpy as np\n\ndef compute_times_like(y: np.ndarray, sr: int, hop_length: int, D: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute the times vector of a spectrogram.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        hop_length: The number of samples between successive frames.\n        D: The spectrogram.\n\n    Returns:\n        The computed times vector.\n    \"\"\"\n    frames = np.arange(0, D.shape[1])\n    times = librosa.frames_to_time(frames, sr=sr, hop_length=hop_length)\n    return times"}
{"example_id": "295", "output": "import librosa\nimport numpy as np\n\ndef compute_samples_like(y: np.ndarray, sr: int, D: np.ndarray, hop_length: int) -> np.ndarray:\n    \"\"\"\n    Compute the samples vector of a spectrogram.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        D: The spectrogram.\n    \n    Returns:\n        The computed samples vector.\n    \"\"\"\n    n_frames = D.shape[1]\n    samples = np.arange(n_frames) * hop_length\n    return samples"}
{"example_id": "296", "output": "import librosa\nimport numpy as np\n\ndef compute_samples_like(y: np.ndarray, sr: int, D: np.ndarray, hop_length: int) -> np.ndarray:\n    \"\"\"\n    Compute the samples vector of a spectrogram.\n\n    Parameters:\n        y: The audio signal.\n        sr: The sampling rate of the audio signal in Hertz.\n        D: The spectrogram.\n    \n    Returns:\n        The computed samples vector.\n    \"\"\"\n    samples = librosa.samples_like(D, hop_length=hop_length, sr=sr)\n    return samples"}
{"example_id": "297", "output": "import librosa\nimport numpy as np\n\ndef compute_tone(frequency: int, sr: int, length: int) -> np.ndarray:\n    \"\"\"\n    Constructs a pure tone (cosine) signal at a given frequency.\n\n    Parameters:\n        frequency: The frequency of the tone in Hz.\n        sr: The sampling rate of the signal in Hz.\n        length: The length of the signal in samples.\n\n    Returns:\n        np.ndarray: The pure tone signal.\n    \"\"\"\n    time = np.linspace(0, length / sr, length, endpoint=False)\n    tone = np.cos(2 * np.pi * frequency * time)\n    return tone"}
{"example_id": "298", "output": "import librosa\nimport numpy as np\n\ndef compute_tone(frequency: int, sr: int, length: int) -> np.ndarray:\n    \"\"\"\n    Constructs a pure tone (cosine) signal at a given frequency.\n\n    Parameters:\n        frequency: The frequency of the tone in Hz.\n        sr: The sampling rate of the signal in Hz.\n        length: The length of the signal in samples.\n\n    Returns:\n        np.ndarray: The pure tone signal.\n    \"\"\"\n    time = np.arange(length) / sr\n    return np.cos(2 * np.pi * frequency * time)"}
{"example_id": "299", "output": "import librosa\nimport numpy as np\nimport scipy.signal as signal\n\ndef compute_chirp(fmin: int, fmax: int, duration: int, sr: int, linear: bool) -> np.ndarray:\n    \"\"\"\n    Constructs a \u201cchirp\u201d or \u201csine-sweep\u201d signal. The chirp sweeps from frequency fmin to fmax (in Hz).\n\n    Parameters:\n        fmin: The minimum frequency of the chirp in Hz.\n        fmax: The maximum frequency of the chirp in Hz.\n        duration: The duration of the chirp in seconds.\n        sr: The sampling rate of the signal in Hz.\n\n    Returns:\n        np.ndarray: The chirp signal.\n    \"\"\"\n    time = np.linspace(0, duration, int(sr * duration), endpoint=False)\n    method = \"linear\" if linear else \"quadratic\"\n    chirp_signal = signal.chirp(time, f0=fmin, f1=fmax, t1=duration, method=method)\n    return chirp_signal"}
{"example_id": "300", "output": "import librosa\nimport numpy as np\n\ndef compute_chirp(fmin: int, fmax: int, duration: int, sr: int, linear: bool) -> np.ndarray:\n    \"\"\"\n    Constructs a \u201cchirp\u201d or \u201csine-sweep\u201d signal. The chirp sweeps from frequency fmin to fmax (in Hz).\n\n    Parameters:\n        fmin: The minimum frequency of the chirp in Hz.\n        fmax: The maximum frequency of the chirp in Hz.\n        duration: The duration of the chirp in seconds.\n        sr: The sampling rate of the signal in Hz.\n\n    Returns:\n        np.ndarray: The chirp signal.\n    \"\"\"\n    return librosa.chirp(fmin, fmax, sr=sr, duration=duration, linear=linear)"}
{"example_id": "301", "output": "import librosa\nimport numpy as np\n\ndef compute_shear(E: np.ndarray, factor: int, axis: int) -> np.ndarray:\n    E_shear = np.copy(E)  # Create a copy to avoid modifying the original\n\n    if axis == 0 or axis == 1:  # Check for valid axis\n        for i in range(E.shape[1-axis]):  # Iterate based on axis 0 or 1\n            E_shear[:, i] = np.roll(E[:, i], factor * i) # roll by factor *i along the selected axis\n        if axis == 0: # If axis is 0, Transpose the matrix at the end.\n            E_shear = E_shear.T\n    else:\n        raise ValueError(\"Axis must be 0 or 1 for 2D array.\")\n\n    return E_shear"}
{"example_id": "302", "output": "import librosa\nimport numpy as np\n\ndef compute_shear(E: np.ndarray, factor: int, axis: int) -> np.ndarray:\n    E_shear = np.copy(E)\n    if axis == 0:  # Vertical Shear\n        for i in range(E.shape[1]):\n            E_shear[:, i] = np.roll(E[:, i], factor * i)\n    elif axis == 1:  # Horizontal Shear\n        for i in range(E.shape[0]):\n            E_shear[i, :] = np.roll(E[i, :], factor * i)\n    return E_shear"}
{"example_id": "303", "output": "import librosa\nimport numpy as np\n\ndef compute_localmin(x: np.ndarray, axis: int) -> np.ndarray:\n    return librosa.util.localmin(x, axis=axis)"}
{"example_id": "304", "output": "import librosa\nimport numpy as np\n\ndef compute_localmin(x: np.ndarray, axis: int) -> np.ndarray:\n    padded = np.pad(x, 1, mode='edge')\n    local_min_indices = np.where((x < padded[slice(0, -2, None) if axis == 0 else slice(1,-1)]) & \n                                 (x <= padded[slice(2, None, None) if axis == 0 else slice(1,-1)]))\n    minima = np.zeros_like(x, dtype=bool)\n    minima[local_min_indices] = True\n    return minima"}
{"example_id": "305", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Optional\n\ndef compute_yin(sr: int, fmin: int, fmax: int, duration: float, period: float, phi: float, method: str, y: np.ndarray, frame_length: int, center: bool, pad_mode: str, win_length: Optional[int], hop_length: Optional[int], trough_threshold: float) -> np.ndarray:\n    \"\"\"\n    Calculates the fundamental frequency (F0) estimation using the YIN algorithm.\n\n    Parameters:\n        sr: The sampling rate of the audio signal in Hertz.\n        fmin: The minimum frequency to consider in Hz.\n        fmax: The maximum frequency to consider in Hz.\n        duration: The duration of the audio signal in seconds.\n        period: The period of the fundamental frequency in seconds.\n        phi: The phase of the fundamental frequency in radians.\n        method: Interpolation method.\n        y: The audio signal.\n        frame_length: The length of the frame in samples.\n        center: If True, the signal y is padded so that frame t is centered at y[t * hop_length].\n        pad_mode: Padding mode.\n        win_length: Window length.\n        hop_length: Hop length.\n        trough_threshold: Absolute threshold for peak estimation.\n\n    Returns:\n        The estimated fundamental frequency in Hz.\n    \"\"\"\n    f0 = librosa.yin(y, fmin=fmin, fmax=fmax, sr=sr, frame_length=frame_length, win_length=win_length, hop_length=hop_length)\n    return f0"}
{"example_id": "306", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Optional\n\ndef compute_yin(sr: int, fmin: int, fmax: int, duration: float, period: float, phi: float, method: str, y: np.ndarray, frame_length: int, center: bool, pad_mode: str, win_length: Optional[int], hop_length: Optional[int], trough_threshold: float) -> np.ndarray:\n    \"\"\"\n    Calculates the fundamental frequency (F0) estimation using the YIN algorithm.\n\n    Parameters:\n        sr: The sampling rate of the audio signal in Hertz.\n        fmin: The minimum frequency to consider in Hz.\n        fmax: The maximum frequency to consider in Hz.\n        duration: The duration of the audio signal in seconds.\n        period: The period of the fundamental frequency in seconds.\n        phi: The phase of the fundamental frequency in radians.\n        method: Interpolation method.\n        y: The audio signal.\n        frame_length: The length of the frame in samples.\n        center: If True, the signal y is padded so that frame t is centered at y[t * hop_length].\n        pad_mode: Padding mode.\n        win_length: Window length.\n        hop_length: Hop length.\n        trough_threshold: Absolute threshold for peak estimation.\n\n    Returns:\n        The estimated fundamental frequency in Hz.\n    \"\"\"\n    f0 = librosa.yin(y, fmin=fmin, fmax=fmax, sr=sr, frame_length=frame_length, center=center, pad_mode=pad_mode, win_length=win_length, hop_length=hop_length, trough_threshold=trough_threshold)\n    return f0"}
{"example_id": "307", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union, Optional, Tuple\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_pyin(freq: int, sr: int, y: np.ndarray, fmin: int, fmax: int, frame_length: int, center: bool, pad_mode: str, win_length: Optional[int], hop_length: Optional[int], n_thresholds: int, beta_parameters: Tuple[int], boltzmann_parameter: int, resolution: float, max_transition_rate: float, switch_prob: float, no_trough_prob: float, fill_na: DTypeLike) -> np.ndarray:\n    \"\"\"\n    Calculates the fundamental frequency estimation using probabilistic YIN.\n\n    Parameters:\n        freq: The frequency of the fundamental frequency in Hz.\n        sr: The sampling rate of the audio signal in Hertz.\n        y: The audio signal.\n        fmin: The minimum frequency to consider in Hz.\n        fmax: The maximum frequency to consider in Hz.\n        frame_length: The length of the frame in samples.\n        center: If True, the signal y is padded so that frame t is centered at y[t * hop_length].\n        pad_mode: Padding mode.\n        win_length: Window length.\n        hop_length: Hop length.\n        n_thresholds: Number of thresholds.\n        beta_parameters: Beta parameters.\n        boltzmann_parameter: Boltzmann parameter.\n        resolution: Resolution.\n        max_transition_rate: Maximum transition rate.\n        switch_prob: Switch probability.\n        no_trough_prob: No trough probability.\n        fill_na: Fill NA value.\n\n    Returns:\n        Time series of fundamental frequencies in Hertz.\n    \"\"\"\n    f0, voiced_flag, voiced_probs = librosa.pyin(y, fmin=fmin, fmax=fmax, sr=sr, frame_length=frame_length, center=center, pad_mode=pad_mode, win_length=win_length, hop_length=hop_length, n_thresholds=n_thresholds, beta_parameters=beta_parameters, boltzmann_parameter=boltzmann_parameter, resolution=resolution, max_transition_rate=max_transition_rate, switch_prob=switch_prob, no_trough_prob=no_trough_prob, fill_na=fill_na)\n    return f0"}
{"example_id": "308", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union, Optional, Tuple\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_pyin(freq: int, sr: int, y: int, fmin: int, fmax: int, frame_length: int, center: bool, pad_mode: str, win_length: Optional[int], hop_length: Optional[int], n_thresholds: int, beta_parameters: Tuple[int], boltzmann_parameter: int, resolution: float, max_transition_rate: float, switch_prob: float, no_trough_prob: float, fill_na: DTypeLike) -> np.ndarray:\n    \"\"\"\n    Calculates the fundamental frequency estimation using probabilistic YIN.\n\n    Parameters:\n        freq: The frequency of the fundamental frequency in Hz.\n        sr: The sampling rate of the audio signal in Hertz.\n        y: The audio signal.\n        fmin: The minimum frequency to consider in Hz.\n        fmax: The maximum frequency to consider in Hz.\n        frame_length: The length of the frame in samples.\n        center: If True, the signal y is padded so that frame t is centered at y[t * hop_length].\n        pad_mode: Padding mode.\n        win_length: Window length.\n        hop_length: Hop length.\n        n_thresholds: Number of thresholds.\n        beta_parameters: Beta parameters.\n        boltzmann_parameter: Boltzmann parameter.\n        resolution: Resolution.\n        max_transition_rate: Maximum transition rate.\n        switch_prob: Switch probability.\n        no_trough_prob: No trough probability.\n        fill_na: Fill NA value.\n\n    Returns:\n        Time series of fundamental frequencies in Hertz.\n    \"\"\"\n    f0, voiced_flag, voiced_probs = librosa.pyin(y, fmin=fmin, fmax=fmax, sr=sr, frame_length=frame_length, center=center, pad_mode=pad_mode, win_length=win_length, hop_length=hop_length, n_thresholds=n_thresholds, beta_parameters=beta_parameters, boltzmann_parameter=boltzmann_parameter, resolution=resolution, max_transition_rate=max_transition_rate, switch_prob=switch_prob, no_trough_prob=no_trough_prob, fill_na=fill_na)\n    return f0"}
{"example_id": "309", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union\n\nDTypeLike = Union[np.dtype, type]\n\n\ndef compute_vqt(y: np.ndarray, sr: int, hop_length: int, fmin: int, n_bins: int, gamma: int, bins_per_octave: int, tuning: float, filter_scale: int, norm: 1, sparsity: float, window: str, scale: bool, pad_mode: str, res_type: str, dtype: DTypeLike) -> np.ndarray:\n    vqt = librosa.vqt(y=y, sr=sr, hop_length=hop_length, fmin=fmin, n_bins=n_bins, gamma=gamma, bins_per_octave=bins_per_octave, tuning=tuning, filter_scale=filter_scale, norm=norm, sparsity=sparsity, window=window, scale=scale, pad_mode=pad_mode, res_type=res_type, dtype=dtype)\n    return vqt"}
{"example_id": "310", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\n\ndef compute_vqt(y: np.ndarray, sr: int) -> np.ndarray:\n    C = librosa.vqt(y=y, sr=sr, hop_length=512, fmin=librosa.note_to_hz('C1'),\n                n_bins=84, bins_per_octave=12, gamma=None)\n    return C"}
{"example_id": "311", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_griffinlim_cqt(y: np.ndarray, sr: int, C, n_iter: int, hop_length: int, fmin: int, bins_per_octave: int, tuning: float, filter_scale: 1, norm: int, sparsity: float, window: str, scale: bool, pad_mode: str, res_type: str, dtype: DTypeLike, length: Optional[int], momentum: float, init: Optional[str]) -> np.ndarray:\n    rng = np.random.RandomState(seed=0)\n    return librosa.griffinlim_cqt(C, n_iter=n_iter, sr=sr, hop_length=hop_length, fmin=fmin, bins_per_octave=bins_per_octave, tuning=tuning, filter_scale=filter_scale, norm=norm, sparsity=sparsity, window=window, scale=scale, pad_mode=pad_mode, res_type=res_type, dtype=dtype, length=length, momentum=momentum, init=init, random_state=rng)"}
{"example_id": "312", "output": "import librosa\nimport numpy as np\nimport scipy\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\ndef compute_griffinlim_cqt(y: np.ndarray, sr: int, C, n_iter: int, hop_length: int, fmin: int, bins_per_octave: int, tuning: float, filter_scale: 1, norm: int, sparsity: float, window: str, scale: bool, pad_mode: str, res_type: str, dtype: DTypeLike, length: Optional[int], momentum: float, init: Optional[str]) -> np.ndarray:\n    rng = np.random.RandomState(seed=0)\n    return librosa.griffinlim_cqt(C, sr=sr, hop_length=hop_length, n_iter=n_iter, bins_per_octave=bins_per_octave, fmin=fmin)"}
{"example_id": "313", "output": "import librosa\nimport numpy as np\nimport scipy\nimport scipy.optimize\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\n\ndef compute_mel_to_audio(y: np.ndarray, sr: int, S: np.ndarray, M: np.ndarray, n_fft: int, hop_length: Optional[int], win_length: Optional[int], window: str, center: bool, pad_mode: str, power: float, n_iter: int, length: Optional[int], dtype: DTypeLike) -> np.ndarray:\n    np.random.seed(seed=0)\n    audio = librosa.feature.inverse.mel_to_audio(M, sr=sr, n_fft=n_fft, hop_length=hop_length, win_length=win_length, window=window, center=center, pad_mode=pad_mode, power=power, n_iter=n_iter, length=length, dtype=dtype)\n    return audio"}
{"example_id": "314", "output": "import librosa\nimport numpy as np\nimport scipy\nimport scipy.optimize\nfrom typing import Union, Optional\n\nDTypeLike = Union[np.dtype, type]\n\n\ndef compute_mel_to_audio(y: np.ndarray, sr: int, S: np.ndarray, M: np.ndarray, n_fft: int, hop_length: Optional[int], win_length: Optional[int], window: str, center: bool, pad_mode: str, power: float, n_iter: int, length: Optional[int], dtype: DTypeLike) -> np.ndarray:\n    \"\"\"Complete the function to invert a mel power spectrogram to audio using Griffin-Lim.\"\"\"\n    np.random.seed(seed=0)\n    return librosa.feature.inverse.mel_to_audio(M, sr=sr, n_fft=n_fft, hop_length=hop_length, win_length=win_length, window=window, center=center, pad_mode=pad_mode, power=power, n_iter=n_iter)"}
{"example_id": "315", "output": "import librosa\nimport numpy as np\nimport scipy.fftpack as fft\n\ndef compute_mfcc_to_mel(mfcc: np.ndarray, n_mels: int=128, dct_type: int=2, norm: str='ortho', ref: float=1.0) -> np.ndarray:\n    \"\"\"\n    Invert Mel-frequency cepstral coefficients to approximate a Mel power spectrogram.\n\n    Parameters:\n        mfcc (np.ndarray): Mel-frequency cepstral coefficients.\n        n_mels (int): Number of Mel bands to generate.\n        dct_type (int): Type of DCT to use.\n        norm (str): Normalization to use.\n        ref: Reference power for (inverse) decibel calculation\n\n    Returns:\n        An approximate Mel power spectrum recovered from mfcc.        \n    \"\"\"\n    n_fft = 2048 # Adjust this according to how your STFT and Mel spectrogram were calculated initially\n    sr = 22050 # Replace with the actual sample rate used\n    mel_basis = librosa.filters.mel(sr=sr, n_fft=n_fft, n_mels=n_mels)\n    mel_spectrogram_db = fft.idct(mfcc, axis=0, type=dct_type, norm=norm)\n    mel_spectrogram = librosa.db_to_power(mel_spectrogram_db, ref=ref)\n    return mel_spectrogram"}
{"example_id": "316", "output": "import librosa\nimport numpy as np\nimport scipy\n\ndef compute_mfcc_to_mel(mfcc: np.ndarray, n_mels: int=128, dct_type: int=2, norm: str='ortho', ref: float=1.0) -> np.ndarray:\n    \"\"\"\n    Invert Mel-frequency cepstral coefficients to approximate a Mel power spectrogram.\n\n    Parameters:\n        mfcc (np.ndarray): Mel-frequency cepstral coefficients.\n        n_mels (int): Number of Mel bands to generate.\n        dct_type (int): Type of DCT to use.\n        norm (str): Normalization to use.\n        ref: Reference power for (inverse) decibel calculation\n\n    Returns:\n        An approximate Mel power spectrum recovered from mfcc.        \n    \"\"\"    \n    np.random.seed(seed=0)\n    n_mfcc = mfcc.shape[0]\n    mel_basis = librosa.filters.mel(sr=22050, n_fft=2048, n_mels=n_mels)\n    mel_spectrum_approx = np.dot(mel_basis.T, scipy.fftpack.idct(mfcc, type=dct_type, norm=norm, axis=0))\n    return mel_spectrum_approx"}
{"example_id": "317", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    img1 = img1.convert(\"RGBA\")\n    img2 = img2.convert(\"RGBA\")\n    if img1.size != img2.size:\n        img2 = img2.resize(img1.size)\n    return ImageChops.hard_light(img1, img2)"}
{"example_id": "318", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    img2 = img2.resize(img1.size)\n    img1 = img1.convert(\"RGBA\")\n    img2 = img2.convert(\"RGBA\")\n    blended_image = ImageChops.soft_light(img1, img2)\n    return blended_image"}
{"example_id": "319", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    img1 = img1.convert(\"RGBA\")\n    img2 = img2.convert(\"RGBA\")\n\n    width, height = img1.size\n    img_out = Image.new(\"RGBA\", (width, height))\n    for x in range(width):\n        for y in range(height):\n            r1, g1, b1, a1 = img1.getpixel((x, y))\n            r2, g2, b2, a2 = img2.getpixel((x, y))\n            if r2 < 128:\n                r = 2 * r1 * r2 / 255\n                g = 2 * g1 * g2 / 255\n                b = 2 * b1 * b2 / 255\n            else:\n                r = 255 - 2 * (255 - r1) * (255 - r2) / 255\n                g = 255 - 2 * (255 - g1) * (255 - g2) / 255\n                b = 255 - 2 * (255 - b1) * (255 - b2) / 255\n            a = a1 + a2 * (1 - a1 / 255.0)\n            img_out.putpixel((x, y), (int(r), int(g), int(b), int(a)))\n    return img_out"}
{"example_id": "320", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    img1 = img1.convert(\"RGB\")\n    img2 = img2.convert(\"RGB\")\n    np_img1 = np.array(img1, dtype=float) / 255.0\n    np_img2 = np.array(img2, dtype=float) / 255.0\n    result = np.where(np_img1 <= 0.5, 2 * np_img1 * np_img2, 1 - 2 * (1 - np_img1) * (1 - np_img2))\n    result = Image.fromarray(np.uint8(result * 255))\n    return result"}
{"example_id": "321", "output": "import numpy as np\nfrom PIL import Image, ImageChops\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    img1 = img1.convert(\"RGBA\")\n    img2 = img2.convert(\"RGBA\")\n    return ImageChops.soft_light(img1, img2)"}
{"example_id": "322", "output": "import numpy as np\nfrom PIL import Image\n\ndef imaging(img1: Image, img2: Image) -> Image:\n    img1 = img1.convert(\"RGBA\")\n    img2 = img2.convert(\"RGBA\")\n\n    # Ensure images are of the same size\n    if img1.size != img2.size:\n        img2 = img2.resize(img1.size)\n\n    # Perform hard light blending\n    img = Image.blend(img1, img2, 0.5)\n\n    return img"}
{"example_id": "323", "output": "from tqdm import tqdm\n\ndef infinite():\n    i = 0\n    while True:\n        yield i\n        i += 1\n        if i == 1000:\n          return\n\n# Define the total in sol_dict['total'] and use it.\nsol_dict = {{\"total\":0}\"\nwith tqdm(total=float('inf')) as pbar:\n    for i in infinite():\n        pbar.update(1)\n        sol_dict[\"total\"] += i\n\nprint(sol_dict)"}
{"example_id": "324", "output": "from tqdm import tqdm\n\ndef infinite():\n    i = 0\n    while True:\n        yield i\n        i += 1\n        if i == 1000:\n          return\n\n# Define the total in sol_dict['total'] and use it.\nsol_dict = {{\"total\":0}}\nfor i in tqdm(infinite(), desc=\"Infinite loop\", total=1000, unit=\"iterations\"):\n    pass"}
{"example_id": "325", "output": "import kymatio\nimport torch\nfrom kymatio import Scattering2D\nfrom kymatio.scattering2d.frontend.torch_frontend import ScatteringTorch2D\nfrom typing import Tuple\n\ndef compute_scattering(a: torch.Tensor) -> Tuple[torch.Tensor, ScatteringTorch2D]:\n    J = 2\n    shape = a.shape[-2:]\n    scattering = ScatteringTorch2D(J=J, shape=shape)\n    Sx = scattering(a)\n    return Sx, scattering"}
{"example_id": "326", "output": "import matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.figure import Figure\nfrom matplotlib.axes import Axes\n\ndef modify(fig: Figure, ax: Axes) -> None:\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nfig, ax = plt.subplots()\nax.plot([1, 2, 3], [4, 5, 6])\nmodify(fig, ax)\nplt.show()"}
{"example_id": "327", "output": "import matplotlib.pyplot as plt\nfrom matplotlib.figure import Figure\nfrom matplotlib.axes import Axes\n\ndef modify(fig: Figure, ax: Axes) -> None:\n    ax.tick_params(axis='both', which='both', \n                    bottom=False, top=False, left=False, right=False,\n                    labelbottom=False, labeltop=False, labelleft=False, labelright=False)"}
{"example_id": "328", "output": "import matplotlib.pyplot as plt\nfrom matplotlib.figure import Figure\nfrom matplotlib.axes import Axes\n\ndef modify(fig: Figure, ax: Axes) -> None:\n    ax.tick_params(axis='both', which='both', length=0, labelbottom=False, labelleft=False)"}
{"example_id": "329", "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef use_seaborn() -> None:\n    plt.style.use('seaborn-v0_8')\n    x = [1, 2, 3, 4, 5]\n    y = [2, 4, 1, 5, 3]\n    plt.plot(x, y)\n    plt.xlabel(\"X-axis\")\n    plt.ylabel(\"Y-axis\")\n    plt.title(\"Seaborn v0_8 Style Plot\")\n    plt.show()"}
{"example_id": "330", "output": "import matplotlib.pyplot as plt\n\ndef use_seaborn() -> None:\n    plt.style.use('seaborn-v0_8-whitegrid')\n    x = [1, 2, 3, 4, 5]\n    y = [2, 4, 1, 3, 5]\n    plt.plot(x, y)\n    plt.xlabel(\"X-axis\")\n    plt.ylabel(\"Y-axis\")\n    plt.title(\"Example Plot with Seaborn Style\")\n    plt.show()"}
